"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[52688],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>b});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var o=n.createContext({}),u=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},m=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,l=e.originalType,o=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=u(a),p=s,b=c["".concat(o,".").concat(p)]||c[p]||d[p]||l;return a?n.createElement(b,r(r({ref:t},m),{},{components:a})):n.createElement(b,r({ref:t},m))}));function b(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var l=a.length,r=new Array(l);r[0]=p;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[c]="string"==typeof e?e:s,r[1]=i;for(var u=2;u<l;u++)r[u]=a[u];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},67357:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var n=a(87462),s=(a(67294),a(3905)),l=a(65488),r=a(85162);const i={id:"select",title:"Fetch data: select()",slug:"/select",custom_edit_url:"https://github.com/supabase/supabase/edit/master/spec/supabase_js_v2.yml"},o=void 0,u={unversionedId:"generated/select",id:"generated/select",title:"Fetch data: select()",description:"Parameters",source:"@site/_supabase_js/generated/select.mdx",sourceDirName:"generated",slug:"/select",permalink:"/docs/reference/javascript/select",draft:!1,editUrl:"https://github.com/supabase/supabase/edit/master/spec/supabase_js_v2.yml",tags:[],version:"current",frontMatter:{id:"select",title:"Fetch data: select()",slug:"/select",custom_edit_url:"https://github.com/supabase/supabase/edit/master/spec/supabase_js_v2.yml"}},m={},c=[{value:"Parameters",id:"parameters",level:2},{value:"Notes",id:"notes",level:2},{value:"Examples",id:"examples",level:2},{value:"Getting your data",id:"getting-your-data",level:3},{value:"Selecting specific columns",id:"selecting-specific-columns",level:3},{value:"Query foreign tables",id:"query-foreign-tables",level:3},{value:"Query foreign tables through a join table",id:"query-foreign-tables-through-a-join-table",level:3},{value:"Query the same foreign table multiple times",id:"query-the-same-foreign-table-multiple-times",level:3},{value:"Filtering through foreign tables",id:"filtering-through-foreign-tables",level:3},{value:"Querying with count option",id:"querying-with-count-option",level:3},{value:"Querying JSON data",id:"querying-json-data",level:3}],d={toc:c};function p(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const { data, error } = await supabase\n  .from('countries')\n  .select()\n")),(0,s.kt)("h2",{id:"parameters"},"Parameters"),(0,s.kt)("ul",{className:"method-list-group"},(0,s.kt)("li",{className:"method-list-item"},(0,s.kt)("h4",{className:"method-list-item-label"},(0,s.kt)("span",{className:"method-list-item-label-name"},"columns"),(0,s.kt)("span",{className:"method-list-item-label-badge false"},"optional"),(0,s.kt)("span",{className:"method-list-item-validation"},(0,s.kt)("code",null,"Query"))),(0,s.kt)("div",{class:"method-list-item-description"},(0,s.kt)("p",null,"No description provided. "))),(0,s.kt)("li",{className:"method-list-item"},(0,s.kt)("h4",{className:"method-list-item-label"},(0,s.kt)("span",{className:"method-list-item-label-name"},"options"),(0,s.kt)("span",{className:"method-list-item-label-badge required"},"required"),(0,s.kt)("span",{className:"method-list-item-validation"},(0,s.kt)("code",null,"object"))),(0,s.kt)("div",{class:"method-list-item-description"},(0,s.kt)("p",null,"No description provided. ")),(0,s.kt)("ul",{className:"method-list-group"},(0,s.kt)("h5",{class:"method-list-title method-list-title-isChild expanded"},"Properties"),(0,s.kt)("li",{className:"method-list-item"},(0,s.kt)("h4",{className:"method-list-item-label"},(0,s.kt)("span",{className:"method-list-item-label-name"},"count"),(0,s.kt)("span",{className:"method-list-item-label-badge false"},"optional"),(0,s.kt)("span",{className:"method-list-item-validation"},(0,s.kt)("code",null,"exact")," | ",(0,s.kt)("code",null,"planned")," | ",(0,s.kt)("code",null,"estimated"))),(0,s.kt)("div",{class:"method-list-item-description"},(0,s.kt)("p",null,"No description provided. "))),(0,s.kt)("li",{className:"method-list-item"},(0,s.kt)("h4",{className:"method-list-item-label"},(0,s.kt)("span",{className:"method-list-item-label-name"},"head"),(0,s.kt)("span",{className:"method-list-item-label-badge false"},"optional"),(0,s.kt)("span",{className:"method-list-item-validation"},(0,s.kt)("code",null,"boolean"))),(0,s.kt)("div",{class:"method-list-item-description"},(0,s.kt)("p",null,"No description provided. ")))))),(0,s.kt)("h2",{id:"notes"},"Notes"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's ",(0,s.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/settings/api"},"API settings"),". It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use ",(0,s.kt)("inlineCode",{parentName:"li"},"range()")," queries to paginate through your data."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"select()")," can be combined with ",(0,s.kt)("a",{parentName:"li",href:"/docs/reference/javascript/using-filters"},"Filters")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"select()")," can be combined with ",(0,s.kt)("a",{parentName:"li",href:"/docs/reference/javascript/using-modifiers"},"Modifiers")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"apikey")," is a reserved keyword if you're using the ",(0,s.kt)("a",{parentName:"li",href:"/docs/guides/hosting/platform"},"Supabase Platform")," and should be avoided as a column name](",(0,s.kt)("a",{parentName:"li",href:"https://github.com/supabase/supabase/issues/5465"},"https://github.com/supabase/supabase/issues/5465"),").")),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("h3",{id:"getting-your-data"},"Getting your data"),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"create table\n  countries (id int8 primary key, name text);\n\ninsert into\n  countries (id, name)\nvalues\n  (1, 'Afghanistan'),\n  (2, 'Albania'),\n  (3, 'Algeria');\n"))),(0,s.kt)(r.Z,{default:!0,value:"js",label:"JavaScript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const { data, error } = await supabase\n  .from('countries')\n  .select()\n"))),(0,s.kt)(r.Z,{value:"result",label:"Result",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "id": 1,\n      "name": "Afghanistan"\n    },\n    {\n      "id": 2,\n      "name": "Albania"\n    },\n    {\n      "id": 3,\n      "name": "Algeria"\n    }\n  ],\n  "status": 200,\n  "statusText": "OK"\n}\n')))),(0,s.kt)("h3",{id:"selecting-specific-columns"},"Selecting specific columns"),(0,s.kt)("p",null,"You can select specific fields from your tables."),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"create table\n  countries (id int8 primary key, name text);\n\ninsert into\n  countries (id, name)\nvalues\n  (1, 'Afghanistan'),\n  (2, 'Albania'),\n  (3, 'Algeria');\n"))),(0,s.kt)(r.Z,{default:!0,value:"js",label:"JavaScript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const { data, error } = await supabase\n  .from('countries')\n  .select('name')\n"))),(0,s.kt)(r.Z,{value:"result",label:"Result",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "name": "Afghanistan"\n    },\n    {\n      "name": "Albania"\n    },\n    {\n      "name": "Algeria"\n    }\n  ],\n  "status": 200,\n  "statusText": "OK"\n}\n')))),(0,s.kt)("h3",{id:"query-foreign-tables"},"Query foreign tables"),(0,s.kt)("p",null,"If your database has foreign key relationships, you can query related tables too."),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"create table\n  countries (id int8 primary key, name text);\ncreate table\n  cities (\n    id int8 primary key,\n    country_id int8 not null references countries,\n    name text\n  );\n\ninsert into\n  countries (id, name)\nvalues\n  (1, 'Germany'),\n  (2, 'Indonesia');\ninsert into\n  cities (id, country_id, name)\nvalues\n  (1, 2, 'Bali'),\n  (2, 1, 'Munich');\n"))),(0,s.kt)(r.Z,{default:!0,value:"js",label:"JavaScript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const { data, error } = await supabase\n  .from('countries')\n  .select(`\n    name,\n    cities (\n      name\n    )\n  `)\n"))),(0,s.kt)(r.Z,{value:"result",label:"Result",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "name": "Germany",\n      "cities": [\n        {\n          "name": "Munich"\n        }\n      ]\n    },\n    {\n      "name": "Indonesia",\n      "cities": [\n        {\n          "name": "Bali"\n        }\n      ]\n    }\n  ],\n  "status": 200,\n  "statusText": "OK"\n}\n')))),(0,s.kt)("h3",{id:"query-foreign-tables-through-a-join-table"},"Query foreign tables through a join table"),(0,s.kt)("p",null,"If you're in a situation where your tables are ",(0,s.kt)("strong",{parentName:"p"},"NOT")," directly\nrelated, but instead are joined by a ",(0,s.kt)("em",{parentName:"p"},"join table"),", you can still use\nthe ",(0,s.kt)("inlineCode",{parentName:"p"},"select()")," method to query the related data. The join table needs\nto have the foreign keys as part of its composite primary key."),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"create table\n  users (\n    id int8 primary key,\n    name text\n  );\ncreate table\n  teams (\n    id int8 primary key,\n    name text\n  );\n-- join table\ncreate table\n  users_teams (\n    user_id int8 not null references users,\n    team_id int8 not null references teams,\n    -- both foreign keys must be part of a composite primary key\n    primary key (user_id, team_id)\n  );\n\ninsert into\n  users (id, name)\nvalues\n  (1, 'Kiran'),\n  (2, 'Evan');\ninsert into\n  teams (id, name)\nvalues\n  (1, 'Green'),\n  (2, 'Blue');\ninsert into\n  users_teams (user_id, team_id)\nvalues\n  (1, 1),\n  (1, 2),\n  (2, 2);\n"))),(0,s.kt)(r.Z,{default:!0,value:"js",label:"JavaScript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const { data, error } = await supabase\n  .from('users')\n  .select(`\n    name,\n    teams (\n      name\n    )\n  `)\n"))),(0,s.kt)(r.Z,{value:"result",label:"Result",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "name": "Kiran",\n      "teams": [\n        {\n          "name": "Green"\n        },\n        {\n          "name": "Blue"\n        }\n      ]\n    },\n    {\n      "name": "Evan",\n      "teams": [\n        {\n          "name": "Blue"\n        }\n      ]\n    }\n  ],\n  "status": 200,\n  "statusText": "OK"\n}\n')))),(0,s.kt)("h3",{id:"query-the-same-foreign-table-multiple-times"},"Query the same foreign table multiple times"),(0,s.kt)("p",null,"If you need to query the same foreign table twice, use the name of the\njoined column to identify which join to use. You can also give each\ncolumn an alias."),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"create table\n  users (id int8 primary key, name text);\n\ncreate table\n  messages (\n    sender_id int8 not null references users,\n    receiver_id int8 not null references users,\n    content text\n  );\n\ninsert into\n  users (id, name)\nvalues\n  (1, 'Kiran'),\n  (2, 'Evan');\n\ninsert into\n  messages (sender_id, receiver_id, content)\nvalues\n  (1, 2, '\ud83d\udc4b');\n"))),(0,s.kt)(r.Z,{default:!0,value:"js",label:"JavaScript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const { data, error } = await supabase\n  .from('messages')\n  .select(`\n    content,\n    from:sender_id(name),\n    to:receiver_id(name)\n  `)\n"))),(0,s.kt)(r.Z,{value:"result",label:"Result",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "content": "\ud83d\udc4b",\n      "from": {\n        "name": "Kiran"\n      },\n      "to": {\n        "name": "Evan"\n      }\n    }\n  ],\n  "status": 200,\n  "statusText": "OK"\n}\n')))),(0,s.kt)("h3",{id:"filtering-through-foreign-tables"},"Filtering through foreign tables"),(0,s.kt)("p",null,"If the filter on a foreign table's column is not satisfied, the foreign\ntable returns ",(0,s.kt)("inlineCode",{parentName:"p"},"[]")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"null")," but the parent table is not filtered out. "),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"create table\n  countries (id int8 primary key, name text);\ncreate table\n  cities (\n    id int8 primary key,\n    country_id int8 not null references countries,\n    name text\n  );\n\ninsert into\n  countries (id, name)\nvalues\n  (1, 'Germany'),\n  (2, 'Indonesia');\ninsert into\n  cities (id, country_id, name)\nvalues\n  (1, 2, 'Bali'),\n  (2, 1, 'Munich');\n"))),(0,s.kt)(r.Z,{default:!0,value:"js",label:"JavaScript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const { data, error } = await supabase\n  .from('cities')\n  .select('name, countries(*)')\n  .eq('countries.name', 'Estonia')\n"))),(0,s.kt)(r.Z,{value:"result",label:"Result",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "name": "Bali",\n      "countries": null\n    },\n    {\n      "name": "Munich",\n      "countries": null\n    }\n  ],\n  "status": 200,\n  "statusText": "OK"\n}\n')))),(0,s.kt)("p",null,"If you want to filter out the parent table rows, use the ",(0,s.kt)("inlineCode",{parentName:"p"},"!inner")," hint:"),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{default:!0,value:"js",label:"JavaScript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const { data, error } = await supabase\n  .from('cities')\n  .select('name, countries!inner(*)')\n  .eq('countries.name', 'Estonia')\n"))),(0,s.kt)(r.Z,{value:"result",label:"Result",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [],\n  "status": 200,\n  "statusText": "OK"\n}\n')))),(0,s.kt)("h3",{id:"querying-with-count-option"},"Querying with count option"),(0,s.kt)("p",null,"You can get the number of rows by using the\n",(0,s.kt)("a",{parentName:"p",href:"/docs/reference/javascript/select#parameters"},"count")," option. For\nexample, to get the table count without returning all rows:"),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"create table\n  countries (id int8 primary key, name text);\n\ninsert into\n  countries (id, name)\nvalues\n  (1, 'Afghanistan'),\n  (2, 'Albania'),\n  (3, 'Algeria');\n"))),(0,s.kt)(r.Z,{default:!0,value:"js",label:"JavaScript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const { count, error } = await supabase\n  .from('countries')\n  .select('*', { count: 'exact', head: true })\n"))),(0,s.kt)(r.Z,{value:"result",label:"Result",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "count": 3,\n  "status": 200,\n  "statusText": "OK"\n}\n')))),(0,s.kt)("h3",{id:"querying-json-data"},"Querying JSON data"),(0,s.kt)("p",null,"You can select and filter data inside of\n",(0,s.kt)("a",{parentName:"p",href:"/docs/guides/database/json"},"JSON")," columns. Postgres offers some\n",(0,s.kt)("a",{parentName:"p",href:"/docs/guides/database/json#query-the-jsonb-data"},"operators")," for\nquerying JSON data."),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"schema",label:"Schema",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"create table\n  users (\n    id int8 primary key,\n    name text,\n    address jsonb\n  );\n\ninsert into\n  users (id, name, address)\nvalues\n  (1, 'Avdotya', '{\"city\":\"Saint Petersburg\"}');\n"))),(0,s.kt)(r.Z,{default:!0,value:"js",label:"JavaScript",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const { data, error } = await supabase\n  .from('users')\n  .select(`\n    id, name,\n    address->city\n  `)\n"))),(0,s.kt)(r.Z,{value:"result",label:"Result",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": [\n    {\n      "id": 1,\n      "name": "Avdotya",\n      "city": "Saint Petersburg"\n    }\n  ],\n  "status": 200,\n  "statusText": "OK"\n}\n')))))}p.isMDXComponent=!0},85162:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(67294),s=a(86010);const l="tabItem_Ymn6";function r(e){let{children:t,hidden:a,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,s.Z)(l,r),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>p});var n=a(87462),s=a(67294),l=a(86010),r=a(72389),i=a(67392),o=a(7094),u=a(12466);const m="tabList__CuJ",c="tabItem_LNqP";function d(e){const{lazy:t,block:a,defaultValue:r,values:d,groupId:p,className:b}=e,k=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=d??k.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),g=(0,i.l)(h,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const f=null===r?r:r??k.find((e=>e.props.default))?.props.value??k[0].props.value;if(null!==f&&!h.some((e=>e.value===f)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${f}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:v}=(0,o.U)(),[N,T]=(0,s.useState)(f),x=[],{blockElementScrollPositionUntilNextRender:j}=(0,u.o5)();if(null!=p){const e=y[p];null!=e&&e!==N&&h.some((t=>t.value===e))&&T(e)}const w=e=>{const t=e.currentTarget,a=x.indexOf(t),n=h[a].value;n!==N&&(j(t),T(n),null!=p&&v(p,String(n)))},Z=e=>{let t=null;switch(e.key){case"Enter":w(e);break;case"ArrowRight":{const a=x.indexOf(e.currentTarget)+1;t=x[a]??x[0];break}case"ArrowLeft":{const a=x.indexOf(e.currentTarget)-1;t=x[a]??x[x.length-1];break}}t?.focus()};return s.createElement("div",{className:(0,l.Z)("tabs-container",m)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},b)},h.map((e=>{let{value:t,label:a,attributes:r}=e;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>x.push(e),onKeyDown:Z,onClick:w},r,{className:(0,l.Z)("tabs__item",c,r?.className,{"tabs__item--active":N===t})}),a??t)}))),t?(0,s.cloneElement)(k.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function p(e){const t=(0,r.Z)();return s.createElement(d,(0,n.Z)({key:String(t)},e))}}}]);