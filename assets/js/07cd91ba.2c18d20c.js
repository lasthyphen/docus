"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[1794],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),u=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(a),m=r,k=p["".concat(o,".").concat(m)]||p[m]||d[m]||l;return a?n.createElement(k,i(i({ref:t},c),{},{components:a})):n.createElement(k,i({ref:t},c))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<l;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294),r=a(86010);const l="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(87462),r=a(67294),l=a(86010),i=a(72389),s=a(67392),o=a(7094),u=a(12466);const c="tabList__CuJ",p="tabItem_LNqP";function d(e){const{lazy:t,block:a,defaultValue:i,values:d,groupId:m,className:k}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=d??h.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,s.l)(g,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===i?i:i??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==b&&!g.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:y}=(0,o.U)(),[N,w]=(0,r.useState)(b),T=[],{blockElementScrollPositionUntilNextRender:C}=(0,u.o5)();if(null!=m){const e=v[m];null!=e&&e!==N&&g.some((t=>t.value===e))&&w(e)}const S=e=>{const t=e.currentTarget,a=T.indexOf(t),n=g[a].value;n!==N&&(C(t),w(n),null!=m&&y(m,String(n)))},x=e=>{let t=null;switch(e.key){case"Enter":S(e);break;case"ArrowRight":{const a=T.indexOf(e.currentTarget)+1;t=T[a]??T[0];break}case"ArrowLeft":{const a=T.indexOf(e.currentTarget)-1;t=T[a]??T[T.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},k)},g.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>T.push(e),onKeyDown:x,onClick:S},i,{className:(0,l.Z)("tabs__item",p,i?.className,{"tabs__item--active":N===t})}),a??t)}))),t?(0,r.cloneElement)(h.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,i.Z)();return r.createElement(d,(0,n.Z)({key:String(t)},e))}},34896:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var n=a(87462),r=(a(67294),a(3905)),l=a(65488),i=a(85162);const s={id:"functions",title:"Database Functions",description:"Creating and using Postgres functions."},o=void 0,u={unversionedId:"guides/database/functions",id:"guides/database/functions",title:"Database Functions",description:"Creating and using Postgres functions.",source:"@site/docs/guides/database/functions.mdx",sourceDirName:"guides/database",slug:"/guides/database/functions",permalink:"/docs/guides/database/functions",draft:!1,editUrl:"https://github.com/docs/guides/database/functions.mdx",tags:[],version:"current",frontMatter:{id:"functions",title:"Database Functions",description:"Creating and using Postgres functions."}},c={},p=[{value:"Quick demo",id:"quick-demo",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Simple Functions",id:"simple-functions",level:2},{value:"Returning data sets",id:"returning-data-sets",level:2},{value:"Passing parameters",id:"passing-parameters",level:2},{value:"Suggestions",id:"suggestions",level:2},{value:"Database Functions vs Edge Functions",id:"database-functions-vs-edge-functions",level:3},{value:"Security <code>definer</code> vs <code>invoker</code>",id:"security-definer-vs-invoker",level:3},{value:"Function privileges",id:"function-privileges",level:3},{value:"Resources",id:"resources",level:2},{value:"Deep Dive",id:"deep-dive",level:2},{value:"Create Database Functions",id:"create-database-functions",level:3},{value:"Call Database Functions using JavaScript",id:"call-database-functions-using-javascript",level:3},{value:"Using Database Functions to call an external API",id:"using-database-functions-to-call-an-external-api",level:3}],d={toc:p};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Postgres has built-in support for ",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-createfunction.html"},"SQL functions"),".\nThese functions live inside your database, and they can be ",(0,r.kt)("a",{parentName:"p",href:"../../reference/javascript/rpc"},"used with the API"),"."),(0,r.kt)("h2",{id:"quick-demo"},"Quick demo"),(0,r.kt)("div",{class:"video-container"},(0,r.kt)("iframe",{src:"https://www.youtube-nocookie.com/embed/MJZCCpCYEqk",frameBorder:"1",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0})),(0,r.kt)("h2",{id:"getting-started"},"Getting started"),(0,r.kt)("p",null,"Supabase provides several options for creating database functions. You can use the Dashboard or create them directly using SQL.\nWe provide a SQL editor within the Dashboard, or you can ",(0,r.kt)("a",{parentName:"p",href:"../../guides/database/connecting-to-postgres"},"connect")," to your database\nand run the SQL queries yourself."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'Go to the "SQL editor" section.'),(0,r.kt)("li",{parentName:"ol"},'Click "New Query".'),(0,r.kt)("li",{parentName:"ol"},"Enter the SQL to create or replace your Database function."),(0,r.kt)("li",{parentName:"ol"},'Click "Run" or cmd+enter (ctrl+enter).')),(0,r.kt)("h2",{id:"simple-functions"},"Simple Functions"),(0,r.kt)("p",null,'Let\'s create a basic Database Function which returns a string "hello world".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create or replace function hello_world() -- 1\nreturns text -- 2\nlanguage sql -- 3\nas $$  -- 4\n  select 'hello world';  -- 5\n$$; --6\n\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Show/Hide Details"),(0,r.kt)("p",null,"At it's most basic a function has the following parts:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"create or replace function hello_world()"),": The function declaration, where ",(0,r.kt)("inlineCode",{parentName:"li"},"hello_world")," is the name of the function. You can use either ",(0,r.kt)("inlineCode",{parentName:"li"},"create")," when creating a new function or ",(0,r.kt)("inlineCode",{parentName:"li"},"replace")," when replacing an existing function. Or you can use ",(0,r.kt)("inlineCode",{parentName:"li"},"create or replace")," together to handle either."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"returns text"),": The type of data that the function returns. If it returns nothing, you can ",(0,r.kt)("inlineCode",{parentName:"li"},"returns void"),"."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"language sql"),": The language used inside the function body. This can also be a procedural language: ",(0,r.kt)("inlineCode",{parentName:"li"},"plpgsql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"plv8"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"plpython"),", etc."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"as $$"),": The function wrapper. Anything enclosed inside the ",(0,r.kt)("inlineCode",{parentName:"li"},"$$")," symbols will be part of the function body."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"select 'hello world';"),": A simple function body. The final ",(0,r.kt)("inlineCode",{parentName:"li"},"select")," statement inside a function body will be returned if there are no statements following it."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"$$;"),": The closing symbols of the function wrapper."))),(0,r.kt)("br",null),(0,r.kt)("p",null,'After the Function is created, we have several ways of "executing" the function - either directly inside the database using SQL, or with one of the client libraries.'),(0,r.kt)(l.Z,{defaultValue:"SQL",values:[{label:"SQL",value:"SQL"},{label:"JS",value:"JS"},{label:"Dart",value:"Dart"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"SQL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select hello_world();\n"))),(0,r.kt)(i.Z,{value:"JS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { data, error } = await supabase.rpc('hello_world')\n")),(0,r.kt)("p",null,"Reference: ",(0,r.kt)("a",{parentName:"p",href:"../../reference/javascript/rpc"},"rpc()"))),(0,r.kt)(i.Z,{value:"Dart",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final res = await supabase\n  .rpc('hello_world')\n  .execute();\n")),(0,r.kt)("p",null,"Reference: ",(0,r.kt)("a",{parentName:"p",href:"../../reference/dart/rpc"},"rpc()")))),(0,r.kt)("h2",{id:"returning-data-sets"},"Returning data sets"),(0,r.kt)("p",null,"Database Functions can also return data sets from ",(0,r.kt)("a",{parentName:"p",href:"../../guides/database/tables"},"Tables")," or Views."),(0,r.kt)("p",null,"For example, if we had a database with some Star Wars data inside:"),(0,r.kt)(l.Z,{defaultValue:"Data",values:[{label:"Data",value:"Data"},{label:"SQL",value:"SQL"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"SQL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create table planets (\n  id serial primary key,\n  name text\n);\n\ninsert into planets (id, name)\nvalues\n  (1, 'Tattoine'),\n  (2, 'Alderaan'),\n  (3, 'Kashyyyk');\n\ncreate table people (\n  id serial primary key,\n  name text,\n  planet_id bigint references planets\n);\n\ninsert into people (id, name, planet_id)\nvalues\n  (1, 'Anakin Skywalker', 1),\n  (2, 'Luke Skywalker', 1),\n  (3, 'Princess Leia', 2),\n  (4, 'Chewbacca', 3);\n"))),(0,r.kt)(i.Z,{value:"Data",mdxType:"TabItem"},(0,r.kt)("h4",null,"Planets"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"id"),(0,r.kt)("th",{parentName:"tr",align:null},"name"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Tattoine")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Alderaan")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"Kashyyyk")))),(0,r.kt)("h4",null,"People"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"id"),(0,r.kt)("th",{parentName:"tr",align:null},"name"),(0,r.kt)("th",{parentName:"tr",align:null},"planet_id"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Anakin Skywalker"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"Luke Skywalker"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"Princess Leia"),(0,r.kt)("td",{parentName:"tr",align:null},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"Chewbacca"),(0,r.kt)("td",{parentName:"tr",align:null},"3")))))),(0,r.kt)("p",null,"We could create a function which returns all the planets:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create or replace function get_planets()\nreturns setof planets\nlanguage sql\nas $$\n  select * from planets;\n$$;\n")),(0,r.kt)("p",null,"Because this function returns a table set, we can also apply filters and selectors. For example, if we only wanted the first planet:"),(0,r.kt)(l.Z,{defaultValue:"SQL",values:[{label:"SQL",value:"SQL"},{label:"JS",value:"JS"},{label:"Dart",value:"Dart"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"SQL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select *\nfrom get_planets()\nwhere id = 1;\n"))),(0,r.kt)(i.Z,{value:"JS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { data, error } = supabase.rpc('get_planets').eq('id', 1)\n"))),(0,r.kt)(i.Z,{value:"Dart",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final res = await supabase\n  .rpc('get_planets')\n  .eq('id', 1)\n  .execute();\n")))),(0,r.kt)("h2",{id:"passing-parameters"},"Passing parameters"),(0,r.kt)("p",null,"Let's create a Function to insert a new planet into the ",(0,r.kt)("inlineCode",{parentName:"p"},"planets")," table and return the new ID. Note that this time we're using the ",(0,r.kt)("inlineCode",{parentName:"p"},"plpgsql")," language."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create or replace function add_planet(name text)\nreturns bigint\nlanguage plpgsql\nas $$\ndeclare\n  new_row bigint;\nbegin\n  insert into planets(name)\n  values (add_planet.name)\n  returning id into new_row;\n\n  return new_row;\nend;\n$$;\n")),(0,r.kt)("p",null,"Once again, you can execute this function either inside your database using a ",(0,r.kt)("inlineCode",{parentName:"p"},"select")," query, or with the client libraries:"),(0,r.kt)(l.Z,{defaultValue:"SQL",values:[{label:"SQL",value:"SQL"},{label:"JS",value:"JS"},{label:"Dart",value:"Dart"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"SQL",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"select * from add_planet('Jakku');\n"))),(0,r.kt)(i.Z,{value:"JS",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const { data, error } = await supabase.rpc('add_planet', { name: 'Jakku' })\n"))),(0,r.kt)(i.Z,{value:"Dart",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final res = await supabase\n  .rpc('add_planet', params: { 'name': 'Jakku' })\n  .execute();\n")))),(0,r.kt)("h2",{id:"suggestions"},"Suggestions"),(0,r.kt)("h3",{id:"database-functions-vs-edge-functions"},"Database Functions vs Edge Functions"),(0,r.kt)("p",null,"For data-intensive operations, use Database Functions, which are executed within your database\nand can be called remotely using the ",(0,r.kt)("a",{parentName:"p",href:"../api"},"REST and GraphQL API"),"."),(0,r.kt)("p",null,"For use-cases which require low-latency, use ",(0,r.kt)("a",{parentName:"p",href:"../../guides/functions"},"Edge Functions"),", which are globally-distributed and can be written in Typescript."),(0,r.kt)("h3",{id:"security-definer-vs-invoker"},"Security ",(0,r.kt)("inlineCode",{parentName:"h3"},"definer")," vs ",(0,r.kt)("inlineCode",{parentName:"h3"},"invoker")),(0,r.kt)("p",null,"Postgres allows you to specify whether you want the function to be executed as the user ",(0,r.kt)("em",{parentName:"p"},"calling")," the function (",(0,r.kt)("inlineCode",{parentName:"p"},"invoker"),"), or as the ",(0,r.kt)("em",{parentName:"p"},"creator")," of the function (",(0,r.kt)("inlineCode",{parentName:"p"},"definer"),"). For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create function hello_world()\nreturns text\nlanguage plpgsql\nsecurity definer set search_path = public\nas $$\nbegin\n  select 'hello world';\nend;\n$$;\n")),(0,r.kt)("p",null,"It is best practice to use ",(0,r.kt)("inlineCode",{parentName:"p"},"security invoker")," (which is also the default). If you ever use ",(0,r.kt)("inlineCode",{parentName:"p"},"security definer"),", you ",(0,r.kt)("em",{parentName:"p"},"must")," set the ",(0,r.kt)("inlineCode",{parentName:"p"},"search_path"),".\nThis limits the potential damage if you allow access to schemas which the user executing the function should not have."),(0,r.kt)("h3",{id:"function-privileges"},"Function privileges"),(0,r.kt)("p",null,"By default, database functions can be executed by any role. You can restrict this by altering the default privileges and then choosing which roles can execute functions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER DEFAULT PRIVILEGES REVOKE EXECUTE ON FUNCTIONS FROM PUBLIC;\n\n-- Choose which roles can execute functions\nGRANT EXECUTE ON FUNCTION hello_world TO authenticated;\nGRANT EXECUTE ON FUNCTION hello_world TO service_role;\n")),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Official Client libraries: ",(0,r.kt)("a",{parentName:"li",href:"../../reference/javascript/rpc"},"JavaScript")," and ",(0,r.kt)("a",{parentName:"li",href:"../../reference/dart/rpc"},"Flutter")),(0,r.kt)("li",{parentName:"ul"},"Community client libraries: ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/supabase-community"},"github.com/supabase-community")),(0,r.kt)("li",{parentName:"ul"},"PostgreSQL Official Docs: ",(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/functions.html"},"Chapter 9. Functions and Operators")),(0,r.kt)("li",{parentName:"ul"},"PostgreSQL Reference: ",(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/9.1/sql-createfunction.html"},"CREATE FUNCTION"))),(0,r.kt)("h2",{id:"deep-dive"},"Deep Dive"),(0,r.kt)("h3",{id:"create-database-functions"},"Create Database Functions"),(0,r.kt)("div",{class:"video-container"},(0,r.kt)("iframe",{src:"https://www.youtube-nocookie.com/embed/MJZCCpCYEqk",frameBorder:"1",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0})),(0,r.kt)("h3",{id:"call-database-functions-using-javascript"},"Call Database Functions using JavaScript"),(0,r.kt)("div",{class:"video-container"},(0,r.kt)("iframe",{src:"https://www.youtube-nocookie.com/embed/I6nnp9AINJk",frameBorder:"1",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0})),(0,r.kt)("h3",{id:"using-database-functions-to-call-an-external-api"},"Using Database Functions to call an external API"),(0,r.kt)("div",{class:"video-container"},(0,r.kt)("iframe",{src:"https://www.youtube-nocookie.com/embed/rARgrELRCwY",frameBorder:"1",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0})))}m.isMDXComponent=!0}}]);