"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[37253],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(a),c=l,k=d["".concat(s,".").concat(c)]||d[c]||m[c]||r;return a?n.createElement(k,o(o({ref:t},p),{},{components:a})):n.createElement(k,o({ref:t},p))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,o=new Array(r);o[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:l,o[1]=i;for(var u=2;u<r;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294),l=a(86010);const r="tabItem_Ymn6";function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,o),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>c});var n=a(87462),l=a(67294),r=a(86010),o=a(72389),i=a(67392),s=a(7094),u=a(12466);const p="tabList__CuJ",d="tabItem_LNqP";function m(e){const{lazy:t,block:a,defaultValue:o,values:m,groupId:c,className:k}=e,h=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=m??h.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),g=(0,i.l)(b,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===o?o:o??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==N&&!b.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:v}=(0,s.U)(),[f,T]=(0,l.useState)(N),x=[],{blockElementScrollPositionUntilNextRender:w}=(0,u.o5)();if(null!=c){const e=y[c];null!=e&&e!==f&&b.some((t=>t.value===e))&&T(e)}const S=e=>{const t=e.currentTarget,a=x.indexOf(t),n=b[a].value;n!==f&&(w(t),T(n),null!=c&&v(c,String(n)))},L=e=>{let t=null;switch(e.key){case"Enter":S(e);break;case"ArrowRight":{const a=x.indexOf(e.currentTarget)+1;t=x[a]??x[0];break}case"ArrowLeft":{const a=x.indexOf(e.currentTarget)-1;t=x[a]??x[x.length-1];break}}t?.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",p)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},k)},b.map((e=>{let{value:t,label:a,attributes:o}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:f===t?0:-1,"aria-selected":f===t,key:t,ref:e=>x.push(e),onKeyDown:L,onClick:S},o,{className:(0,r.Z)("tabs__item",d,o?.className,{"tabs__item--active":f===t})}),a??t)}))),t?(0,l.cloneElement)(h.filter((e=>e.props.value===f))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==f})))))}function c(e){const t=(0,o.Z)();return l.createElement(m,(0,n.Z)({key:String(t)},e))}},35596:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var n=a(87462),l=(a(67294),a(3905)),r=a(65488),o=a(85162);const i={id:"full-text-search",title:"Full Text Search",description:"How to use full text search in PostgreSQL."},s=void 0,u={unversionedId:"guides/database/full-text-search",id:"guides/database/full-text-search",title:"Full Text Search",description:"How to use full text search in PostgreSQL.",source:"@site/docs/guides/database/full-text-search.mdx",sourceDirName:"guides/database",slug:"/guides/database/full-text-search",permalink:"/docs/guides/database/full-text-search",draft:!1,editUrl:"https://github.com/docs/guides/database/full-text-search.mdx",tags:[],version:"current",frontMatter:{id:"full-text-search",title:"Full Text Search",description:"How to use full text search in PostgreSQL."}},p={},d=[{value:"Preparation",id:"preparation",level:2},{value:"Usage",id:"usage",level:2},{value:"<code>to_tsvector()</code>",id:"to_tsvector",level:3},{value:"<code>to_tsquery()</code>",id:"to_tsquery",level:3},{value:"Match: <code>@@</code>",id:"match-",level:3},{value:"Basic Full Text Queries",id:"basic-full-text-queries",level:2},{value:"Search a single column",id:"search-a-single-column",level:3},{value:"Search multiple columns",id:"search-multiple-columns",level:3},{value:"Match all search words",id:"match-all-search-words",level:3},{value:"Match any search words",id:"match-any-search-words",level:3},{value:"Creating Indexes",id:"creating-indexes",level:2},{value:"Searchable columns",id:"searchable-columns",level:3},{value:"Search using the new column",id:"search-using-the-new-column",level:3},{value:"Query Operators",id:"query-operators",level:2},{value:"Proximity: <code>&lt;-&gt;</code>",id:"proximity--",level:3},{value:"Negation: <code>!</code>",id:"negation-",level:3},{value:"Resources",id:"resources",level:2}],m={toc:d};function c(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Postgres has built-in functions to handle ",(0,l.kt)("inlineCode",{parentName:"p"},"Full Text Search"),' queries. This is like a "search engine" within Postgres.'),(0,l.kt)("h2",{id:"preparation"},"Preparation"),(0,l.kt)("p",null,"For this guide we'll use the following example data:"),(0,l.kt)(r.Z,{defaultValue:"Data",values:[{label:"Data",value:"Data"},{label:"SQL",value:"SQL"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"SQL",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create table books (\n  id serial primary key,\n  title text,\n  author text,\n  description text\n);\n\ninsert into books (title, author, description)\nvalues\n  ('The Poky Little Puppy','Janette Sebring Lowrey','Puppy is slower than other, bigger animals.'),\n  ('The Tale of Peter Rabbit','Beatrix Potter','Rabbit eats some vegetables.'),\n  ('Tootle','Gertrude Crampton','Little toy train has big dreams.'),\n  ('Green Eggs and Ham','Dr. Seuss','Sam has changing food preferences and eats unusually colored food.'),\n  ('Harry Potter and the Goblet of Fire','J.K. Rowling','Fourth year of school starts, big drama ensues.');\n"))),(0,l.kt)(o.Z,{value:"Data",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"title"),(0,l.kt)("th",{parentName:"tr",align:null},"author"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"The Poky Little Puppy"),(0,l.kt)("td",{parentName:"tr",align:null},"Janette Sebring Lowrey"),(0,l.kt)("td",{parentName:"tr",align:null},"Puppy is slower than other, bigger animals.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"The Tale of Peter Rabbit"),(0,l.kt)("td",{parentName:"tr",align:null},"Beatrix Potter"),(0,l.kt)("td",{parentName:"tr",align:null},"Rabbit eats some vegetables.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Tootle"),(0,l.kt)("td",{parentName:"tr",align:null},"Gertrude Crampton"),(0,l.kt)("td",{parentName:"tr",align:null},"Little toy train has big dreams.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"Green Eggs and Ham"),(0,l.kt)("td",{parentName:"tr",align:null},"Dr. Seuss"),(0,l.kt)("td",{parentName:"tr",align:null},"Sam has changing food preferences and eats unusually colored food.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"5"),(0,l.kt)("td",{parentName:"tr",align:null},"Harry Potter and the Goblet of Fire"),(0,l.kt)("td",{parentName:"tr",align:null},"J.K. Rowling"),(0,l.kt)("td",{parentName:"tr",align:null},"Fourth year of school starts, big drama ensues.")))))),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("p",null,"The functions we'll cover in this guide are:"),(0,l.kt)("h3",{id:"to_tsvector"},(0,l.kt)("inlineCode",{parentName:"h3"},"to_tsvector()")),(0,l.kt)("p",null,'Converts your data into searchable "tokens". ',(0,l.kt)("inlineCode",{parentName:"p"},"to_tsvector()"),' stands for "to text search vector". For example:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select to_tsvector('green eggs and ham')\n\n-- Returns 'egg':2 'green':1 'ham':4\n")),(0,l.kt)("p",null,'Collectively these tokens are called a "document" which Postgres can use for comparisons.'),(0,l.kt)("h3",{id:"to_tsquery"},(0,l.kt)("inlineCode",{parentName:"h3"},"to_tsquery()")),(0,l.kt)("p",null,'Converts a query string into "tokens" to match. ',(0,l.kt)("inlineCode",{parentName:"p"},"to_tsquery()"),' stands for "to text search query".'),(0,l.kt)("p",null,'This conversion step is important because we will want to "fuzzy match" on keywords.\nFor example if a user searches for "eggs", and a column has the value "egg", we probably still want to return a match.'),(0,l.kt)("h3",{id:"match-"},"Match: ",(0,l.kt)("inlineCode",{parentName:"h3"},"@@")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"@@"),' symbol is the "match" symbol for Full Text Search. It returns any matches between a ',(0,l.kt)("inlineCode",{parentName:"p"},"to_tsvector")," result and a ",(0,l.kt)("inlineCode",{parentName:"p"},"to_tsquery")," result."),(0,l.kt)("p",null,"Take the following example:"),(0,l.kt)(r.Z,{defaultValue:"SQL",values:[{label:"SQL",value:"SQL"},{label:"JavaScript",value:"JS"},{label:"Dart",value:"DART"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"SQL",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select *\nfrom books\nwhere title = 'Harry';\n"))),(0,l.kt)(o.Z,{value:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { data, error } = await supabase\n  .from('books')\n  .select()\n  .eq('title', 'Harry')\n"))),(0,l.kt)(o.Z,{value:"DART",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final result = await client\n  .from('books')\n  .select()\n  .eq('title', 'Harry')\n  .execute();\n")))),(0,l.kt)("p",null,"The equality symbol above (",(0,l.kt)("inlineCode",{parentName:"p"},"="),') is very "strict" on what it matches. In a full text search context, we might want to find all "Harry Potter" books and so we can rewrite the\nexample above:'),(0,l.kt)(r.Z,{defaultValue:"SQL",values:[{label:"SQL",value:"SQL"},{label:"JavaScript",value:"JS"},{label:"Dart",value:"DART"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"SQL",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select *\nfrom books\nwhere to_tsvector(title) @@ to_tsquery('Harry');\n"))),(0,l.kt)(o.Z,{value:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { data, error } = await supabase\n  .from('books')\n  .select()\n  .textSearch('title', `'Harry'`)\n"))),(0,l.kt)(o.Z,{value:"DART",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final result = await client\n  .from('books')\n  .select()\n  .textSearch('title', \"'Harry'\")\n  .execute();\n")))),(0,l.kt)("h2",{id:"basic-full-text-queries"},"Basic Full Text Queries"),(0,l.kt)("h3",{id:"search-a-single-column"},"Search a single column"),(0,l.kt)("p",null,"To find all ",(0,l.kt)("inlineCode",{parentName:"p"},"books")," where the ",(0,l.kt)("inlineCode",{parentName:"p"},"description")," contain the word ",(0,l.kt)("inlineCode",{parentName:"p"},"big"),":"),(0,l.kt)(r.Z,{defaultValue:"SQL",values:[{label:"SQL",value:"SQL"},{label:"JavaScript",value:"JS"},{label:"Dart",value:"DART"},{label:"Data",value:"Data"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"SQL",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n  *\nfrom\n  books\nwhere\n  to_tsvector(description)\n  @@ to_tsquery('big');\n"))),(0,l.kt)(o.Z,{value:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { data, error } = await supabase\n  .from('books')\n  .select()\n  .textSearch('description', `'big'`)\n"))),(0,l.kt)(o.Z,{value:"DART",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final result = await client\n  .from('books')\n  .select()\n  .textSearch('description', \"'big'\")\n  .execute();\n"))),(0,l.kt)(o.Z,{value:"Data",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"title"),(0,l.kt)("th",{parentName:"tr",align:null},"author"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Tootle"),(0,l.kt)("td",{parentName:"tr",align:null},"Gertrude Crampton"),(0,l.kt)("td",{parentName:"tr",align:null},"Little toy train has big dreams.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"5"),(0,l.kt)("td",{parentName:"tr",align:null},"Harry Potter and the Goblet of Fire"),(0,l.kt)("td",{parentName:"tr",align:null},"J.K. Rowling"),(0,l.kt)("td",{parentName:"tr",align:null},"Fourth year of school starts, big drama ensues.")))))),(0,l.kt)("h3",{id:"search-multiple-columns"},"Search multiple columns"),(0,l.kt)("p",null,"To find all ",(0,l.kt)("inlineCode",{parentName:"p"},"books")," where ",(0,l.kt)("inlineCode",{parentName:"p"},"description")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"title")," contain the word ",(0,l.kt)("inlineCode",{parentName:"p"},"little"),":"),(0,l.kt)(r.Z,{defaultValue:"SQL",values:[{label:"SQL",value:"SQL"},{label:"Data",value:"Data"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"SQL",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n  *\nfrom\n  books\nwhere\n  to_tsvector(description || ' ' || title) -- concat columns, but be sure to include a space to separate them!\n  @@ to_tsquery('little');\n"))),(0,l.kt)(o.Z,{value:"Data",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"title"),(0,l.kt)("th",{parentName:"tr",align:null},"author"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"The Poky Little Puppy"),(0,l.kt)("td",{parentName:"tr",align:null},"Janette Sebring Lowrey"),(0,l.kt)("td",{parentName:"tr",align:null},"Puppy is slower than other, bigger animals.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Tootle"),(0,l.kt)("td",{parentName:"tr",align:null},"Gertrude Crampton"),(0,l.kt)("td",{parentName:"tr",align:null},"Little toy train has big dreams.")))))),(0,l.kt)("h3",{id:"match-all-search-words"},"Match all search words"),(0,l.kt)("p",null,"To find all ",(0,l.kt)("inlineCode",{parentName:"p"},"books")," where ",(0,l.kt)("inlineCode",{parentName:"p"},"description")," contains BOTH of the words ",(0,l.kt)("inlineCode",{parentName:"p"},"little")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"big"),", we can use the ",(0,l.kt)("inlineCode",{parentName:"p"},"&")," symbol:"),(0,l.kt)(r.Z,{defaultValue:"SQL",values:[{label:"SQL",value:"SQL"},{label:"JavaScript",value:"JS"},{label:"Dart",value:"DART"},{label:"Data",value:"Data"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"SQL",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n  *\nfrom\n  books\nwhere\n  to_tsvector(description)\n  @@ to_tsquery('little & big'); -- use & for AND in the search query\n"))),(0,l.kt)(o.Z,{value:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { data, error } = await supabase\n  .from('books')\n  .select()\n  .textSearch('description', `'little' & 'big'`)\n"))),(0,l.kt)(o.Z,{value:"DART",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final result = await client\n  .from('books')\n  .select()\n  .textSearch('description', \"'little' & 'big'\")\n  .execute();\n"))),(0,l.kt)(o.Z,{value:"Data",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"title"),(0,l.kt)("th",{parentName:"tr",align:null},"author"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Tootle"),(0,l.kt)("td",{parentName:"tr",align:null},"Gertrude Crampton"),(0,l.kt)("td",{parentName:"tr",align:null},"Little toy train has big dreams.")))))),(0,l.kt)("h3",{id:"match-any-search-words"},"Match any search words"),(0,l.kt)("p",null,"To find all ",(0,l.kt)("inlineCode",{parentName:"p"},"books")," where ",(0,l.kt)("inlineCode",{parentName:"p"},"description")," contain ANY of the words ",(0,l.kt)("inlineCode",{parentName:"p"},"little")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"big"),", use the ",(0,l.kt)("inlineCode",{parentName:"p"},"|")," symbol:"),(0,l.kt)(r.Z,{defaultValue:"SQL",values:[{label:"SQL",value:"SQL"},{label:"JavaScript",value:"JS"},{label:"Dart",value:"DART"},{label:"Data",value:"Data"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"SQL",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n  *\nfrom\n  books\nwhere\n  to_tsvector(description)\n  @@ to_tsquery('little | big'); -- use | for OR in the search query\n"))),(0,l.kt)(o.Z,{value:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { data, error } = await supabase\n  .from('books')\n  .select()\n  .textSearch('description', `'little' | 'big'`)\n"))),(0,l.kt)(o.Z,{value:"DART",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final result = await client\n  .from('books')\n  .select()\n  .textSearch('description', \"'little' | 'big'\")\n  .execute();\n"))),(0,l.kt)(o.Z,{value:"Data",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"title"),(0,l.kt)("th",{parentName:"tr",align:null},"author"),(0,l.kt)("th",{parentName:"tr",align:null},"description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"The Poky Little Puppy"),(0,l.kt)("td",{parentName:"tr",align:null},"Janette Sebring Lowrey"),(0,l.kt)("td",{parentName:"tr",align:null},"Puppy is slower than other, bigger animals.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Tootle"),(0,l.kt)("td",{parentName:"tr",align:null},"Gertrude Crampton"),(0,l.kt)("td",{parentName:"tr",align:null},"Little toy train has big dreams.")))))),(0,l.kt)("p",null,"Notice how searching for ",(0,l.kt)("inlineCode",{parentName:"p"},"big")," includes results with the word ",(0,l.kt)("inlineCode",{parentName:"p"},"bigger")," (or ",(0,l.kt)("inlineCode",{parentName:"p"},"biggest"),", etc)."),(0,l.kt)("h2",{id:"creating-indexes"},"Creating Indexes"),(0,l.kt)("p",null,"Now that we have Full Text Search working, let's create an ",(0,l.kt)("inlineCode",{parentName:"p"},"index"),'. This will allow Postgres to "build" the documents pre-emptively so that they\ndon\'t need to be created at the time we execute the query. This will make our queries much faster.'),(0,l.kt)("h3",{id:"searchable-columns"},"Searchable columns"),(0,l.kt)("p",null,"Let's create a new column ",(0,l.kt)("inlineCode",{parentName:"p"},"fts")," inside the ",(0,l.kt)("inlineCode",{parentName:"p"},"books")," table to store the searchable index of the ",(0,l.kt)("inlineCode",{parentName:"p"},"title")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"description")," columns."),(0,l.kt)("p",null,"We can use a special feature of Postgres called\n",(0,l.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/ddl-generated-columns.html"},"Generated Columns"),"\nto ensure that the index is updated any time the values in the ",(0,l.kt)("inlineCode",{parentName:"p"},"title")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"description")," columns change."),(0,l.kt)(r.Z,{defaultValue:"SQL",values:[{label:"SQL",value:"SQL"},{label:"Data",value:"Data"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"SQL",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"alter table\n  books\nadd column\n  fts tsvector generated always as (to_tsvector('english', description || ' ' || title)) stored;\n\ncreate index books_fts on books using gin (fts); -- generate the index\n\nselect id, fts\nfrom books;\n"))),(0,l.kt)(o.Z,{value:"Data",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"fts"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"'anim':7 'bigger':6 'littl':10 'poki':9 'puppi':1,11 'slower':3")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"'eat':2 'peter':8 'rabbit':1,9 'tale':6 'veget':4")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"'big':5 'dream':6 'littl':1 'tootl':7 'toy':2 'train':3")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"'chang':3 'color':9 'eat':7 'egg':12 'food':4,10 'green':11 'ham':14 'prefer':5 'sam':1 'unus':8")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"5"),(0,l.kt)("td",{parentName:"tr",align:null},"'big':6 'drama':7 'ensu':8 'fire':15 'fourth':1 'goblet':13 'harri':9 'potter':10 'school':4 'start':5 'year':2")))))),(0,l.kt)("h3",{id:"search-using-the-new-column"},"Search using the new column"),(0,l.kt)("p",null,"Now that we've created and populated our index, we can search it using the same techniques as before:"),(0,l.kt)(r.Z,{defaultValue:"SQL",values:[{label:"SQL",value:"SQL"},{label:"JavaScript",value:"JS"},{label:"Dart",value:"DART"},{label:"Data",value:"Data"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"SQL",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n  *\nfrom\n  books\nwhere\n  fts @@ to_tsquery('little & big');\n"))),(0,l.kt)(o.Z,{value:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { data, error } = await supabase\n  .from('books')\n  .select()\n  .textSearch('fts', `'little' & 'big'`)\n"))),(0,l.kt)(o.Z,{value:"DART",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final result = await client\n  .from('books')\n  .select()\n  .textSearch('fts', \"'little' & 'big'\")\n  .execute();\n"))),(0,l.kt)(o.Z,{value:"Data",mdxType:"TabItem"},(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"title"),(0,l.kt)("th",{parentName:"tr",align:null},"author"),(0,l.kt)("th",{parentName:"tr",align:null},"description"),(0,l.kt)("th",{parentName:"tr",align:null},"fts"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Tootle"),(0,l.kt)("td",{parentName:"tr",align:null},"Gertrude Crampton"),(0,l.kt)("td",{parentName:"tr",align:null},"Little toy train has big dreams."),(0,l.kt)("td",{parentName:"tr",align:null},"'big':5 'dream':6 'littl':1 'tootl':7 'toy':2 'train':3")))))),(0,l.kt)("h2",{id:"query-operators"},"Query Operators"),(0,l.kt)("p",null,"Visit ",(0,l.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/functions-textsearch.html"},"PostgreSQL: Text Search Functions and Operators"),"\nto learn about additional query operators you can use to do more advanced ",(0,l.kt)("inlineCode",{parentName:"p"},"full text queries"),", such as:"),(0,l.kt)("h3",{id:"proximity--"},"Proximity: ",(0,l.kt)("inlineCode",{parentName:"h3"},"<->")),(0,l.kt)("p",null,'The proximity symbol is useful for searching for terms that are a certain "distance" apart.\nFor example, to find the phrase ',(0,l.kt)("inlineCode",{parentName:"p"},"big dreams"),', where the a match for "big" is followed immediately by a match for "dreams":'),(0,l.kt)(r.Z,{defaultValue:"SQL",values:[{label:"SQL",value:"SQL"},{label:"JavaScript",value:"JS"},{label:"Dart",value:"DART"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"SQL",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n  *\nfrom\n  books\nwhere\n  to_tsvector(description) @@ to_tsquery('big <-> dreams');\n"))),(0,l.kt)(o.Z,{value:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { data, error } = await supabase\n  .from('books')\n  .select()\n  .textSearch('description', `'big' <-> 'dreams'`)\n"))),(0,l.kt)(o.Z,{value:"DART",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final result = await client\n  .from('books')\n  .select()\n  .textSearch('description', \"'big' <-> 'dreams'\")\n  .execute();\n")))),(0,l.kt)("p",null,"We can also use the ",(0,l.kt)("inlineCode",{parentName:"p"},"<->")," to find words within a certain distance of eachother. For example to find ",(0,l.kt)("inlineCode",{parentName:"p"},"year")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"school")," within 2 words of each other:"),(0,l.kt)(r.Z,{defaultValue:"SQL",values:[{label:"SQL",value:"SQL"},{label:"JavaScript",value:"JS"},{label:"Dart",value:"DART"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"SQL",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n  *\nfrom\n  books\nwhere\n  to_tsvector(description) @@ to_tsquery('year <2> school');\n"))),(0,l.kt)(o.Z,{value:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { data, error } = await supabase\n  .from('books')\n  .select()\n  .textSearch('description', `'year' <2> 'school'`)\n"))),(0,l.kt)(o.Z,{value:"DART",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final result = await client\n  .from('books')\n  .select()\n  .textSearch('description', \"'year' <2> 'school'\")\n  .execute();\n")))),(0,l.kt)("h3",{id:"negation-"},"Negation: ",(0,l.kt)("inlineCode",{parentName:"h3"},"!")),(0,l.kt)("p",null,"The negation symbol can be used to find phrases which ",(0,l.kt)("em",{parentName:"p"},"don't")," contain a search term.\nFor example, to find records that have the word ",(0,l.kt)("inlineCode",{parentName:"p"},"big")," but not ",(0,l.kt)("inlineCode",{parentName:"p"},"little"),":"),(0,l.kt)(r.Z,{defaultValue:"SQL",values:[{label:"SQL",value:"SQL"},{label:"JavaScript",value:"JS"},{label:"Dart",value:"DART"}],mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"SQL",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n  *\nfrom\n  books\nwhere\n  to_tsvector(description) @@ to_tsquery('big & !little');\n"))),(0,l.kt)(o.Z,{value:"JS",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"const { data, error } = await supabase\n  .from('books')\n  .select()\n  .textSearch('description', `'big' & !'little'`)\n"))),(0,l.kt)(o.Z,{value:"DART",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final result = await client\n  .from('books')\n  .select()\n  .textSearch('description', \"'big' & !'little'\")\n  .execute();\n")))),(0,l.kt)("h2",{id:"resources"},"Resources"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/12/functions-textsearch.html"},"PostgreSQL: Text Search Functions and Operators"))))}c.isMDXComponent=!0}}]);