(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[73046],{34652:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var a=n(87462),r=(n(67294),n(3905)),o=n(30828);const i={id:"auth-mfa",title:"Multi-Factor Authentication",description:"Add an additional layer of security to your apps with Supabase Auth multi-factor authentication."},l=void 0,s={unversionedId:"guides/auth/auth-mfa",id:"guides/auth/auth-mfa",title:"Multi-Factor Authentication",description:"Add an additional layer of security to your apps with Supabase Auth multi-factor authentication.",source:"@site/docs/guides/auth/auth-mfa.mdx",sourceDirName:"guides/auth",slug:"/guides/auth/auth-mfa",permalink:"/docs/guides/auth/auth-mfa",draft:!1,editUrl:"https://github.com/docs/guides/auth/auth-mfa.mdx",tags:[],version:"current",frontMatter:{id:"auth-mfa",title:"Multi-Factor Authentication",description:"Add an additional layer of security to your apps with Supabase Auth multi-factor authentication."}},c={},u=[{value:"Overview",id:"overview",level:2},{value:"Adding to your app",id:"adding-to-your-app",level:2},{value:"Add enrollment flow",id:"add-enrollment-flow",level:3},{value:"Example: React",id:"example-react",level:4},{value:"Add challenge step to login",id:"add-challenge-step-to-login",level:3},{value:"Example: React",id:"example-react-1",level:4},{value:"Enforce rules for MFA logins",id:"enforce-rules-for-mfa-logins",level:3},{value:"Database",id:"database",level:4},{value:"Enforce for all users (new and existing)",id:"enforce-for-all-users-new-and-existing",level:5},{value:"Enforce for new users only",id:"enforce-for-new-users-only",level:5},{value:"Enforce only for users that have opted-in",id:"enforce-only-for-users-that-have-opted-in",level:5},{value:"Server-Side Rendering",id:"server-side-rendering",level:3},{value:"APIs",id:"apis",level:3},{value:"Frequently asked questions",id:"frequently-asked-questions",level:2},{value:"Why is there a challenge and verify API when challenge does not do much?",id:"why-is-there-a-challenge-and-verify-api-when-challenge-does-not-do-much",level:3},{value:"What&#39;s inside the QR code?",id:"whats-inside-the-qr-code",level:3},{value:"How do I check <em>when</em> a user went through MFA?",id:"how-do-i-check-when-a-user-went-through-mfa",level:3}],h={toc:u};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Multi-Factor Authentication is in early access preview only. Although we\nbelieve it is production ready, APIs and some behavior may change based on\nfeedback we receive in the preview period.")),(0,r.kt)("p",null,"Multi-factor authentication (MFA), sometimes called two-factor\nauthentication (2FA), adds an additional layer of security to your\napplication by verifying their identity through\nadditional verification steps."),(0,r.kt)("p",null,"It is considered a best practice to use MFA for your applications."),(0,r.kt)("p",null,"Users with weak passwords or compromised social login accounts are\nprone to malicious account takeovers. These can be prevented with\nMFA because they require the user to provide proof of\nboth of these:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Something they know.",(0,r.kt)("br",{parentName:"li"}),"Password, or access to a social-login account."),(0,r.kt)("li",{parentName:"ul"},"Something they have.",(0,r.kt)("br",{parentName:"li"}),"Access to an authenticator app (a.k.a. TOTP), mobile phone or recovery code.")),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"Supabase Auth implements only Time-based One Time Factor(TOTP) multi-factor authentication. This type of\nmulti-factor authentication uses a timed one-time password generated from an\nauthenticator app in the control of users."),(0,r.kt)("p",null,"Applications using MFA require two important flows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Enrollment flow."),(0,r.kt)("br",{parentName:"li"}),"This lets users set up and control MFA in your app."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Authentication flow."),(0,r.kt)("br",{parentName:"li"}),"This lets users sign in using any factors after the conventional login step.")),(0,r.kt)("p",null,"Supabase Auth provides:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Enrollment API")," - build rich user interfaces for adding and removing factors."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Challenge and Verify APIs")," - securely verify that the user has access to a factor."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"List Factors API")," - build rich user interfaces for signing in with additional factors.")),(0,r.kt)("p",null,"Below is a flow chart illustrating how these APIs work together to enable MFA\nfeatures in your app."),(0,r.kt)(o.G,{chart:"\ngraph TD;\n  InitS((Setup flow)) --\x3e SAAL1[/Session is AAL1/] --\x3e Enroll[Enroll API] --\x3e ShowQR[Show QR code] --\x3e Scan([User: Scan QR code in authenticator]) --\x3e Enter([User: Enter code]) --\x3e Verify[Challenge + Verify API] --\x3e Check{{Is code correct?}}\n  Check --\x3e|Yes| AAL2[/Upgrade to AAL2/] --\x3e Done((Done))\n  Check --\x3e|No| Enter\n  InitA((Login flow)) --\x3e SignIn([User: Sign-in]) --\x3e AAL1[/Upgrade to AAL1/] --\x3e ListFactors[List Factors API]\n  ListFactors --\x3e|1 or more factors| OpenAuth([User: Open authenticator]) --\x3e Enter\n  ListFactors --\x3e|0 factors| Setup[[Setup flow]]\n",mdxType:"Mermaid"}),(0,r.kt)("p",null,"These sets of APIs let you control the MFA experience that works for you. You\ncan create flows where MFA is optional, mandatory for all or only specific\ngroups of users."),(0,r.kt)("p",null,"Once users have enrolled or signed-in with a factor, Supabase Auth adds\nadditional metadata to the user's access token (JWT) that your application can\nuse to allow or deny access."),(0,r.kt)("p",null,"This information is represented by an ",(0,r.kt)("a",{parentName:"p",href:"https://pages.nist.gov/800-63-3-Implementation-Resources/63B/AAL/"},"Authenticator Assurance\nLevel"),", a\nstandard measure about the assurance Supabase Auth has of the user's identity\nfor that particular session. There are two levels recognized today:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Assurance Level 1: ",(0,r.kt)("inlineCode",{parentName:"strong"},"aal1")),(0,r.kt)("br",{parentName:"li"}),"Means that the user's identity was verified using a conventional login method\nsuch as email+password, magic link, one-time password, phone auth or social\nlogin."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Assurance Level 2: ",(0,r.kt)("inlineCode",{parentName:"strong"},"aal2")),(0,r.kt)("br",{parentName:"li"}),"Means that the user's identity was additionally verified using at least one\nsecond factor, such as a TOTP code.")),(0,r.kt)("p",null,"This assurance level is encoded in the ",(0,r.kt)("inlineCode",{parentName:"p"},"aal")," claim in the JWT associated with\nthe user. By decoding this value you can create custom authorization rules in\nyour frontend, backend and database that will enforce the MFA policy that works\nfor your application. JWTs without an ",(0,r.kt)("inlineCode",{parentName:"p"},"aal")," claim are at the ",(0,r.kt)("inlineCode",{parentName:"p"},"aal1")," level."),(0,r.kt)("h2",{id:"adding-to-your-app"},"Adding to your app"),(0,r.kt)("p",null,"Adding MFA to your app involves these three steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Add enrollment flow."),(0,r.kt)("br",{parentName:"li"}),"You need to provide a UI within your app that your users will be able to set-up\nMFA in. You can add this right after sign-up, or as part of a separate flow in\nthe settings portion of your app."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Add challenge step to login."),(0,r.kt)("br",{parentName:"li"}),"If a user has set-up MFA, your app's login flow needs to present a challenge\nscreen to the user asking them to prove they have access to the additional\nfactor."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Enforce rules for MFA logins."),(0,r.kt)("br",{parentName:"li"}),"Once your users have a way to enroll and log in with MFA, you need to enforce\nauthorization rules across your app: on the frontend, backend, API servers or\nRow-Level Security policies.")),(0,r.kt)("h3",{id:"add-enrollment-flow"},"Add enrollment flow"),(0,r.kt)("p",null,"An enrollment flow provides a UI for users to set up additional authentication factors.\nMost applications add the enrollment flow in two places within their app:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Right after login or sign up.",(0,r.kt)("br",{parentName:"li"}),"This lets users quickly set up MFA immediately after they log in or create an\naccount. We recommend encouraging all users to set up MFA if that makes sense\nfor your application. Many applications offer this as an opt-in step in an\neffort to reduce onboarding friction."),(0,r.kt)("li",{parentName:"ol"},"From within a settings page.",(0,r.kt)("br",{parentName:"li"}),"Allows users to set up, disable or modify their MFA settings.")),(0,r.kt)("p",null,"We recommend building one generic flow that you can reuse in both cases with\nminor modifications."),(0,r.kt)("p",null,"Enrolling a factor for use with MFA takes three steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Call ",(0,r.kt)("inlineCode",{parentName:"li"},"supabase.auth.mfa.enroll()"),".",(0,r.kt)("br",{parentName:"li"}),"This method returns a QR code and a secret. Display the QR\ncode to the user and ask them to scan it with their authenticator application.\nIf they are unable to scan the QR code, show the secret in plain text which\nthey can type or paste into their authenticator app."),(0,r.kt)("li",{parentName:"ol"},"Calling the ",(0,r.kt)("inlineCode",{parentName:"li"},"supabase.auth.mfa.challenge()")," API.",(0,r.kt)("br",{parentName:"li"}),"This prepares Supabase Auth to accept a verification code from the user\nand returns a challenge ID."),(0,r.kt)("li",{parentName:"ol"},"Calling the ",(0,r.kt)("inlineCode",{parentName:"li"},"supabase.auth.mfa.verify()")," API.",(0,r.kt)("br",{parentName:"li"}),"This verifies that the user has indeed added the secret from step (1) into\ntheir app and is working correctly. If the verification succeeds, the factor\nimmediately becomes active for the user account. If not, you should repeat\nsteps 2 and 3.")),(0,r.kt)("h4",{id:"example-react"},"Example: React"),(0,r.kt)("p",null,"Below is an example that creates a new ",(0,r.kt)("inlineCode",{parentName:"p"},"EnrollMFA")," component that illustrates\nthe important pieces of the MFA enrollment flow."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the component appears on screen, the ",(0,r.kt)("inlineCode",{parentName:"li"},"supabase.auth.mfa.enroll()")," API is\ncalled once to start the process of enrolling a new factor for the current\nuser."),(0,r.kt)("li",{parentName:"ul"},"This API returns a QR code in the SVG format, which is shown on screen using\na normal ",(0,r.kt)("inlineCode",{parentName:"li"},"<img>")," tag by encoding the SVG as a data URL."),(0,r.kt)("li",{parentName:"ul"},"Once the user has scanned the QR code with their authenticator app, they\nshould enter the verification code within the ",(0,r.kt)("inlineCode",{parentName:"li"},"verifyCode")," input field and\nclick on ",(0,r.kt)("inlineCode",{parentName:"li"},"Enable"),". "),(0,r.kt)("li",{parentName:"ul"},"A challenge is created using the ",(0,r.kt)("inlineCode",{parentName:"li"},"supabase.auth.mfa.challenge()")," API and the\ncode from the user is submitted for verification using the\n",(0,r.kt)("inlineCode",{parentName:"li"},"supabase.auth.mfa.verify()")," challenge."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onEnabled")," is a callback that notifies the other components that enrollment\nhas completed."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onCancelled")," is a callback that notifies the other components that the user\nhas clicked the ",(0,r.kt)("inlineCode",{parentName:"li"},"Cancel")," button.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'/**\n * EnrollMFA shows a simple enrollment dialog. When shown on screen it calls\n * the `enroll` API. Each time a user clicks the Enable button it calls the\n * `challenge` and `verify` APIs to check if the code provided by the user is\n * valid.\n * When enrollment is successful, it calls `onEnrolled`. When the user clicks\n * Cancel the `onCancelled` callback is called.\n */\nexport function EnrollMFA({\n  onEnrolled,\n  onCancelled,\n}: {\n  onEnrolled: () => void;\n  onCancelled: () => void;\n}) {\n  const [factorId, setFactorId] = useState("");\n  const [qr, setQR] = useState(""); // holds the QR code image SVG\n  const [verifyCode, setVerifyCode] = useState(""); // contains the code entered by the user\n  const [error, setError] = useState(""); // holds an error message\n\n  const onEnableClicked = () => {\n    setError("");\n\n    (async () => {\n      const challenge = await supabase.auth.mfa.challenge({ factorId });\n      if (challenge.error) {\n        setError(challenge.error.message);\n        throw challenge.error;\n      }\n\n      const challengeId = challenge.data.id;\n\n      const verify = await supabase.auth.mfa.verify({\n        factorId,\n        challengeId,\n        code: verifyCode,\n      });\n      if (verify.error) {\n        setError(verify.error.message);\n        throw verify.error;\n      }\n\n      onEnrolled();\n    })();\n  };\n\n  useEffect(() => {\n    (async () => {\n      const { data, error } = await supabase.auth.mfa.enroll({\n        factorType: "totp",\n      });\n      if (error) {\n        throw error;\n      }\n\n      setFactorId(data.id);\n\n      // Supabase Auth returns an SVG QR code which you can convert into a data\n      // URL that you can place in an <img> tag.\n      setQR(data.totp.qr_code);\n    })();\n  }, []);\n\n  return (\n    <>\n      {error && <div className="error">{error}</div>}\n      <img src={qr} />\n      <input\n        type="text"\n        value={verifyCode}\n        onChange={(e) => setVerifyCode(e.target.value.trim())}\n      />\n      <input type="button" value="Enable" onClick={onEnableClicked} />\n      <input type="button" value="Cancel" onClick={onCancelled} />\n    </>\n  );\n}\n')),(0,r.kt)("h3",{id:"add-challenge-step-to-login"},"Add challenge step to login"),(0,r.kt)("p",null,"Once a user has logged in via their first factor (email+password, magic link,\none time password, social login...) you need to perform a check if any\nadditional factors need to be verified."),(0,r.kt)("p",null,"This can be done by using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"supabase.auth.mfa.getAuthenticatorAssuranceLevel()")," API. When the user signs\nin and is redirected back to your app, you should call this method to extract\nthe user's current and next authenticator assurance level (AAL)."),(0,r.kt)("p",null,"Therefore if you receive a ",(0,r.kt)("inlineCode",{parentName:"p"},"currentLevel")," which is ",(0,r.kt)("inlineCode",{parentName:"p"},"aal1")," but a ",(0,r.kt)("inlineCode",{parentName:"p"},"nextLevel"),"\nof ",(0,r.kt)("inlineCode",{parentName:"p"},"aal2"),", the user should be given the option to go through MFA. "),(0,r.kt)("p",null,"Below is a table that explains the combined meaning."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"right"},"Current Level"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Next Level"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Meaning"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"aal1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"aal1")),(0,r.kt)("td",{parentName:"tr",align:"left"},"User does not have MFA enrolled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"aal1")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"aal2")),(0,r.kt)("td",{parentName:"tr",align:"left"},"User has an MFA factor enrolled but has not verified it.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"aal2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"aal2")),(0,r.kt)("td",{parentName:"tr",align:"left"},"User has verified their MFA factor.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"right"},(0,r.kt)("inlineCode",{parentName:"td"},"aal2")),(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"aal1")),(0,r.kt)("td",{parentName:"tr",align:"left"},"User has disabled their MFA factor. (Stale JWT.)")))),(0,r.kt)("h4",{id:"example-react-1"},"Example: React"),(0,r.kt)("p",null,"Adding the challenge step to login depends heavily on the architecture of your\napp. However, a fairly common way to structure React apps is to have a large\ncomponent (often named ",(0,r.kt)("inlineCode",{parentName:"p"},"App"),") which contains most of the authenticated\napplication logic."),(0,r.kt)("p",null,"This example will wrap this component with logic that will show an MFA\nchallenge screen if necessary, before showing the full application. This is\nillustrated in the ",(0,r.kt)("inlineCode",{parentName:"p"},"AppWithMFA")," example below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'function AppWithMFA() {\n  const [readyToShow, setReadyToShow] = useState(false);\n  const [showMFAScreen, setShowMFAScreen] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const { data, error } =\n          await supabase.auth.mfa.getAuthenticatorAssuranceLevel();\n        if (error) {\n          throw error;\n        }\n\n        console.log(data);\n\n        if (data.nextLevel === "aal2" && data.nextLevel !== data.currentLevel) {\n          setShowMFAScreen(true);\n        }\n      } finally {\n        setReadyToShow(true);\n      }\n    })();\n  }, []);\n\n  if (readyToShow) {\n    if (showMFAScreen) {\n      return <AuthMFA />;\n    }\n\n    return <App />;\n  }\n\n  return <></>;\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"supabase.auth.mfa.getAuthenticatorAssuranceLevel()")," does return a promise.\nDon't worry, this is a very fast method (microseconds) as it rarely uses the\nnetwork."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"readyToShow")," only makes sure the AAL check completes before showing any\napplication UI to the user."),(0,r.kt)("li",{parentName:"ul"},"If the current level can be upgraded to the next one, the MFA screen is\nshown."),(0,r.kt)("li",{parentName:"ul"},"Once the challenge is successful, the ",(0,r.kt)("inlineCode",{parentName:"li"},"App")," component is finally rendered on\nscreen.")),(0,r.kt)("p",null,"Below is the component that implements the challenge and verify logic."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'function AuthMFA() {\n  const [verifyCode, setVerifyCode] = useState("");\n  const [error, setError] = useState("");\n\n  const onSubmitClicked = () => {\n    setError("");\n\n    (async () => {\n      const factors = await supabase.auth.mfa.listFactors();\n      if (factors.error) {\n        throw factors.error;\n      }\n\n      const totpFactor = factors.data.totp[0];\n\n      if (!totpFactor) {\n        throw new Error("No TOTP factors found!");\n      }\n\n      const factorId = totpFactor.id;\n\n      const challenge = await supabase.auth.mfa.challenge({ factorId });\n      if (challenge.error) {\n        setError(challenge.error.message);\n        throw challenge.error;\n      }\n\n      const challengeId = challenge.data.id;\n\n      const verify = await supabase.auth.mfa.verify({\n        factorId,\n        challengeId,\n        code: verifyCode,\n      });\n      if (verify.error) {\n        setError(verify.error.message);\n        throw verify.error;\n      }\n    })();\n  };\n\n  return (\n    <>\n      <div>Please enter the code from your authenticator app.</div>\n      {error && <div className="error">{error}</div>}\n      <input\n        type="text"\n        value={verifyCode}\n        onChange={(e) => setVerifyCode(e.target.value.trim())}\n      />\n      <input type="button" value="Submit" onClick={onSubmitClicked} />\n    </>\n  );\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can extract the available MFA factors for the user by calling\n",(0,r.kt)("inlineCode",{parentName:"li"},"supabase.auth.mfa.listFactors()"),". Don't worry this method is also very quick\nand rarely uses the network."),(0,r.kt)("li",{parentName:"ul"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"listFactors()")," returns more than one factor (or of a different type) you\nshould present the user with a choice. For simplicity this is not shown in\nthe example."),(0,r.kt)("li",{parentName:"ul"},'Each time the user presses the "Submit" button a new challenge is created for\nthe chosen factor (in this case the first one) and it is immediately\nverified. Any errors are displayed to the user.'),(0,r.kt)("li",{parentName:"ul"},"On successful verification, the client library will refresh the session in\nthe background automatically and finally call the ",(0,r.kt)("inlineCode",{parentName:"li"},"onSuccess")," callback, which\nwill show the authenticated ",(0,r.kt)("inlineCode",{parentName:"li"},"App")," component on screen.")),(0,r.kt)("h3",{id:"enforce-rules-for-mfa-logins"},"Enforce rules for MFA logins"),(0,r.kt)("p",null,"Adding MFA to your app's UI does not in-and-of-itself offer a higher level of\nsecurity to your users. You also need to enforce the MFA rules in your\napplication's database, APIs and server-side rendering."),(0,r.kt)("p",null,"Depending on your application's needs, there are three ways you can choose to\nenforce MFA."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Enforce for all users (new and existing)."),(0,r.kt)("br",{parentName:"li"}),"Any user account will have to enroll MFA to continue using your app.",(0,r.kt)("br",{parentName:"li"}),"The application will not allow access without going through MFA first."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Enforce for new users only."),(0,r.kt)("br",{parentName:"li"}),"Only new users will be forced to enroll MFA, while old users will be encouraged\nto do so.",(0,r.kt)("br",{parentName:"li"}),"The application will not allow access for new users without going through MFA\nfirst."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Enforce only for users that have opted-in."),(0,r.kt)("br",{parentName:"li"}),"Users that want MFA can enroll in it and the application will not allow access\nwithout going through MFA first.")),(0,r.kt)("h4",{id:"database"},"Database"),(0,r.kt)("p",null,"Your app should sufficiently deny or allow access to tables or rows based on\nthe user's current and possible authenticator levels."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"PostgreSQL has two types of policies: permissive and restrictive. This guide\nuses restrictive policies. Make sure you don't omit the ",(0,r.kt)("inlineCode",{parentName:"p"},"as restrictive"),"\nclause.")),(0,r.kt)("h5",{id:"enforce-for-all-users-new-and-existing"},"Enforce for all users (new and existing)"),(0,r.kt)("p",null,"If your app falls under this case, this is a template Row Level Security policy\nyou can apply to all your tables:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create policy \"Policy name.\"\n  on table_name\n  as restrictive\n  to authenticated\n  using (auth.jwt()->>'aal' = 'aal2');\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Here the policy will not accept any JWTs with an ",(0,r.kt)("inlineCode",{parentName:"li"},"aal")," claim other than\n",(0,r.kt)("inlineCode",{parentName:"li"},"aal2"),", which is the highest authenticator assurance level."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Using ",(0,r.kt)("inlineCode",{parentName:"strong"},"as restrictive")," ensures this policy will restrict all commands on the\ntable regardless of other policies!"))),(0,r.kt)("h5",{id:"enforce-for-new-users-only"},"Enforce for new users only"),(0,r.kt)("p",null,"If your app falls under this case, the rules get more complex. User accounts\ncreated past a certain timestamp must have a ",(0,r.kt)("inlineCode",{parentName:"p"},"aal2")," level to access the\ndatabase."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create policy \"Policy name.\"\n  on table_name\n  as restrictive -- very important!\n  to authenticated\n  using\n    (array[auth.jwt()->>'aal'] <@ (\n       select\n         case\n           when created_at >= '2022-12-12T00:00:00Z' then array['aal2']\n           else array['aal1', 'aal2', NULL]\n         end as aal\n       from auth.users\n       where auth.uid() = id));\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The policy will accept both ",(0,r.kt)("inlineCode",{parentName:"li"},"aal1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"aal2")," for users with a ",(0,r.kt)("inlineCode",{parentName:"li"},"created_at"),"\ntimestamp prior to 12th December 2022 at 00:00 UTC, but will only accept\n",(0,r.kt)("inlineCode",{parentName:"li"},"aal2")," for all other timestamps."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"<@")," operator is PostgreSQL's ",(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/functions-array.html"},'"contained in"\noperator.')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," appears because some JWTs originating from prior to the introduction\nof MFA in Supabase Auth will not contain an ",(0,r.kt)("inlineCode",{parentName:"li"},"aal")," claim."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Using ",(0,r.kt)("inlineCode",{parentName:"strong"},"as restrictive")," ensures this policy will restrict all commands on the\ntable regardless of other policies!"))),(0,r.kt)("h5",{id:"enforce-only-for-users-that-have-opted-in"},"Enforce only for users that have opted-in"),(0,r.kt)("p",null,"Users that have enrolled MFA on their account are expecting that your\napplication only works for them if they've gone through MFA."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create policy \"Policy name.\"\n  on table_name\n  as restrictive -- very important!\n  to authenticated\n  using (\n    array[auth.jwt()->>'aal'] <@ (\n      select\n          case\n            when count(id) > 0 then array['aal2']\n            else array['aal1', 'aal2', NULL]\n          end as aal\n        from auth.mfa_factors\n        where auth.uid() = user_id and status = 'verified'\n    ));\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The policy will only accept only ",(0,r.kt)("inlineCode",{parentName:"li"},"aal2")," when the user has at least one MFA\nfactor verified."),(0,r.kt)("li",{parentName:"ul"},"Otherwise, it will accept both ",(0,r.kt)("inlineCode",{parentName:"li"},"aal1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"aal2"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"<@")," operator is PostgreSQL's ",(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/functions-array.html"},'"contained in"\noperator.')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NULL")," appears because some JWTs originating from prior to the introduction\nof MFA in Supabase Auth will not contain an ",(0,r.kt)("inlineCode",{parentName:"li"},"aal")," claim."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Using ",(0,r.kt)("inlineCode",{parentName:"strong"},"as restrictive")," ensures this policy will restrict all commands on the\ntable regardless of other policies!"))),(0,r.kt)("h3",{id:"server-side-rendering"},"Server-Side Rendering"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"When using the Supabase JavaScript library in a server-side rendering context,\nmake sure you always create a new object for each request! This will prevent\nyou from accidentally rendering and serving content belonging to different\nusers.")),(0,r.kt)("p",null,"It is possible to enforce MFA on the Server-Side Rendering level. However, this\ncan be tricky do to well."),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"supabase.auth.mfa.getAuthenticatorAssuranceLevel()")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"supabase.auth.mfa.listFactors()")," APIs to identify the AAL level of the session\nand any factors that are enabled for a user, similar to how you would use these\non the browser."),(0,r.kt)("p",null,"However, encountering a different AAL level on the server may not actually be a\nsecurity problem. Consider these likely scenarios:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"User signed-in with a conventional method but closed their tab on the MFA\nflow."),(0,r.kt)("li",{parentName:"ol"},"User forgot a tab open for a very long time. (This happens more often than\nyou might imagine.)"),(0,r.kt)("li",{parentName:"ol"},"User has lost their authenticator device and is confused about the next\nsteps.")),(0,r.kt)("p",null,"We thus recommend you redirect users to a page where they can authenticate\nusing their additional factor, instead of rendering a HTTP 401 Unauthorized or\nHTTP 403 Forbidden content."),(0,r.kt)("h3",{id:"apis"},"APIs"),(0,r.kt)("p",null,"If your application uses the Supabase Database, Storage or Edge Functions, just\nusing Row Level Security policies will give you sufficient protection. In the\nevent that you have other APIs that you wish to protect, follow these general\nguidelines:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Use a good JWT verification and parsing library for your language."),(0,r.kt)("br",{parentName:"li"}),"This will let you securely parse JWTs and extract their claims."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Retrieve the ",(0,r.kt)("inlineCode",{parentName:"strong"},"aal")," claim from the JWT and compare its value according to\nyour needs."),(0,r.kt)("br",{parentName:"li"}),"If you've encountered an AAL level that can be increased, ask the user to\ncontinue the login process instead of logging them out."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Use the ",(0,r.kt)("inlineCode",{parentName:"strong"},"https://<project-ref>.supabase.co/rest/v1/auth/factors")," REST\nendpoint to identify if the user has enrolled any MFA factors."),(0,r.kt)("br",{parentName:"li"}),"Only ",(0,r.kt)("inlineCode",{parentName:"li"},"verified")," factors should be acted upon.")),(0,r.kt)("h2",{id:"frequently-asked-questions"},"Frequently asked questions"),(0,r.kt)("h3",{id:"why-is-there-a-challenge-and-verify-api-when-challenge-does-not-do-much"},"Why is there a challenge and verify API when challenge does not do much?"),(0,r.kt)("p",null,"TOTP is not going to be the only MFA factor Supabase Auth is going to support\nin the future. By separating out the challenge and verify steps, we're making\nthe library forward compatible with new factors we may add in the future --\nsuch as SMS or WebAuthn. For example, for SMS the ",(0,r.kt)("inlineCode",{parentName:"p"},"challenge")," endpoint would\nactually send out the SMS with the authentication code."),(0,r.kt)("h3",{id:"whats-inside-the-qr-code"},"What's inside the QR code?"),(0,r.kt)("p",null,"The TOTP QR code encodes a URI with the ",(0,r.kt)("inlineCode",{parentName:"p"},"otpauth")," scheme. It was ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/google/google-authenticator/wiki/Key-Uri-Format"},"initially\nintroduced by Google\nAuthenticator"),"\nbut is now universally accepted by all authenticator apps."),(0,r.kt)("h3",{id:"how-do-i-check-when-a-user-went-through-mfa"},"How do I check ",(0,r.kt)("em",{parentName:"h3"},"when")," a user went through MFA?"),(0,r.kt)("p",null,"Access tokens issued by Supabase Auth contain an ",(0,r.kt)("inlineCode",{parentName:"p"},"amr")," (Authentication Methods\nReference) claim. It is an array of objects that indicate what authentication\nmethods the user has used so far."),(0,r.kt)("p",null,"For example, the following structure describes a user that first signed in with\na password-based method, and then went through TOTP MFA 2 minutes and 12\nseconds later. The entries are ordered most recent method first!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "amr": [\n    {\n      "method": "mfa/totp",\n      "timestamp": 1666086056\n    },\n    {\n      "method": "password",\n      "timestamp": 1666085924\n    }\n  ]\n}\n')),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"supabase.auth.getAuthenticatorAssuranceLevel()")," method to get easy\naccess to this information in your browser app."),(0,r.kt)("p",null,"You can use this PostgreSQL snippet in RLS policies, too:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"json_query_path(auth.jwt(), '$.amr[0]')\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-JSON-PROCESSING-TABLE"},(0,r.kt)("inlineCode",{parentName:"a"},"json_query_path(json,\n  path)")),"\nis a function that allows access to elements in a JSON object according to a\n",(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-SQLJSON-PATH"},"SQL/JSON\npath"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$.amr[0]")," is a SQL/JSON path expression that fetches the most recent\nauthentication method in the JWT.")),(0,r.kt)("p",null,"Once you have extracted the most recent entry in the array, you can compare the\n",(0,r.kt)("inlineCode",{parentName:"p"},"method")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"timestamp")," to enforce stricter rules."),(0,r.kt)("p",null,"Currently recognized methods are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"password")," - any password based sign in."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"otp")," - any one-time password based sign in (email code, SMS code, magic\nlink)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"oauth")," - any OAuth based sign in (social login)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mfa/totp")," - a TOTP additional factor.")),(0,r.kt)("p",null,"This list will expand in the future."))}p.isMDXComponent=!0},11748:(e,t,n)=>{var a={"./locale":89234,"./locale.js":89234};function r(e){var t=o(e);return n(t)}function o(e){if(!n.o(a,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return a[e]}r.keys=function(){return Object.keys(a)},r.resolve=o,e.exports=r,r.id=11748}}]);