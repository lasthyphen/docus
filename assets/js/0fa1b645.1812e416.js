"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[60408],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||s;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(86010);const s="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(87462),r=n(67294),s=n(86010),o=n(72389),i=n(67392),l=n(7094),p=n(12466);const u="tabList__CuJ",c="tabItem_LNqP";function d(e){const{lazy:t,block:n,defaultValue:o,values:d,groupId:m,className:h}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=d??g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,i.l)(f,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===o?o:o??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==y&&!f.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:w}=(0,l.U)(),[k,S]=(0,r.useState)(y),N=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.o5)();if(null!=m){const e=v[m];null!=e&&e!==k&&f.some((t=>t.value===e))&&S(e)}const A=e=>{const t=e.currentTarget,n=N.indexOf(t),a=f[n].value;a!==k&&(x(t),S(a),null!=m&&w(m,String(a)))},E=e=>{let t=null;switch(e.key){case"Enter":A(e);break;case"ArrowRight":{const n=N.indexOf(e.currentTarget)+1;t=N[n]??N[0];break}case"ArrowLeft":{const n=N.indexOf(e.currentTarget)-1;t=N[n]??N[N.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},h)},f.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,key:t,ref:e=>N.push(e),onKeyDown:E,onClick:A},o,{className:(0,s.Z)("tabs__item",c,o?.className,{"tabs__item--active":k===t})}),n??t)}))),t?(0,r.cloneElement)(g.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==k})))))}function m(e){const t=(0,o.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},66788:(e,t,n)=>{n.d(t,{ZP:()=>u});var a=n(87462),r=(n(67294),n(3905)),s=n(65488),o=n(85162);const i={toc:[]};function l(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- Create a table for public profiles\ncreate table profiles (\n  id uuid references auth.users not null primary key,\n  updated_at timestamp with time zone,\n  username text unique,\n  full_name text,\n  avatar_url text,\n  website text,\n\n  constraint username_length check (char_length(username) >= 3)\n);\n-- Set up Row Level Security (RLS)\n-- See https://supabase.com/docs/guides/auth/row-level-security for more details.\nalter table profiles\n  enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles\n  for select using (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles\n  for insert with check (auth.uid() = id);\n\ncreate policy \"Users can update own profile.\" on profiles\n  for update using (auth.uid() = id);\n\n-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.\n-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.\ncreate function public.handle_new_user()\nreturns trigger as $$\nbegin\n  insert into public.profiles (id, full_name, avatar_url)\n  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');\n  return new;\nend;\n$$ language plpgsql security definer;\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\n  values ('avatars', 'avatars');\n\n-- Set up access controls for storage.\n-- See https://supabase.com/docs/guides/storage#policy-examples for more details.\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects\n  for select using (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects\n  for insert with check (bucket_id = 'avatars');\n\ncreate policy \"Anyone can update their own avatar.\" on storage.objects\n  for update using (auth.uid() = owner) with check (bucket_id = 'avatars');\n")))}l.isMDXComponent=!0;const p={toc:[{value:"Project set up",id:"project-set-up",level:2},{value:"Create a project",id:"create-a-project",level:3},{value:"Set up the database schema",id:"set-up-the-database-schema",level:3},{value:"Get the API Keys",id:"get-the-api-keys",level:3}]};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"project-set-up"},"Project set up"),(0,r.kt)("p",null,'Before we start building we\'re going to set up our Database and API. This is as simple as starting a new Project in Supabase\nand then creating a "schema" inside the database.'),(0,r.kt)("h3",{id:"create-a-project"},"Create a project"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Go to ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com"},"app.supabase.com"),"."),(0,r.kt)("li",{parentName:"ol"},'Click on "New Project".'),(0,r.kt)("li",{parentName:"ol"},"Enter your project details."),(0,r.kt)("li",{parentName:"ol"},"Wait for the new database to launch.")),(0,r.kt)("h3",{id:"set-up-the-database-schema"},"Set up the database schema"),(0,r.kt)("p",null,'Now we are going to set up the database schema. We can use the "User Management Starter" quickstart in the SQL Editor,\nor you can just copy/paste the SQL from below and run it yourself.'),(0,r.kt)(s.Z,{groupId:"language",defaultValue:"dashboard",values:[{label:"Dashboard",value:"dashboard"},{label:"SQL",value:"sql"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"dashboard",mdxType:"TabItem"},(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Go to the ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/sql"},"SQL Editor")," page in the Dashboard."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"User Management Starter"),"."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"Run"),".")),(0,r.kt)("video",{width:"99%",muted:!0,playsInline:!0,controls:"true"},(0,r.kt)("source",{src:"/docs/videos/sql-user-management-starter.mp4",type:"video/mp4",muted:!0,playsInline:!0}))),(0,r.kt)(o.Z,{value:"sql",mdxType:"TabItem"},(0,r.kt)(l,{mdxType:"UserManagementSQLTemplate"}))),(0,r.kt)("h3",{id:"get-the-api-keys"},"Get the API Keys"),(0,r.kt)("p",null,"Now that you've created some database tables, you are ready to insert data using the auto-generated API.\nWe just need to get the URL and ",(0,r.kt)("inlineCode",{parentName:"p"},"anon")," key from the API settings."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Go to the ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/settings"},"Settings")," page in the Dashboard."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"API")," in the sidebar."),(0,r.kt)("li",{parentName:"ol"},"Find your API ",(0,r.kt)("inlineCode",{parentName:"li"},"URL"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"anon"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"service_role")," keys on this page.")),(0,r.kt)("video",{width:"99%",muted:!0,playsInline:!0,controls:"true"},(0,r.kt)("source",{src:"/docs/videos/api/api-url-and-key.mp4",type:"video/mp4",muted:!0,playsInline:!0})))}u.isMDXComponent=!0},27021:(e,t,n)=>{n.d(t,{ZP:()=>o});var a=n(87462),r=(n(67294),n(3905));const s={toc:[{value:"Intro",id:"intro",level:2}]};function o(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"intro"},"Intro"),(0,r.kt)("p",null,"This example provides the steps to build a basic user management app. It includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Supabase ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/database"},"Database"),": a Postgres database for storing your user data."),(0,r.kt)("li",{parentName:"ul"},"Supabase ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/auth"},"Auth"),": users can sign in with magic links (no passwords, only email)."),(0,r.kt)("li",{parentName:"ul"},"Supabase ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/storage"},"Storage"),": users can upload a photo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/guides/auth#row-level-security"},"Row Level Security"),": data is protected so that individuals can only access their own data."),(0,r.kt)("li",{parentName:"ul"},"Instant ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/api"},"APIs"),": APIs will be automatically generated when you create your database tables.")),(0,r.kt)("p",null,"By the end of this guide you'll have an app which allows users to login and update some basic profile details:"))}o.isMDXComponent=!0},30868:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),s=(n(65488),n(85162),n(27021)),o=n(66788);const i={id:"with-expo",title:"Quickstart: Expo",description:"Learn how to use Supabase in your React Native App.",sidebar_label:"Expo"},l=void 0,p={unversionedId:"guides/with-expo",id:"guides/with-expo",title:"Quickstart: Expo",description:"Learn how to use Supabase in your React Native App.",source:"@site/docs/guides/with-expo.mdx",sourceDirName:"guides",slug:"/guides/with-expo",permalink:"/docs/guides/with-expo",draft:!1,editUrl:"https://github.com/docs/guides/with-expo.mdx",tags:[],version:"current",frontMatter:{id:"with-expo",title:"Quickstart: Expo",description:"Learn how to use Supabase in your React Native App.",sidebar_label:"Expo"}},u={},c=[{value:"GitHub",id:"github",level:3},{value:"Building the App",id:"building-the-app",level:2},{value:"Initialize a React Native app",id:"initialize-a-react-native-app",level:3},{value:"Set up a Login component",id:"set-up-a-login-component",level:3},{value:"Account page",id:"account-page",level:3},{value:"Launch!",id:"launch",level:3},{value:"Bonus: Profile photos",id:"bonus-profile-photos",level:2},{value:"Additional dependency installation",id:"additional-dependency-installation",level:3},{value:"Create an upload widget",id:"create-an-upload-widget",level:3},{value:"Add the new widget",id:"add-the-new-widget",level:3},{value:"Next steps",id:"next-steps",level:2}],d={toc:c};function m(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(s.ZP,{mdxType:"QuickstartIntro"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Supabase User Management example",src:n(93434).Z,width:"1382",height:"852"})),(0,r.kt)("h3",{id:"github"},"GitHub"),(0,r.kt)("p",null,"Should you get stuck while working through the guide, refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/supabase/supabase/tree/master/examples/user-management/expo-user-management"},"this repo"),"."),(0,r.kt)(o.ZP,{mdxType:"ProjectSetup"}),(0,r.kt)("h2",{id:"building-the-app"},"Building the App"),(0,r.kt)("p",null,"Let's start building the React Native app from scratch."),(0,r.kt)("h3",{id:"initialize-a-react-native-app"},"Initialize a React Native app"),(0,r.kt)("p",null,"We can use ",(0,r.kt)("a",{parentName:"p",href:"https://docs.expo.dev/get-started/create-a-new-app/"},(0,r.kt)("inlineCode",{parentName:"a"},"expo"))," to initialize\nan app called ",(0,r.kt)("inlineCode",{parentName:"p"},"expo-user-management"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-expo-app -t expo-template-blank-typescript expo-user-management\n\ncd expo-user-management\n")),(0,r.kt)("p",null,"Then let's install the additional dependencies: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/supabase/supabase-js"},"supabase-js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @supabase/supabase-js\nnpm install react-native-elements @react-native-async-storage/async-storage react-native-url-polyfill\n")),(0,r.kt)("p",null,"Now let's create a helper file to initialize the Supabase client.\nWe need the API URL and the ",(0,r.kt)("inlineCode",{parentName:"p"},"anon")," key that you copied ",(0,r.kt)("a",{parentName:"p",href:"#get-the-api-keys"},"earlier"),".\nThese variables will be exposed on the browser, and that's completely fine since we have\n",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/auth#row-level-security"},"Row Level Security")," enabled on our Database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="lib/supabase.ts"',title:'"lib/supabase.ts"'},"import AsyncStorage from '@react-native-async-storage/async-storage'\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL\nconst supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: AsyncStorage as any,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false,\n  },\n})\n")),(0,r.kt)("h3",{id:"set-up-a-login-component"},"Set up a Login component"),(0,r.kt)("p",null,"Let's set up a React Native component to manage logins and sign ups.\nUsers would be able to sign in with their email and password."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/Auth.tsx"',title:'"components/Auth.tsx"'},"import React, { useState } from 'react'\nimport { Alert, StyleSheet, View } from 'react-native'\nimport { supabase } from '../lib/supabase'\nimport { Button, Input } from 'react-native-elements'\n\nexport default function Auth() {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  async function signInWithEmail() {\n    setLoading(true)\n    const { error } = await supabase.auth.signInWithPassword({\n      email: email,\n      password: password,\n    })\n\n    if (error) Alert.alert(error.message)\n    setLoading(false)\n  }\n\n  async function signUpWithEmail() {\n    setLoading(true)\n    const { error } = await supabase.auth.signUp({\n      email: email,\n      password: password,\n    })\n\n    if (error) Alert.alert(error.message)\n    setLoading(false)\n  }\n\n  return (\n    <View>\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n        <Input\n          label=\"Email\"\n          leftIcon={{ type: 'font-awesome', name: 'envelope' }}\n          onChangeText={(text) => setEmail(text)}\n          value={email}\n          placeholder=\"email@address.com\"\n          autoCapitalize={'none'}\n        />\n      </View>\n      <View style={styles.verticallySpaced}>\n        <Input\n          label=\"Password\"\n          leftIcon={{ type: 'font-awesome', name: 'lock' }}\n          onChangeText={(text) => setPassword(text)}\n          value={password}\n          secureTextEntry={true}\n          placeholder=\"Password\"\n          autoCapitalize={'none'}\n        />\n      </View>\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n        <Button\n          title=\"Sign in\"\n          disabled={loading}\n          onPress={() => signInWithEmail()}\n        />\n      </View>\n      <View style={styles.verticallySpaced}>\n        <Button\n          title=\"Sign up\"\n          disabled={loading}\n          onPress={() => signUpWithEmail()}\n        />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 40,\n    padding: 12,\n  },\n  verticallySpaced: {\n    paddingTop: 4,\n    paddingBottom: 4,\n    alignSelf: 'stretch',\n  },\n  mt20: {\n    marginTop: 20,\n  },\n})\n")),(0,r.kt)("h3",{id:"account-page"},"Account page"),(0,r.kt)("p",null,"After a user is signed in we can allow them to edit their profile details and manage their account."),(0,r.kt)("p",null,"Let's create a new component for that called ",(0,r.kt)("inlineCode",{parentName:"p"},"Account.tsx"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/Account.tsx"',title:'"components/Account.tsx"'},"import { useState, useEffect } from 'react'\nimport { supabase } from '../lib/supabase'\nimport { StyleSheet, View, Alert } from 'react-native'\nimport { Button, Input } from 'react-native-elements'\nimport { Session } from '@supabase/supabase-js'\n\nexport default function Account({ session }: { session: Session }) {\n  const [loading, setLoading] = useState(true)\n  const [username, setUsername] = useState('')\n  const [website, setWebsite] = useState('')\n  const [avatarUrl, setAvatarUrl] = useState('')\n\n  useEffect(() => {\n    if (session) getProfile()\n  }, [session])\n\n  async function getProfile() {\n    try {\n      setLoading(true)\n      if (!session?.user) throw new Error('No user on the session!')\n\n      let { data, error, status } = await supabase\n        .from('profiles')\n        .select(`username, website, avatar_url`)\n        .eq('id', session?.user.id)\n        .single()\n      if (error && status !== 406) {\n        throw error\n      }\n\n      if (data) {\n        setUsername(data.username)\n        setWebsite(data.website)\n        setAvatarUrl(data.avatar_url)\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        Alert.alert(error.message)\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  async function updateProfile({\n    username,\n    website,\n    avatar_url,\n  }: {\n    username: string\n    website: string\n    avatar_url: string\n  }) {\n    try {\n      setLoading(true)\n      if (!session?.user) throw new Error('No user on the session!')\n\n      const updates = {\n        id: session?.user.id,\n        username,\n        website,\n        avatar_url,\n        updated_at: new Date(),\n      }\n\n      let { error } = await supabase.from('profiles').upsert(updates)\n\n      if (error) {\n        throw error\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        Alert.alert(error.message)\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <View>\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n        <Input label=\"Email\" value={session?.user?.email} disabled />\n      </View>\n      <View style={styles.verticallySpaced}>\n        <Input\n          label=\"Username\"\n          value={username || ''}\n          onChangeText={(text) => setUsername(text)}\n        />\n      </View>\n      <View style={styles.verticallySpaced}>\n        <Input\n          label=\"Website\"\n          value={website || ''}\n          onChangeText={(text) => setWebsite(text)}\n        />\n      </View>\n\n      <View style={[styles.verticallySpaced, styles.mt20]}>\n        <Button\n          title={loading ? 'Loading ...' : 'Update'}\n          onPress={() =>\n            updateProfile({ username, website, avatar_url: avatarUrl })\n          }\n          disabled={loading}\n        />\n      </View>\n\n      <View style={styles.verticallySpaced}>\n        <Button title=\"Sign Out\" onPress={() => supabase.auth.signOut()} />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 40,\n    padding: 12,\n  },\n  verticallySpaced: {\n    paddingTop: 4,\n    paddingBottom: 4,\n    alignSelf: 'stretch',\n  },\n  mt20: {\n    marginTop: 20,\n  },\n})\n")),(0,r.kt)("h3",{id:"launch"},"Launch!"),(0,r.kt)("p",null,"Now that we have all the components in place, let's update ",(0,r.kt)("inlineCode",{parentName:"p"},"App.tsx"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="App.tsx"',title:'"App.tsx"'},"import 'react-native-url-polyfill/auto'\nimport { useState, useEffect } from 'react'\nimport { supabase } from './lib/supabase'\nimport Auth from './components/Auth'\nimport Account from './components/Account'\nimport { View } from 'react-native'\nimport { Session } from '@supabase/supabase-js'\n\nexport default function App() {\n  const [session, setSession] = useState<Session | null>(null)\n\n  useEffect(() => {\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session)\n    })\n\n    supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session)\n    })\n  }, [])\n\n  return (\n    <View>\n      {session && session.user ? (\n        <Account key={session.user.id} session={session} />\n      ) : (\n        <Auth />\n      )}\n    </View>\n  )\n}\n")),(0,r.kt)("p",null,"Once that's done, run this in a terminal window:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm start\n")),(0,r.kt)("p",null,"And then press the appropriate key for the environment you want to test the app in and you should see the completed app."),(0,r.kt)("h2",{id:"bonus-profile-photos"},"Bonus: Profile photos"),(0,r.kt)("p",null,"Every Supabase project is configured with ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/storage"},"Storage")," for managing large files like\nphotos and videos."),(0,r.kt)("h3",{id:"additional-dependency-installation"},"Additional dependency installation"),(0,r.kt)("p",null,"You will need a file picker that works on the environment you will build the project for, we will use react-native-document-picker in this example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"expo install react-native-document-picker\n")),(0,r.kt)("h3",{id:"create-an-upload-widget"},"Create an upload widget"),(0,r.kt)("p",null,"Let's create an avatar for the user so that they can upload a profile photo.\nWe can start by creating a new component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/Avatar.tsx"',title:'"components/Avatar.tsx"'},"import { useState, useEffect } from 'react'\nimport { supabase } from '../lib/supabase'\nimport { StyleSheet, View, Alert, Image, Button } from 'react-native'\nimport DocumentPicker, {\n  isCancel,\n  isInProgress,\n  types,\n} from 'react-native-document-picker'\n\ninterface Props {\n  size: number\n  url: string | null\n  onUpload: (filePath: string) => void\n}\n\nexport default function Avatar({ url, size = 150, onUpload }: Props) {\n  const [uploading, setUploading] = useState(false)\n  const [avatarUrl, setAvatarUrl] = useState<string | null>(null)\n  const avatarSize = { height: size, width: size }\n\n  useEffect(() => {\n    if (url) downloadImage(url)\n  }, [url])\n\n  async function downloadImage(path: string) {\n    try {\n      const { data, error } = await supabase.storage\n        .from('avatars')\n        .download(path)\n\n      if (error) {\n        throw error\n      }\n\n      const fr = new FileReader()\n      fr.readAsDataURL(data)\n      fr.onload = () => {\n        setAvatarUrl(fr.result as string)\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        console.log('Error downloading image: ', error.message)\n      }\n    }\n  }\n\n  async function uploadAvatar() {\n    try {\n      setUploading(true)\n\n      const file = await DocumentPicker.pickSingle({\n        presentationStyle: 'fullScreen',\n        copyTo: 'cachesDirectory',\n        type: types.images,\n        mode: 'open',\n      })\n\n      const photo = {\n        uri: file.fileCopyUri,\n        type: file.type,\n        name: file.name,\n      }\n\n      const formData = new FormData()\n      formData.append('file', photo)\n\n      const fileExt = file.name.split('.').pop()\n      const filePath = `${Math.random()}.${fileExt}`\n\n      let { error } = await supabase.storage\n        .from('avatars')\n        .upload(filePath, formData)\n\n      if (error) {\n        throw error\n      }\n\n      onUpload(filePath)\n    } catch (error) {\n      if (isCancel(error)) {\n        console.warn('cancelled')\n        // User cancelled the picker, exit any dialogs or menus and move on\n      } else if (isInProgress(error)) {\n        console.warn(\n          'multiple pickers were opened, only the last will be considered'\n        )\n      } else if (error instanceof Error) {\n        Alert.alert(error.message)\n      } else {\n        throw error\n      }\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  return (\n    <View>\n      {avatarUrl ? (\n        <Image\n          source={{ uri: avatarUrl }}\n          accessibilityLabel=\"Avatar\"\n          style={[avatarSize, styles.avatar, styles.image]}\n        />\n      ) : (\n        <View style={[avatarSize, styles.avatar, styles.noImage]} />\n      )}\n      <View>\n        <Button\n          title={uploading ? 'Uploading ...' : 'Upload'}\n          onPress={uploadAvatar}\n          disabled={uploading}\n        />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  avatar: {\n    borderRadius: 5,\n    overflow: 'hidden',\n    maxWidth: '100%',\n  },\n  image: {\n    objectFit: 'cover',\n    paddingTop: 0,\n  },\n  noImage: {\n    backgroundColor: '#333',\n    border: '1px solid rgb(200, 200, 200)',\n    borderRadius: 5,\n  },\n})\n")),(0,r.kt)("h3",{id:"add-the-new-widget"},"Add the new widget"),(0,r.kt)("p",null,"And then we can add the widget to the Account page:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/Account.tsx"',title:'"components/Account.tsx"'},"// Import the new component\nimport Avatar from './Avatar'\n\n// ...\n  return (\n    <View>\n      {/* Add to the body */}\n      <View>\n        <Avatar\n          size={200}\n          url={avatarUrl}\n          onUpload={(url: string) => {\n            setAvatarUrl(url)\n            updateProfile({ username, website, avatar_url: url })\n          }}\n        />\n      </View>\n      {/* ... */}\n    </View>\n  )\n}\n// ...\n")),(0,r.kt)("p",null,"Now you will need to run the prebuild command to get the application working on your chosen platform."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"expo prebuild\n")),(0,r.kt)("h2",{id:"next-steps"},"Next steps"),(0,r.kt)("p",null,"At this stage you have a fully functional application!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Got a question? ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/supabase/supabase/discussions"},"Ask here"),"."),(0,r.kt)("li",{parentName:"ul"},"Sign in: ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com"},"app.supabase.com"))))}m.isMDXComponent=!0},93434:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/supabase-flutter-demo-2838917c7cf974a4dc03e45b25a3cf04.png"}}]);