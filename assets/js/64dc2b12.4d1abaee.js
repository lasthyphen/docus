"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[99440],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),o=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=o(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=o(n),g=a,h=p["".concat(u,".").concat(g)]||p[g]||d[g]||i;return n?r.createElement(h,s(s({ref:t},c),{},{components:n})):r.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=g;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:a,s[1]=l;for(var o=2;o<i;o++)s[o]=n[o];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},87714:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var r=n(87462),a=(n(67294),n(3905));const i={id:"managing-user-data",title:"Managing User Data",description:"Securing your user data with Row Level Security."},s=void 0,l={unversionedId:"guides/auth/managing-user-data",id:"guides/auth/managing-user-data",title:"Managing User Data",description:"Securing your user data with Row Level Security.",source:"@site/docs/guides/auth/managing-user-data.mdx",sourceDirName:"guides/auth",slug:"/guides/auth/managing-user-data",permalink:"/docs/guides/auth/managing-user-data",draft:!1,editUrl:"https://github.com/docs/guides/auth/managing-user-data.mdx",tags:[],version:"current",frontMatter:{id:"managing-user-data",title:"Managing User Data",description:"Securing your user data with Row Level Security."}},u={},o=[{value:"Creating user tables",id:"creating-user-tables",level:2},{value:"Public access",id:"public-access",level:2},{value:"Private access",id:"private-access",level:2},{value:"Bypassing Row Level Security",id:"bypassing-row-level-security",level:2},{value:"Advanced techniques",id:"advanced-techniques",level:2},{value:"Using triggers",id:"using-triggers",level:3}],c={toc:o};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"For security purposes, the ",(0,a.kt)("inlineCode",{parentName:"p"},"auth")," schema is not exposed on the auto-generated API."),(0,a.kt)("p",null,"Even though Supabase provides an ",(0,a.kt)("inlineCode",{parentName:"p"},"auth.users")," table, it can be helpful to create tables in the ",(0,a.kt)("inlineCode",{parentName:"p"},"public")," schema for storing user data that you want to access via the API."),(0,a.kt)("h2",{id:"creating-user-tables"},"Creating user tables"),(0,a.kt)("p",null,"When you create tables to store user data, it's helpful to reference the ",(0,a.kt)("inlineCode",{parentName:"p"},"auth.users")," table in the primary key. This ensures data integrity."),(0,a.kt)("p",null,"For example, a ",(0,a.kt)("inlineCode",{parentName:"p"},"public.profiles")," table might look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"create table public.profiles (\n  id uuid references auth.users not null,\n  first_name text,\n  last_name text,\n\n  primary key (id)\n);\n\nalter table public.profiles enable row level security;\n")),(0,a.kt)("h2",{id:"public-access"},"Public access"),(0,a.kt)("p",null,"Since Row Level Security is enabled, this table is accessible via the API but no data will be returned unless we set up some Policies.\nIf we wanted the data to be ",(0,a.kt)("em",{parentName:"p"},"readable")," by everyone but only allow logged-in users to update their own data, the Policies would look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},'create policy "Public profiles are viewable by everyone."\n  on profiles for select\n  using ( true );\n\ncreate policy "Users can insert their own profile."\n  on profiles for insert\n  with check ( auth.uid() = id );\n\ncreate policy "Users can update own profile."\n  on profiles for update\n  using ( auth.uid() = id );\n')),(0,a.kt)("h2",{id:"private-access"},"Private access"),(0,a.kt)("p",null,"If the data should only be ",(0,a.kt)("em",{parentName:"p"},"readable")," by the user who owns the data, we just need to change the ",(0,a.kt)("inlineCode",{parentName:"p"},"for select")," query above."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},'create policy "Profiles are viewable by users who created them."\n  on profiles for select\n  using ( auth.uid() = id );\n')),(0,a.kt)("p",null,"The nice thing about this pattern? We can now query this table via the API and we don't need to include data filters in our API queries - the Policies will handle that for us:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// This will return nothing while the user is logged out\nconst { data } = await supabase\n  .from('profiles')\n  .select('id, username, avatar_url, website')\n\n// After the user is logged in, this will only return\n// the logged-in user's data - in this case a single row\nconst { error } = await supabase.auth.signIn({ email })\nconst { data: profile } = await supabase\n  .from('profiles')\n  .select('id, username, avatar_url, website')\n")),(0,a.kt)("h2",{id:"bypassing-row-level-security"},"Bypassing Row Level Security"),(0,a.kt)("p",null,"If you need to fetch a full list of user profiles, we supply a ",(0,a.kt)("inlineCode",{parentName:"p"},"service_key")," which you can use with your API and Client Libraries to bypass Row Level Security."),(0,a.kt)("p",null,"Make sure you ",(0,a.kt)("em",{parentName:"p"},"NEVER")," expose this publicly. But it can be used on the server-side to fetch all of the profiles."),(0,a.kt)("h2",{id:"advanced-techniques"},"Advanced techniques"),(0,a.kt)("h3",{id:"using-triggers"},"Using triggers"),(0,a.kt)("p",null,"If you want to add a row to your ",(0,a.kt)("inlineCode",{parentName:"p"},"public.profiles")," table every time a user signs up, you can use triggers.\nIf the trigger fails however, it could block the user sign ups - so make sure that the code is well-tested."),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- inserts a row into public.users\ncreate function public.handle_new_user()\nreturns trigger\nlanguage plpgsql\nsecurity definer set search_path = public\nas $$\nbegin\n  insert into public.profiles (id)\n  values (new.id);\n  return new;\nend;\n$$;\n\n-- trigger the function every time a user is created\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n")))}p.isMDXComponent=!0}}]);