"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[60230],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(a),m=o,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return a?n.createElement(h,r(r({ref:t},u),{},{components:a})):n.createElement(h,r({ref:t},u))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},13336:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(87462),o=(a(67294),a(3905));const i={id:"plasmic",title:"Plasmic",description:"Get started with Supabase and Plasmic, an open-source framework for building internal tools."},r=void 0,l={unversionedId:"guides/integrations/plasmic",id:"guides/integrations/plasmic",title:"Plasmic",description:"Get started with Supabase and Plasmic, an open-source framework for building internal tools.",source:"@site/docs/guides/integrations/plasmic.mdx",sourceDirName:"guides/integrations",slug:"/guides/integrations/plasmic",permalink:"/docs/guides/integrations/plasmic",draft:!1,editUrl:"https://github.com/docs/guides/integrations/plasmic.mdx",tags:[],version:"current",frontMatter:{id:"plasmic",title:"Plasmic",description:"Get started with Supabase and Plasmic, an open-source framework for building internal tools."}},s={},p=[{value:"Step 1: Set up your Backend on Supabase",id:"step-1-set-up-your-backend-on-supabase",level:2},{value:"Step 2: Set up your codebase",id:"step-2-set-up-your-codebase",level:2},{value:"Step 3: Explore the existing application",id:"step-3-explore-the-existing-application",level:2},{value:"Step 4: Clone the Plasmic project",id:"step-4-clone-the-plasmic-project",level:2},{value:"Step 4a: Configure your code base to use the new Plasmic project",id:"step-4a-configure-your-code-base-to-use-the-new-plasmic-project",level:3},{value:"Step 4b: Configure your Plasmic project app host",id:"step-4b-configure-your-plasmic-project-app-host",level:3},{value:"Step 5: Create a new page for our Pokedex gallery",id:"step-5-create-a-new-page-for-our-pokedex-gallery",level:2},{value:"Putting it all together (video)",id:"putting-it-all-together-video",level:3},{value:"Step 6: Check your dev server",id:"step-6-check-your-dev-server",level:2},{value:"How does this all work under the hood?",id:"how-does-this-all-work-under-the-hood",level:2},{value:"SupabaseGrid",id:"supabasegrid",level:3},{value:"SupabaseQuery",id:"supabasequery",level:3},{value:"SupabaseGridCollection",id:"supabasegridcollection",level:3},{value:"SupabaseField",id:"supabasefield",level:3}],u={toc:p};function c(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this guide, we will show you how to build a crowd-sourced Pokemon Pokedex, by connecting ",(0,o.kt)("strong",{parentName:"p"},"Supabase"),", an open source Firebase backend alternative, with ",(0,o.kt)("strong",{parentName:"p"},"Plasmic"),", a visual builder for the web. While many users leverage Plasmic to quickly launch and iterate on landing pages, in this tutorial we\u2019ll show just how powerful Plasmic can be as a general-purpose visual builder for React, which can be used to design and implement fully featured read-write applications."),(0,o.kt)("p",null,"You can play with the live demo here:",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("a",{parentName:"p",href:"https://plasmic-supabase-demo.vercel.app/"},"https://plasmic-supabase-demo.vercel.app/")),(0,o.kt)("p",null,"You can also take a look at the Plasmic project here:",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("a",{parentName:"p",href:"https://studio.plasmic.app/projects/66RKaSPCwKxYjCfXWHCxn6"},"https://studio.plasmic.app/projects/66RKaSPCwKxYjCfXWHCxn6")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"You\u2019ll need to enable 3rd-party cookies in your browser for the project to properly load.")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"pokedex-screenshot",src:a(34779).Z,width:"1249",height:"1023"})),(0,o.kt)("p",null,"At a high level,"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Supabase")," is used to store the database of Pokemon (backed by Postgres) and provides an authentication backend. Our code base includes React components for querying the database, displaying this data, and supporting user sessions."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Plasmic")," is used to create the pages and visual design of the application. We import our Supabase components into the Studio, which can be visually assembled and configured there (e.g. for displaying data)."),(0,o.kt)("li",{parentName:"ul"},"Plasmic designed pages are rendered back into the Next.js application.")),(0,o.kt)("h2",{id:"step-1-set-up-your-backend-on-supabase"},"Step 1: Set up your Backend on Supabase"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"On the ",(0,o.kt)("a",{parentName:"li",href:"https://app.supabase.com/"},"Supabase dashboard"),", click ",(0,o.kt)("inlineCode",{parentName:"li"},"New project")," and set the name of the project.\nBy default, Supabase will already be set up for user signups with email, with users being stored in a ",(0,o.kt)("inlineCode",{parentName:"li"},"users")," table.")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"create-project-supabase",src:a(2293).Z,width:"876",height:"791"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Navigate to the ",(0,o.kt)("inlineCode",{parentName:"li"},"Table Editor")," on the left side navigation bar. Here we can create a ",(0,o.kt)("inlineCode",{parentName:"li"},"New table")," to store our Pokemon entries. Make sure you are in the ",(0,o.kt)("inlineCode",{parentName:"li"},"schema public")," view. Create a new table called ",(0,o.kt)("inlineCode",{parentName:"li"},"entries"),", with 6 columns:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"id"),": is a unique ID for the entry. This column should be generated automatically as the primary column."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"user_id"),": Create a relation to the ",(0,o.kt)("inlineCode",{parentName:"li"},"user")," table by clicking on the link icon next to the column name. Here, you can select the ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," column of the ",(0,o.kt)("inlineCode",{parentName:"li"},"user")," table."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"name"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"description"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"imageUrl"),": This will store the name, description, and imageUrl for each Pokemon."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"inserted_at")," : This will be an automatically populated column, set to when the row was first inserted.")))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: In this tutorial we\u2019ve turned off \u201c",(0,o.kt)("a",{parentName:"p",href:"https://supabase.com/docs/guides/auth/row-level-security"},"Row Level Security (RLS)"),"\u201d. In practice, you will want to create policies that restrict who gets to create, edit, and delete posts. By turning this off, any user can modify the database without restrictions.")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"create-table-supabase",src:a(93290).Z,width:"1024",height:"862"})),(0,o.kt)("p",null,"For your convenience, feel free to import the following CSV into Supabase to pre-populate your database. In order to import, you must select ",(0,o.kt)("inlineCode",{parentName:"p"},"Import data via spreadsheet"),", in the new table dialog box. (It does not work on existing tables.)"),(0,o.kt)("p",null,(0,o.kt)("a",{target:"_blank",href:a(1351).Z},"pokedex-export.csv")),(0,o.kt)("h2",{id:"step-2-set-up-your-codebase"},"Step 2: Set up your codebase"),(0,o.kt)("p",null,"We have a working code example for you ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/plasmicapp/plasmic/tree/master/examples/supabase-demo"},"here"),". This starter comes with all of the code components you need to get started querying Supabase through Plasmic Studio."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Code components are React components defined in your code base that we import into Plasmic Studio for use. Your project will be configured to look for these at ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/plasmic-host")," You can use these components in your design, as well as style them. Check out ",(0,o.kt)("inlineCode",{parentName:"p"},"supabase-demo/plasmic-init.ts")," to see how they are registered with Plasmic.")),(0,o.kt)("p",null,"First, clone the repo to your development machine and install the dependencies."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git clone git@github.com:plasmicapp/plasmic.git\ncd plasmic/examples/supabase-demo/\nyarn install\n")),(0,o.kt)("p",null,"Copy ",(0,o.kt)("inlineCode",{parentName:"p"},".env.example")," to ",(0,o.kt)("inlineCode",{parentName:"p"},".env.local"),", which will store the environment variables when running a local development server. Add your Supabase project\u2019s URL and public key, which you can find in the ",(0,o.kt)("inlineCode",{parentName:"p"},"API")," tab on the left pane of your Supabase dashboard."),(0,o.kt)("p",null,"Now run the dev server, which listens at ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:3000")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn dev\n")),(0,o.kt)("h2",{id:"step-3-explore-the-existing-application"},"Step 3: Explore the existing application"),(0,o.kt)("p",null,"Navigate to ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:3000"},"http://localhost:3000")," in your web browser. The project will already be set up for user signups, logins, and an admin interface for adding and editing Pokemon to the database. Feel free to sign up with your email address for an account and add Pokemon to the database. Supabase will require that you verify your email address before you can log in."),(0,o.kt)("p",null,"If you pre-populated the database in Step 1. you should see the following homepage after logging in. Otherwise, feel free to add Pokemon manually via the UI."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"application-screenshot",src:a(33176).Z,width:"1211",height:"1247"})),(0,o.kt)("h2",{id:"step-4-clone-the-plasmic-project"},"Step 4: Clone the Plasmic project"),(0,o.kt)("p",null,"Now let\u2019s try to make some additions! The code base is currently configured to a read-only copy of the Plasmic project. Let\u2019s make an editable copy first."),(0,o.kt)("p",null,"Open the default starter Plasmic project here:",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("a",{parentName:"p",href:"https://studio.plasmic.app/projects/66RKaSPCwKxYjCfXWHCxn6"},"https://studio.plasmic.app/projects/66RKaSPCwKxYjCfXWHCxn6")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"clone-project-plasmic",src:a(41204).Z,width:"1288",height:"505"})),(0,o.kt)("p",null,"To make an editable copy, click on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Copy Project")," button in the blue bar. This will clone the project and redirect you to your copy."),(0,o.kt)("h3",{id:"step-4a-configure-your-code-base-to-use-the-new-plasmic-project"},"Step 4a: Configure your code base to use the new Plasmic project"),(0,o.kt)("p",null,"Take note of the ",(0,o.kt)("inlineCode",{parentName:"p"},"project ID")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"API token"),". You can find the project ID in the URL:\n",(0,o.kt)("inlineCode",{parentName:"p"},"https://studio.plasmic.app/projects/PROJECTID"),"."),(0,o.kt)("p",null,"The API token can be found by clicking the ",(0,o.kt)("inlineCode",{parentName:"p"},"Code")," button in the top bar."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"api-token-plasmic",src:a(46070).Z,width:"1192",height:"454"})),(0,o.kt)("p",null,"Now go back to ",(0,o.kt)("inlineCode",{parentName:"p"},".env.local")," and update the corresponding project ID and token fields."),(0,o.kt)("h3",{id:"step-4b-configure-your-plasmic-project-app-host"},"Step 4b: Configure your Plasmic project app host"),(0,o.kt)("p",null,"To tell Plasmic to look for your code components on your dev server, you\u2019ll need to update your project\u2019s app host to ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/plasmic-host"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: At this point, you\u2019ll need to keep your dev server running at ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:3000"),"for the project to load.")),(0,o.kt)("video",{width:"99%",autoPlay:"autoplay",muted:!0,playsInline:!0,controls:!0},(0,o.kt)("source",{src:"/docs/videos/guides/integrations/plasmic/configure-app-host-plasmic-05.mp4",type:"video/mp4",muted:!0,playsInline:!0})),(0,o.kt)("p",null,"After restarting the dev server and Plasmic Studio, you should now be able to make edits across Plasmic Studio and your codebase."),(0,o.kt)("h2",{id:"step-5-create-a-new-page-for-our-pokedex-gallery"},"Step 5: Create a new page for our Pokedex gallery"),(0,o.kt)("p",null,"Let\u2019s make a visual gallery for our Pokemon by using the code components from the code base."),(0,o.kt)("p",null,"Create a new page called ",(0,o.kt)("inlineCode",{parentName:"p"},"Gallery"),", and set a path for this page (",(0,o.kt)("inlineCode",{parentName:"p"},"/gallery"),")."),(0,o.kt)("video",{width:"99%",autoPlay:"autoplay",muted:!0,playsInline:!0,controls:!0},(0,o.kt)("source",{src:"/docs/videos/guides/integrations/plasmic/create-gallery-page-plasmic-06.mp4",type:"video/mp4",muted:!0,playsInline:!0})),(0,o.kt)("p",null,"Insert a ",(0,o.kt)("inlineCode",{parentName:"p"},"SupabaseGrid")," by searching the AddDrawer (by clicking the blue + button)"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"For source see ",(0,o.kt)("inlineCode",{parentName:"p"},"components/CodeComponents/DatabaseComponents.tsx"))),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"add-supabasegrid-plasmic",src:a(17210).Z,width:"683",height:"419"})),(0,o.kt)("p",null,"Then in the right-hand panel, configure the props on ",(0,o.kt)("inlineCode",{parentName:"p"},"SupabaseGrid"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tableName")," should match the table you created in Supabase"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tableColumns")," are a comma-delimited list of columns you want to select from the table"),(0,o.kt)("li",{parentName:"ul"},"We also set the number of columns and spacing shown in the grid")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"set-props-plasmic",src:a(9386).Z,width:"1098",height:"523"})),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"SupabaseGrid")," will loop over the rows from the query."),(0,o.kt)("p",null,"Now customize the repeated content by inserting instances of ",(0,o.kt)("inlineCode",{parentName:"p"},"SupabaseField"),". Select the type of content and a selector string to fetch a single value. In the example below, we use ",(0,o.kt)("inlineCode",{parentName:"p"},"{{row.imageUrl}}")," to retrieve the ",(0,o.kt)("inlineCode",{parentName:"p"},"imageUrl")," column of the row. Apply any styling and layout you want on these elements."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"add-supabasefield-plasmic",src:a(89209).Z,width:"1100",height:"660"})),(0,o.kt)("h3",{id:"putting-it-all-together-video"},"Putting it all together (video)"),(0,o.kt)("p",null,"For your convenience, the following video shows you how to create the page end-to-end."),(0,o.kt)("video",{width:"99%",autoPlay:"autoplay",muted:!0,playsInline:!0,controls:!0},(0,o.kt)("source",{src:"/docs/videos/guides/integrations/plasmic/end-to-end-plasmic-10.mp4",type:"video/mp4",muted:!0,playsInline:!0})),(0,o.kt)("h2",{id:"step-6-check-your-dev-server"},"Step 6: Check your dev server"),(0,o.kt)("p",null,"If you have been running your development server this whole time, you\u2019ll see that we have been automatically fetching and rebuilding your site as you make changes in Plasmic Studio. If you need to restart your dev server, just run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn dev\n")),(0,o.kt)("p",null,"See the results at ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/gallery"),"."),(0,o.kt)("h2",{id:"how-does-this-all-work-under-the-hood"},"How does this all work under the hood?"),(0,o.kt)("h3",{id:"supabasegrid"},"SupabaseGrid"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"SupabaseGrid")," is a code component that was registered in ",(0,o.kt)("inlineCode",{parentName:"p"},"plasmic-init.ts"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"props")," field is used to tell the Plasmic Studio the component prop interface, which allows us to expose these props in the right pane as shown in the screenshots earlier. See the docs for details on ",(0,o.kt)("a",{parentName:"p",href:"https://docs.plasmic.app/learn/registering-code-components/"},"component registration"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'// plasmic-init.ts\n...\n\nPLASMIC.registerComponent(SupabaseGrid, {\n  name: "SupabaseGrid",\n  props: {\n    tableName: "string",\n    tableColumns: "string",\n    queryFilters: "object",\n    children: {\n      type: "slot",\n      defaultValue: {\n        type: "text",\n        value: "Placeholder",\n      },\n    },\n    numColumns: {\n      type: "number",\n      defaultValue: 4,\n    },\n    columnGap: {\n      type: "number",\n      defaultValue: 16,\n    },\n    rowGap: {\n      type: "number",\n      defaultValue: 16,\n    },\n    count: "number",\n    loading: {\n      type: "slot",\n      defaultValue: {\n        type: "text",\n        value: "Loading...",\n      },\n    },\n  },\n  importPath: "./components/CodeComponents/DisplayCollections",\n});\n')),(0,o.kt)("h3",{id:"supabasequery"},"SupabaseQuery"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"SupabaseGrid")," wraps a ",(0,o.kt)("inlineCode",{parentName:"p"},"SupabaseQuery")," component, where we perform the query based on the provided props and store the result in a ",(0,o.kt)("inlineCode",{parentName:"p"},"SupabaseQueryContext"),". This will be used in downstream components to display the data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// supabase-demo/components/CodeComponents/DatabaseComponents.tsx\nexport function SupabaseQuery(props: SupabaseQueryProps) {\n    // These props are set in the Plasmic Studio\n  const { children, tableName, columns, className, filters, single } = props;\n  const [result, setResult] = React.useState<any[] | undefined>(undefined);\n\n...\n\n    // Performs the Supabase query\n      let query = supabase.from(tableName!).select(columns + \",id\");\n      query = applyFilter(query, validFilters, contexts);\n      const { data, error, status } = await (single ? query.single() : query.order('id', { ascending: false }));\n\n      if (error && status !== 406) {\n        throw error;\n      } else if (data) {\n        setResult(data);\n      }\n\n...\n\n    // Save the result in a `SupabaseQueryContext for use with downstream components\n  return (\n    <div className={className}>\n      <SupabaseQueryContext.Provider value={result}>\n        {children}\n      </SupabaseQueryContext.Provider>\n    </div>\n  );\n}\n")),(0,o.kt)("p",null,"Note that this code component is defined in your codebase. Feel free to augment it to expose more powerful querying capabilities to the Plasmic Studio."),(0,o.kt)("h3",{id:"supabasegridcollection"},"SupabaseGridCollection"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"SupabaseGrid")," also nests a ",(0,o.kt)("inlineCode",{parentName:"p"},"SupabaseGridCollection")," under the ",(0,o.kt)("inlineCode",{parentName:"p"},"SupabaseQuery"),". This code component is a simple CSS grid, where we retrieve the Supabase query results from ",(0,o.kt)("inlineCode",{parentName:"p"},"SupabaseQueryContext"),", and iterate over the results. For each row, we populate a ",(0,o.kt)("inlineCode",{parentName:"p"},"RowContext"),", which will be used by the children to read the results of a single row. Note the use of ",(0,o.kt)("inlineCode",{parentName:"p"},"repeatedElement"),", a special convenience function that enables the component\u2019s children to be repeated. In this case, this represents a single card to be shown in the gallery."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// supabase-demo/components/CodeComponents/DisplayCollections.tsx\n\nexport function SupabaseGridCollection(props: SupabaseGridCollectionProps) {\n  const supabaseQuery = React.useContext(SupabaseQueryContext)\n  const {\n    children,\n    columns,\n    columnGap,\n    rowGap,\n    count,\n    className,\n    loading,\n    testLoading,\n  } = props\n\n  const result = supabaseQuery\n  if (!result || testLoading) {\n    return loading\n  }\n\n  return (\n    <div\n      style={{\n        display: 'grid',\n        gridTemplateColumns: `repeat(${columns}, 1fr)`,\n        columnGap: `${columnGap}px`,\n        rowGap: `${rowGap}px`,\n      }}\n      className={className}\n    >\n      {result.slice(0, count).map((row: any, i: any) => (\n        <RowContext.Provider value={row} key={row.id}>\n          <div key={row.id}>{repeatedElement(i === 0, children)}</div>\n        </RowContext.Provider>\n      ))}\n    </div>\n  )\n}\n")),(0,o.kt)("h3",{id:"supabasefield"},"SupabaseField"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"SupabaseField")," will either render a ",(0,o.kt)("inlineCode",{parentName:"p"},"SupabaseTextField")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"SupabaseImgField")," depending on the type. These code components simply read a single value from the contexts and display the data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"// supabase-demo/components/CodeComponents/DisplayCollections.tsx\n\nexport function SupabaseTextField({\n  name,\n  className,\n}: {\n  name?: string\n  className?: string\n}) {\n  const contexts = useAllContexts()\n  if (!name) {\n    return <p>You need to set the name prop</p>\n  }\n  return <div className={className}>{getPropValue(name, contexts)}</div>\n}\n")),(0,o.kt)("p",null,"In summary, by populating state into React contexts, we can store and retrieve data for use in other code components, which can be used for arbitrarily powerful interactions in Plasmic Studio."))}c.isMDXComponent=!0},1351:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/pokedex-export-5d5e56c665de95315083f474b69268c6.csv"},89209:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/add-supabasefield-plasmic-09-685453a708bc4774d7a5f734ce78b67e.png"},17210:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/add-supabasegrid-plasmic-07-3e068516d633ef927a15c8ca1d683e6e.png"},46070:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/api-token-plasmic-05-5223b934f907b4f96b80afa9356efeef.png"},34779:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/application-screenshot-00-8e64eb9e1d323b512deaacff8702256e.png"},33176:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/application-screenshot-03-d47950f9ef3892cc4af41f6c3268aa86.png"},41204:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/clone-project-plasmic-04-be0a93947296b4061ee5c79caa12c021.png"},2293:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/create-project-supabase-01-e13cbf2802794252b9ee405f2082104f.png"},93290:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/create-table-supabase-02-e723f72c62a3993b549fc984286de569.png"},9386:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/set-props-plasmic-08-d74a8fec4eddb5feaac4bdf8da6a2c17.png"}}]);