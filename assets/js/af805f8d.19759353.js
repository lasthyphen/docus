"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[97153],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},76986:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={id:"prisma",title:"Prisma",description:"Connect your Supabase postgres database to your Prisma project."},o=void 0,s={unversionedId:"guides/integrations/prisma",id:"guides/integrations/prisma",title:"Prisma",description:"Connect your Supabase postgres database to your Prisma project.",source:"@site/docs/guides/integrations/prisma.mdx",sourceDirName:"guides/integrations",slug:"/guides/integrations/prisma",permalink:"/docs/guides/integrations/prisma",draft:!1,editUrl:"https://github.com/docs/guides/integrations/prisma.mdx",tags:[],version:"current",frontMatter:{id:"prisma",title:"Prisma",description:"Connect your Supabase postgres database to your Prisma project."}},l={},p=[{value:"Step 1: Get the connection string from Supabase project settings",id:"step-1-get-the-connection-string-from-supabase-project-settings",level:2},{value:"Step 2: Testing the connection",id:"step-2-testing-the-connection",level:2},{value:"Cloning the starter project",id:"cloning-the-starter-project",level:3},{value:"A look at the project\u2019s structure",id:"a-look-at-the-projects-structure",level:3},{value:"Configuring the project to use PostgreSQL",id:"configuring-the-project-to-use-postgresql",level:3},{value:"Connection pooling with Supabase",id:"connection-pooling-with-supabase",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Resources",id:"resources",level:2}],c={toc:p};function u(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide explains how to quickly connect the Postgres database provided by Supabase to a Prisma project."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://prisma.io"},"Prisma")," is an ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/prisma/prisma"},"open source")," next-generation ORM. It consists of the following parts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Prisma Client"),": Auto-generated and type-safe query builder for Node.js & TypeScript."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Prisma Migrate"),": Migration system."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Prisma Studio"),": GUI to view and edit data in your database.")),(0,r.kt)("h2",{id:"step-1-get-the-connection-string-from-supabase-project-settings"},"Step 1: Get the connection string from Supabase project settings"),(0,r.kt)("p",null,"Go to the settings page from the sidebar and navigate to the ",(0,r.kt)("strong",{parentName:"p"},"Database")," tab. You\u2019ll find the database\u2019s connection string with a placeholder for the password you provided when you created the project.\n",(0,r.kt)("img",{alt:"Getting the connection string",src:n(4571).Z,width:"1552",height:"910"})),(0,r.kt)("h2",{id:"step-2-testing-the-connection"},"Step 2: Testing the connection"),(0,r.kt)("p",null,"To make sure that everything works correctly, let\u2019s try the connection string in a Prisma project."),(0,r.kt)("p",null,"If you already have one, all you need to do is set the ",(0,r.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," to the connection string (including the password) in your ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file, and you\u2019re good to go."),(0,r.kt)("p",null,"In case you don\u2019t have a Prisma project or this is your first time working with Prisma, you\u2019re going to use the repo from the ",(0,r.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/getting-started/quickstart"},"quickstart")," guide."),(0,r.kt)("h3",{id:"cloning-the-starter-project"},"Cloning the starter project"),(0,r.kt)("p",null,"Navigate into a directory of your choice and run the following command in your terminal if you\u2019re on a Windows machine:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl https://pris.ly/quickstart -L -o quickstart-main.tar.gz && tar -zxvf quickstart-main.tar.gz quickstart-main/typescript/starter && move quickstart-main\\typescript\\starter starter && rmdir /S /Q quickstart-main && del /Q quickstart-main.tar.gz\n")),(0,r.kt)("p",null,"And if you\u2019re using Mac OS or Linux, run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -L https://pris.ly/quickstart | tar -xz --strip=2 quickstart-main/typescript/starter\n")),(0,r.kt)("p",null,"You can now navigate into the directory and install the project\u2019s dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd starter && npm install\n")),(0,r.kt)("h3",{id:"a-look-at-the-projects-structure"},"A look at the project\u2019s structure"),(0,r.kt)("p",null,"This project comes with TypeScript configured and has the following structure."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"prisma")," directory which contains:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"dev.db")," file: This is a SQLite database."),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"schema.prisma")," file: Where we define the different database models and relations between them."))),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},".env")," file: Contains the ",(0,r.kt)("inlineCode",{parentName:"li"},"DATABASE_URL")," variable, which Prisma will use."),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"script.ts")," file: where we will run some queries using Prisma Client.\nThis starter also comes with the following packages installed:"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@prisma/client"},(0,r.kt)("inlineCode",{parentName:"a"},"@prisma/client")),": An auto-generated and type-safe query builder that\u2019s ",(0,r.kt)("em",{parentName:"li"},"tailored")," to your data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/prisma"},(0,r.kt)("inlineCode",{parentName:"a"},"prisma")),": Prisma\u2019s command-line interface (CLI). It allows you to initialize new project assets, generate Prisma Client, and analyze existing database structures through introspection to automatically create your application models.",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Note: Prisma works with both JavaScript and TypeScript. However, to get the best possible development experience, using TypeScript is highly recommended.")))),(0,r.kt)("h3",{id:"configuring-the-project-to-use-postgresql"},"Configuring the project to use PostgreSQL"),(0,r.kt)("p",null,"Go ahead and delete the ",(0,r.kt)("inlineCode",{parentName:"p"},"prisma/dev.db")," file because we will be switching to PostgreSQL.\nNext, inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"prisma/.env")," file, update the value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"DATABASE_URL")," variable to the connection string you got in ",(0,r.kt)("strong",{parentName:"p"},"step 1"),". The URL might look as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-env"},"# prisma/.env\npostgres://postgres:[YOUR-PASSWORD]@db.vdbnhqozmlzdsaejdxwr.supabase.co:5432/postgres\n")),(0,r.kt)("p",null,"Finally, inside your ",(0,r.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file, change the ",(0,r.kt)("inlineCode",{parentName:"p"},"provider")," from \u201csqlite\u201d to ",(0,r.kt)("inlineCode",{parentName:"p"},"\u201cpostgresql\u201d"),".\nThis is what your ",(0,r.kt)("inlineCode",{parentName:"p"},"schema.prisma")," file should look like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"datasource db {\n  provider = \u201cpostgresql\u201d\n  url      = env(\u201cDATABASE_URL\u201d)\n}\ngenerator client {\n  provider = \u201cprisma-client-js\u201d\n}\nmodel Post {\n  id        Int     @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean @default(false)\n  author    User?   @relation(fields: [authorId], references: [id])\n  authorId  Int?\n}\nmodel User {\n  id    Int     @id @default(autoincrement())\n  email String  @unique\n  name  String?\n  posts Post[]\n}\n")),(0,r.kt)("p",null,"To test that everything works correctly, run the following command to create a migration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"prisma migrate dev --name init\n")),(0,r.kt)("p",null,"You can optionally give your migration a name, depending on the changes you made. Since this is the project\u2019s first migration, you\u2019re setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"--name")," flag to \u201cinit\u201d.\nIf everything works correctly, you should get the following message in your terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Your database is now in sync with your schema.\n:heavy_check_mark: Generated Prisma Client (2.x.x) to ./node_modules/@prisma/client in 111ms\n")),(0,r.kt)("p",null,"This will create a ",(0,r.kt)("inlineCode",{parentName:"p"},"prisma/migrations")," folder inside your ",(0,r.kt)("inlineCode",{parentName:"p"},"prisma")," directory and synchronize your Prisma schema with your database schema."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: if you want to skip the process of creating a migration history, you can use the ",(0,r.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/concepts/components/prisma-migrate/db-push"},(0,r.kt)("inlineCode",{parentName:"a"},"db push"))," command instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"migrate dev"),".\nIf you go to your Supabase project, in the table editor, you should see that two tables have been created, a ",(0,r.kt)("inlineCode",{parentName:"p"},"Post")," and a ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," table.\n",(0,r.kt)("img",{alt:"tables created in the UI",src:n(88137).Z,width:"1552",height:"910"}),"\nThat\u2019s it! You have now successfully connected a Prisma project to a PostgreSQL database hosted on Supabase and ran your first migration.")),(0,r.kt)("h2",{id:"connection-pooling-with-supabase"},"Connection pooling with Supabase"),(0,r.kt)("p",null,"If you\u2019re working in a serverless environment (for example Node.js functions hosted on AWS Lambda, Vercel or Netlify Functions), you need to set up ",(0,r.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/guides/performance-and-optimization/connection-management#serverless-environments-faas"},"connection pooling")," using a tool like ",(0,r.kt)("a",{parentName:"p",href:"https://www.pgbouncer.org/"},"PgBouncer"),". That\u2019s because every function invocation may result in a ",(0,r.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/guides/performance-and-optimization/connection-management#the-serverless-challenge"},"new connection to the database"),". Supabase ",(0,r.kt)("a",{parentName:"p",href:"https://supabase.io/blog/2021/04/02/supabase-pgbouncer#what-is-connection-pooling"},"supports connection management using PgBouncer")," and are enabled by default.\nGo to the ",(0,r.kt)("strong",{parentName:"p"},"Database")," page from the sidebar in the Supabase dashboard and navigate to ",(0,r.kt)("strong",{parentName:"p"},"connection pool")," settings\n",(0,r.kt)("img",{alt:"Connection pool settings",src:n(17483).Z,width:"3104",height:"1974"}),"\nWhen running migrations you need to use the non pooled connection URL (like the one we used in ",(0,r.kt)("strong",{parentName:"p"},"step 1"),"). However, when deploying your app, you\u2019ll use the pooled connection URL and add the ",(0,r.kt)("inlineCode",{parentName:"p"},"?pgbouncer=true")," flag to the PostgreSQL connection URL. To minimize the number of concurrent connections, setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"connection_limit")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," is also recommended. So the URL might look as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-env"},"# prisma/.env\npostgres://postgres:[YOUR-PASSWORD]@db.vdbnhqozmlzdsaejdxwr.supabase.co:6543/postgres?pgbouncer=true&connection_limit=1\n")),(0,r.kt)("p",null,"Prisma Migrate uses database transactions to check out the current state of the database and the migrations table. However, the Migration Engine is designed to use a single connection to the database, and does not support connection pooling with PgBouncer. If you attempt to run Prisma Migrate commands in any environment that uses PgBouncer for connection pooling, you might see the following error:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"Error: undefined: Database error\nError querying the database: db error: ERROR: prepared statement \u201cs0\u201d already exists\n")),(0,r.kt)("p",null,"This is a known issue and it is being worked on, you can follow the progress on this ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/prisma/prisma/issues/6485"},"GitHub issue"),".\nIf you want to learn more about Prisma, check out the ",(0,r.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs"},"docs"),". Also in case you have any questions or run into any issue, feel free to start a discussion in the repo\u2019s ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/prisma/prisma/discussions"},"discussions section"),"."),(0,r.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("p",null,"If you run ",(0,r.kt)("inlineCode",{parentName:"p"},"prisma migrate dev --name init")," multiple times, it sometimes asks if you want to recreate the whole schema. If you chose yes, it will delete the public schema and recreate it. The default grants are missing after this. If you run into this problem, add a helper SQL for fixing the grants:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'CREATE SCHEMA IF NOT EXISTS "auth";\nCREATE SCHEMA IF NOT EXISTS "extensions";\ncreate extension if not exists "uuid-ossp"      with schema extensions;\ncreate extension if not exists pgcrypto         with schema extensions;\ncreate extension if not exists pgjwt            with schema extensions;\n\ngrant usage on schema public to postgres, anon, authenticated, service_role;\ngrant usage on schema extensions to postgres, anon, authenticated, service_role;\nalter user supabase_admin SET search_path TO public, extensions; -- don\'t include the "auth" schema\n\ngrant all privileges on all tables in schema public to postgres, anon, authenticated, service_role, supabase_admin;\ngrant all privileges on all functions in schema public to postgres, anon, authenticated, service_role, supabase_admin;\ngrant all privileges on all sequences in schema public to postgres, anon, authenticated, service_role, supabase_admin;\n\nalter default privileges in schema public grant all on tables to postgres, anon, authenticated, service_role;\nalter default privileges in schema public grant all on functions to postgres, anon, authenticated, service_role;\nalter default privileges in schema public grant all on sequences to postgres, anon, authenticated, service_role;\n\nalter default privileges for user supabase_admin in schema public grant all on sequences to postgres, anon, authenticated, service_role;\nalter default privileges for user supabase_admin in schema public grant all on tables to postgres, anon, authenticated, service_role;\nalter default privileges for user supabase_admin in schema public grant all on functions to postgres, anon, authenticated, service_role;\n\nalter role anon set statement_timeout = \'3s\';\nalter role authenticated set statement_timeout = \'8s\';\n')),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://prisma.io"},"Prisma")," official website."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/prisma/prisma"},"Prisma GitHub"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.prisma.io/docs/"},"Prisma")," documentation.")))}u.isMDXComponent=!0},88137:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/7y4qq4wwvfrheti6r09u-ad8990feb50e7780aadbc9a7be4b74bf.png"},17483:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/w0oowg8vq435ob5c3gf0-a5e6e48b04b945e436a4636fecbbf6c4.png"},4571:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/zntcsh3ic91gf1gy8j73-c8662a0cb8ef924ba79d8a2d9d83018b.png"}}]);