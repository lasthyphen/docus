"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[39105],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=l(n),y=a,f=u["".concat(i,".").concat(y)]||u[y]||d[y]||s;return n?r.createElement(f,p(p({ref:t},c),{},{components:n})):r.createElement(f,p({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,p=new Array(s);p[0]=y;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[u]="string"==typeof e?e:a,p[1]=o;for(var l=2;l<s;l++)p[l]=n[l];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},50053:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const s={id:"typescript-support",title:"Typescript Support"},p=void 0,o={unversionedId:"typescript-support",id:"typescript-support",title:"Typescript Support",description:"supabase-js supports Typescript.",source:"@site/_supabase_js/typescript-support.mdx",sourceDirName:".",slug:"/typescript-support",permalink:"/docs/reference/javascript/typescript-support",draft:!1,editUrl:"https://github.com/_supabase_js/typescript-support.mdx",tags:[],version:"current",frontMatter:{id:"typescript-support",title:"Typescript Support"}},i={},l=[{value:"Generating types",id:"generating-types",level:2},{value:"Injecting type definitions",id:"injecting-type-definitions",level:2},{value:"Type hints",id:"type-hints",level:2},{value:"Nested tables",id:"nested-tables",level:2}],c={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"supabase-js")," supports Typescript."),(0,a.kt)("h2",{id:"generating-types"},"Generating types"),(0,a.kt)("p",null,"You can use our CLI to generate types:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"supabase start\nsupabase gen types typescript --local > lib/database.types.ts\n")),(0,a.kt)("p",null,"These types are generated directly from your database. Given a table ",(0,a.kt)("inlineCode",{parentName:"p"},"public.movies"),", the definition will provide the following data:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"hello.ts","hello.ts":!0},'interface Database {\n  public: {\n    Tables: {\n      movies: {\n        Row: {} // The data expected to be returned from a "select" statement.\n        Insert: {} // The data expected passed to an "insert" statement.\n        Update: {} // The data expected passed to an "update" statement.\n      }\n    }\n  }\n}\n')),(0,a.kt)("p",null,"There is a difference between ",(0,a.kt)("inlineCode",{parentName:"p"},"selects"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"inserts"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"updates"),', because often you will set default values in your database for specific columns.\nWith default values you do not need to send any data over the network, even if that column is a "required" field. Our type system is granular\nenough to handle these situations.'),(0,a.kt)("h2",{id:"injecting-type-definitions"},"Injecting type definitions"),(0,a.kt)("p",null,"You can enrich the supabase client with the types you generated with Supabase."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { createClient } from '@supabase/supabase-js'\nimport { Database } from 'lib/database.types'\n\nconst supabase = createClient<Database>(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY)\n")),(0,a.kt)("h2",{id:"type-hints"},"Type hints"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"supabase-js")," always returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," object (for success), and an ",(0,a.kt)("inlineCode",{parentName:"p"},"error")," response (for unsuccessful requests).\nThis provides a simple interface to get the relevant types returned from any function:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export async function getMovies() {\n  return await supabase.from('movies').select(`id, title`)\n}\n\ntype MoviesResponse = Awaited<ReturnType<typeof getMovies>>\nexport type MoviesResponseSuccess = MoviesResponse['data']\nexport type MoviesResponseError = MoviesResponse['error']\n")),(0,a.kt)("h2",{id:"nested-tables"},"Nested tables"),(0,a.kt)("p",null,"For advanced queries such as nested tables, you may want to construct your own types."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import supabase from '~/lib/supabase'\nimport type { Database } from '~/lib/database.types'\n\nasync function getMovies() {\n  return await supabase.from('movies').select('id, title, actors(*)')\n}\n\ntype Actors = Database['public']['Tables']['actors']['Row']\ntype MoviesResponse = Awaited<ReturnType<typeof getMovies>>\ntype MoviesResponseSuccess = MoviesResponse['data'] & {\n  actors: Actors[]\n}\n")))}u.isMDXComponent=!0}}]);