"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[34875],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(n),g=r,m=p["".concat(l,".").concat(g)]||p[g]||d[g]||i;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(86010);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>g});var a=n(87462),r=n(67294),i=n(86010),o=n(72389),s=n(67392),l=n(7094),u=n(12466);const c="tabList__CuJ",p="tabItem_LNqP";function d(e){const{lazy:t,block:n,defaultValue:o,values:d,groupId:g,className:m}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=d??h.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),k=(0,s.l)(f,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===o?o:o??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==b&&!f.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:w}=(0,l.U)(),[y,S]=(0,r.useState)(b),_=[],{blockElementScrollPositionUntilNextRender:x}=(0,u.o5)();if(null!=g){const e=v[g];null!=e&&e!==y&&f.some((t=>t.value===e))&&S(e)}const N=e=>{const t=e.currentTarget,n=_.indexOf(t),a=f[n].value;a!==y&&(x(t),S(a),null!=g&&w(g,String(a)))},C=e=>{let t=null;switch(e.key){case"Enter":N(e);break;case"ArrowRight":{const n=_.indexOf(e.currentTarget)+1;t=_[n]??_[0];break}case"ArrowLeft":{const n=_.indexOf(e.currentTarget)-1;t=_[n]??_[_.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,i.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},m)},f.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,key:t,ref:e=>_.push(e),onKeyDown:C,onClick:N},o,{className:(0,i.Z)("tabs__item",p,o?.className,{"tabs__item--active":y===t})}),n??t)}))),t?(0,r.cloneElement)(h.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==y})))))}function g(e){const t=(0,o.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},66788:(e,t,n)=>{n.d(t,{ZP:()=>c});var a=n(87462),r=(n(67294),n(3905)),i=n(65488),o=n(85162);const s={toc:[]};function l(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- Create a table for public profiles\ncreate table profiles (\n  id uuid references auth.users not null primary key,\n  updated_at timestamp with time zone,\n  username text unique,\n  full_name text,\n  avatar_url text,\n  website text,\n\n  constraint username_length check (char_length(username) >= 3)\n);\n-- Set up Row Level Security (RLS)\n-- See https://supabase.com/docs/guides/auth/row-level-security for more details.\nalter table profiles\n  enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles\n  for select using (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles\n  for insert with check (auth.uid() = id);\n\ncreate policy \"Users can update own profile.\" on profiles\n  for update using (auth.uid() = id);\n\n-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.\n-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.\ncreate function public.handle_new_user()\nreturns trigger as $$\nbegin\n  insert into public.profiles (id, full_name, avatar_url)\n  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');\n  return new;\nend;\n$$ language plpgsql security definer;\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\n  values ('avatars', 'avatars');\n\n-- Set up access controls for storage.\n-- See https://supabase.com/docs/guides/storage#policy-examples for more details.\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects\n  for select using (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects\n  for insert with check (bucket_id = 'avatars');\n\ncreate policy \"Anyone can update their own avatar.\" on storage.objects\n  for update using (auth.uid() = owner) with check (bucket_id = 'avatars');\n")))}l.isMDXComponent=!0;const u={toc:[{value:"Project set up",id:"project-set-up",level:2},{value:"Create a project",id:"create-a-project",level:3},{value:"Set up the database schema",id:"set-up-the-database-schema",level:3},{value:"Get the API Keys",id:"get-the-api-keys",level:3}]};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"project-set-up"},"Project set up"),(0,r.kt)("p",null,'Before we start building we\'re going to set up our Database and API. This is as simple as starting a new Project in Supabase\nand then creating a "schema" inside the database.'),(0,r.kt)("h3",{id:"create-a-project"},"Create a project"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Go to ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com"},"app.supabase.com"),"."),(0,r.kt)("li",{parentName:"ol"},'Click on "New Project".'),(0,r.kt)("li",{parentName:"ol"},"Enter your project details."),(0,r.kt)("li",{parentName:"ol"},"Wait for the new database to launch.")),(0,r.kt)("h3",{id:"set-up-the-database-schema"},"Set up the database schema"),(0,r.kt)("p",null,'Now we are going to set up the database schema. We can use the "User Management Starter" quickstart in the SQL Editor,\nor you can just copy/paste the SQL from below and run it yourself.'),(0,r.kt)(i.Z,{groupId:"language",defaultValue:"dashboard",values:[{label:"Dashboard",value:"dashboard"},{label:"SQL",value:"sql"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"dashboard",mdxType:"TabItem"},(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Go to the ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/sql"},"SQL Editor")," page in the Dashboard."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"User Management Starter"),"."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"Run"),".")),(0,r.kt)("video",{width:"99%",muted:!0,playsInline:!0,controls:"true"},(0,r.kt)("source",{src:"/docs/videos/sql-user-management-starter.mp4",type:"video/mp4",muted:!0,playsInline:!0}))),(0,r.kt)(o.Z,{value:"sql",mdxType:"TabItem"},(0,r.kt)(l,{mdxType:"UserManagementSQLTemplate"}))),(0,r.kt)("h3",{id:"get-the-api-keys"},"Get the API Keys"),(0,r.kt)("p",null,"Now that you've created some database tables, you are ready to insert data using the auto-generated API.\nWe just need to get the URL and ",(0,r.kt)("inlineCode",{parentName:"p"},"anon")," key from the API settings."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Go to the ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/settings"},"Settings")," page in the Dashboard."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"API")," in the sidebar."),(0,r.kt)("li",{parentName:"ol"},"Find your API ",(0,r.kt)("inlineCode",{parentName:"li"},"URL"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"anon"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"service_role")," keys on this page.")),(0,r.kt)("video",{width:"99%",muted:!0,playsInline:!0,controls:"true"},(0,r.kt)("source",{src:"/docs/videos/api/api-url-and-key.mp4",type:"video/mp4",muted:!0,playsInline:!0})))}c.isMDXComponent=!0},27021:(e,t,n)=>{n.d(t,{ZP:()=>o});var a=n(87462),r=(n(67294),n(3905));const i={toc:[{value:"Intro",id:"intro",level:2}]};function o(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"intro"},"Intro"),(0,r.kt)("p",null,"This example provides the steps to build a basic user management app. It includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Supabase ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/database"},"Database"),": a Postgres database for storing your user data."),(0,r.kt)("li",{parentName:"ul"},"Supabase ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/auth"},"Auth"),": users can sign in with magic links (no passwords, only email)."),(0,r.kt)("li",{parentName:"ul"},"Supabase ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/storage"},"Storage"),": users can upload a photo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/guides/auth#row-level-security"},"Row Level Security"),": data is protected so that individuals can only access their own data."),(0,r.kt)("li",{parentName:"ul"},"Instant ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/api"},"APIs"),": APIs will be automatically generated when you create your database tables.")),(0,r.kt)("p",null,"By the end of this guide you'll have an app which allows users to login and update some basic profile details:"))}o.isMDXComponent=!0},95713:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var a=n(87462),r=(n(67294),n(3905)),i=(n(65488),n(85162),n(27021)),o=n(66788);const s={id:"with-flutter",title:"Quickstart: Flutter",description:"Learn how to use Supabase in your Flutter App.",sidebar_label:"Flutter"},l=void 0,u={unversionedId:"guides/with-flutter",id:"guides/with-flutter",title:"Quickstart: Flutter",description:"Learn how to use Supabase in your Flutter App.",source:"@site/docs/guides/with-flutter.mdx",sourceDirName:"guides",slug:"/guides/with-flutter",permalink:"/docs/guides/with-flutter",draft:!1,editUrl:"https://github.com/docs/guides/with-flutter.mdx",tags:[],version:"current",frontMatter:{id:"with-flutter",title:"Quickstart: Flutter",description:"Learn how to use Supabase in your Flutter App.",sidebar_label:"Flutter"}},c={},p=[{value:"GitHub",id:"github",level:3},{value:"Building the App",id:"building-the-app",level:2},{value:"Initialize a Flutter app",id:"initialize-a-flutter-app",level:3},{value:"Setup deep links",id:"setup-deep-links",level:3},{value:"Main function",id:"main-function",level:3},{value:"Setting up some constants and handy functions",id:"setting-up-some-constants-and-handy-functions",level:3},{value:"Set up Splash Screen",id:"set-up-splash-screen",level:3},{value:"Set up a Login page",id:"set-up-a-login-page",level:3},{value:"Set up Account page",id:"set-up-account-page",level:3},{value:"Launch!",id:"launch",level:3},{value:"Bonus: Profile photos",id:"bonus-profile-photos",level:2},{value:"Making sure we have a public bucket",id:"making-sure-we-have-a-public-bucket",level:3},{value:"Adding image uploading feature to Account page",id:"adding-image-uploading-feature-to-account-page",level:3},{value:"Create an upload widget",id:"create-an-upload-widget",level:3},{value:"Add the new widget",id:"add-the-new-widget",level:3},{value:"See also",id:"see-also",level:2}],d={toc:p};function g(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(i.ZP,{mdxType:"QuickstartIntro"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Supabase User Management example",src:n(93434).Z,width:"1382",height:"852"})),(0,r.kt)("h3",{id:"github"},"GitHub"),(0,r.kt)("p",null,"Should you get stuck while working through the guide, refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/supabase/supabase/tree/master/examples/user-management/flutter-user-management"},"this repo"),"."),(0,r.kt)(o.ZP,{mdxType:"ProjectSetup"}),(0,r.kt)("h2",{id:"building-the-app"},"Building the App"),(0,r.kt)("p",null,"Let's start building the Flutter app from scratch."),(0,r.kt)("h3",{id:"initialize-a-flutter-app"},"Initialize a Flutter app"),(0,r.kt)("p",null,"We can use ",(0,r.kt)("a",{parentName:"p",href:"https://flutter.dev/docs/get-started/test-drive"},(0,r.kt)("inlineCode",{parentName:"a"},"flutter create"))," to initialize\nan app called ",(0,r.kt)("inlineCode",{parentName:"p"},"supabase_quickstart"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"flutter create supabase_quickstart\n")),(0,r.kt)("p",null,"Then let's install the only additional dependency: ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/packages/supabase_flutter"},(0,r.kt)("inlineCode",{parentName:"a"},"supabase_flutter"))),(0,r.kt)("p",null,"Copy and paste the following line in your pubspec.yaml to install the package:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"supabase_flutter: ^1.0.0\n")),(0,r.kt)("p",null,"Run ",(0,r.kt)("inlineCode",{parentName:"p"},"flutter pub get")," to install the dependencies."),(0,r.kt)("h3",{id:"setup-deep-links"},"Setup deep links"),(0,r.kt)("p",null,"Now that we have the dependencies installed let's setup deep links so users who have logged in via magic link or OAuth can come back to the app."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'1. Go to the "Authentication" section.\n2. Click "Settings" in the sidebar.\n3. Type `io.supabase.flutterquickstart://login-callback/` in the Additional Redirect URLs input field.\n4. Hit save.\n')),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Supabase console deep link setting",src:n(88900).Z,width:"2656",height:"802"})),(0,r.kt)("p",null,"That is it on Supabase's end and the rest are platform specific settings:"),(0,r.kt)("p",null,"For Android, add an intent-filter to enable deep linking:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="android/app/src/main/AndroidManifest.xml"',title:'"android/app/src/main/AndroidManifest.xml"'},'<manifest ...>\n  \x3c!-- ... other tags --\x3e\n  <application ...>\n    <activity ...>\n      \x3c!-- ... other tags --\x3e\n\n      \x3c!-- Add this intent-filter for Deep Links --\x3e\n      <intent-filter>\n        <action android:name="android.intent.action.VIEW" />\n        <category android:name="android.intent.category.DEFAULT" />\n        <category android:name="android.intent.category.BROWSABLE" />\n        \x3c!-- Accepts URIs that begin with YOUR_SCHEME://YOUR_HOST --\x3e\n        <data\n          android:scheme="io.supabase.flutterquickstart"\n          android:host="login-callback" />\n      </intent-filter>\n\n    </activity>\n  </application>\n</manifest>\n')),(0,r.kt)("p",null,"For iOS add CFBundleURLTypes to enable deep linking:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:'title="ios/Runner/Info.plist"',title:'"ios/Runner/Info.plist"'},"\x3c!-- ... other tags --\x3e\n<plist>\n<dict>\n  \x3c!-- ... other tags --\x3e\n\n  \x3c!-- Add this array for Deep Links --\x3e\n  <key>CFBundleURLTypes</key>\n  <array>\n    <dict>\n      <key>CFBundleTypeRole</key>\n      <string>Editor</string>\n      <key>CFBundleURLSchemes</key>\n      <array>\n        <string>io.supabase.flutterquickstart</string>\n      </array>\n    </dict>\n  </array>\n  \x3c!-- ... other tags --\x3e\n</dict>\n</plist>\n")),(0,r.kt)("p",null,"For web:"),(0,r.kt)("p",null,"There are no additional configurations."),(0,r.kt)("h3",{id:"main-function"},"Main function"),(0,r.kt)("p",null,"Now that we have deep links ready let's initialize the Supabase client inside our ",(0,r.kt)("inlineCode",{parentName:"p"},"main")," function with the API credentials that you copied ",(0,r.kt)("a",{parentName:"p",href:"#get-the-api-keys"},"earlier"),".\nThese variables will be exposed on the app, and that's completely fine since we have\n",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/auth#row-level-security"},"Row Level Security")," enabled on our Database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="lib/main.dart"',title:'"lib/main.dart"'},"Future<void> main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  await Supabase.initialize(\n    url: 'YOUR_SUPABASE_URL',\n    anonKey: 'YOUR_SUPABASE_ANON_KEY',\n  );\n  runApp(MyApp());\n}\n")),(0,r.kt)("h3",{id:"setting-up-some-constants-and-handy-functions"},"Setting up some constants and handy functions"),(0,r.kt)("p",null,"Let's also create a constant file to make it easier to use Supabase client.\nWe will also include an extension method declaration to call ",(0,r.kt)("inlineCode",{parentName:"p"},"showSnackBar")," with one line of code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="lib/constants.dart"',title:'"lib/constants.dart"'},"import 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nfinal supabase = Supabase.instance.client;\n\nextension ShowSnackBar on BuildContext {\n  void showSnackBar({\n    required String message,\n    Color backgroundColor = Colors.white,\n  }) {\n    ScaffoldMessenger.of(this).showSnackBar(SnackBar(\n      content: Text(message),\n      backgroundColor: backgroundColor,\n    ));\n  }\n\n  void showErrorSnackBar({required String message}) {\n    showSnackBar(message: message, backgroundColor: Colors.red);\n  }\n}\n")),(0,r.kt)("h3",{id:"set-up-splash-screen"},"Set up Splash Screen"),(0,r.kt)("p",null,"Let's create a splash screen that will be shown to users right after they open the app.\nThis screen retrieves the current session and redirects the user accordingly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="lib/pages/splash_page.dart"',title:'"lib/pages/splash_page.dart"'},"import 'package:flutter/material.dart';\nimport 'package:supabase_quickstart/constants.dart';\n\nclass SplashPage extends StatefulWidget {\n  const SplashPage({super.key});\n\n  @override\n  _SplashPageState createState() => _SplashPageState();\n}\n\nclass _SplashPageState extends State<SplashPage> {\n  bool _redicrectCalled = false;\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    _redirect();\n  }\n\n  Future<void> _redirect() async {\n    await Future.delayed(Duration.zero);\n    if (_redicrectCalled || !mounted) {\n      return;\n    }\n\n    _redicrectCalled = true;\n    final session = supabase.auth.currentSession;\n    if (session != null) {\n      Navigator.of(context).pushReplacementNamed('/account');\n    } else {\n      Navigator.of(context).pushReplacementNamed('/login');\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return const Scaffold(\n      body: Center(child: CircularProgressIndicator()),\n    );\n  }\n}\n\n")),(0,r.kt)("h3",{id:"set-up-a-login-page"},"Set up a Login page"),(0,r.kt)("p",null,"Let's create a Flutter widget to manage logins and sign ups.\nWe'll use Magic Links, so users can sign in with their email without using passwords.\nNotice that this page sets up a listener on the user's auth state using ",(0,r.kt)("inlineCode",{parentName:"p"},"onAuthStateChange"),".\nA new event will fire when the user comes back to the app by clicking their magic link, which this page can catch and redirect the user accordingly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="lib/pages/login_page.dart"',title:'"lib/pages/login_page.dart"'},"import 'dart:async';\n\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nimport 'package:supabase_quickstart/constants.dart';\n\nclass LoginPage extends StatefulWidget {\n  const LoginPage({super.key});\n\n  @override\n  _LoginPageState createState() => _LoginPageState();\n}\n\nclass _LoginPageState extends State<LoginPage> {\n  bool _isLoading = false;\n  bool _redirecting = false;\n  late final TextEditingController _emailController;\n  late final StreamSubscription<AuthState> _authStateSubscription;\n\n  Future<void> _signIn() async {\n    setState(() {\n      _isLoading = true;\n    });\n    try {\n      await supabase.auth.signInWithOtp(\n        email: _emailController.text,\n        emailRedirectTo:\n            kIsWeb ? null : 'io.supabase.flutterquickstart://login-callback/',\n      );\n      if (mounted) {\n        context.showSnackBar(message: 'Check your email for login link!');\n        _emailController.clear();\n      }\n    } on AuthException catch (error) {\n      context.showErrorSnackBar(message: error.message);\n    } catch (error) {\n      context.showErrorSnackBar(message: 'Unexpected error occured');\n    }\n\n    setState(() {\n      _isLoading = false;\n    });\n  }\n\n  @override\n  void initState() {\n    _emailController = TextEditingController();\n    _authStateSubscription = supabase.auth.onAuthStateChange.listen((data) {\n      if (_redirecting) return;\n      final session = data.session;\n      if (session != null) {\n        _redirecting = true;\n        Navigator.of(context).pushReplacementNamed('/account');\n      }\n    });\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    _emailController.dispose();\n    _authStateSubscription.cancel();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Sign In')),\n      body: ListView(\n        padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 12),\n        children: [\n          const Text('Sign in via the magic link with your email below'),\n          const SizedBox(height: 18),\n          TextFormField(\n            controller: _emailController,\n            decoration: const InputDecoration(labelText: 'Email'),\n          ),\n          const SizedBox(height: 18),\n          ElevatedButton(\n            onPressed: _isLoading ? null : _signIn,\n            child: Text(_isLoading ? 'Loading' : 'Send Magic Link'),\n          ),\n        ],\n      ),\n    );\n  }\n}\n")),(0,r.kt)("h3",{id:"set-up-account-page"},"Set up Account page"),(0,r.kt)("p",null,"After a user is signed in we can allow them to edit their profile details and manage their account.\nLet's create a new widget called ",(0,r.kt)("inlineCode",{parentName:"p"},"account_page.dart")," for that."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="lib/pages/account_page.dart"',title:'"lib/pages/account_page.dart"'},"import 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:supabase_quickstart/components/avatar.dart';\nimport 'package:supabase_quickstart/constants.dart';\n\nclass AccountPage extends StatefulWidget {\n  const AccountPage({super.key});\n\n  @override\n  _AccountPageState createState() => _AccountPageState();\n}\n\nclass _AccountPageState extends State<AccountPage> {\n  final _usernameController = TextEditingController();\n  final _websiteController = TextEditingController();\n  String? _avatarUrl;\n  var _loading = false;\n\n  /// Called once a user id is received within `onAuthenticated()`\n  Future<void> _getProfile() async {\n    setState(() {\n      _loading = true;\n    });\n\n    try {\n      final userId = supabase.auth.currentUser!.id;\n      final data = await supabase\n          .from('profiles')\n          .select()\n          .eq('id', userId)\n          .single() as Map;\n      _usernameController.text = (data['username'] ?? '') as String;\n      _websiteController.text = (data['website'] ?? '') as String;\n      _avatarUrl = (data['avatar_url'] ?? '') as String;\n    } on PostgrestException catch (error) {\n      context.showErrorSnackBar(message: error.message);\n    } catch (error) {\n      context.showErrorSnackBar(message: 'Unexpected exception occured');\n    }\n\n    setState(() {\n      _loading = false;\n    });\n  }\n\n  /// Called when user taps `Update` button\n  Future<void> _updateProfile() async {\n    setState(() {\n      _loading = true;\n    });\n    final userName = _usernameController.text;\n    final website = _websiteController.text;\n    final user = supabase.auth.currentUser;\n    final updates = {\n      'id': user!.id,\n      'username': userName,\n      'website': website,\n      'updated_at': DateTime.now().toIso8601String(),\n    };\n    try {\n      await supabase.from('profiles').upsert(updates);\n      if (mounted) {\n        context.showSnackBar(message: 'Successfully updated profile!');\n      }\n    } on PostgrestException catch (error) {\n      context.showErrorSnackBar(message: error.message);\n    } catch (error) {\n      context.showErrorSnackBar(message: 'Unexpeted error occured');\n    }\n    setState(() {\n      _loading = false;\n    });\n  }\n\n  Future<void> _signOut() async {\n    try {\n      await supabase.auth.signOut();\n    } on AuthException catch (error) {\n      context.showErrorSnackBar(message: error.message);\n    } catch (error) {\n      context.showErrorSnackBar(message: 'Unexpected error occured');\n    }\n    if (mounted) {\n      Navigator.of(context).pushReplacementNamed('/');\n    }\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _getProfile();\n  }\n\n  @override\n  void dispose() {\n    _usernameController.dispose();\n    _websiteController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Profile')),\n      body: ListView(\n        padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 12),\n        children: [\n          TextFormField(\n            controller: _usernameController,\n            decoration: const InputDecoration(labelText: 'User Name'),\n          ),\n          const SizedBox(height: 18),\n          TextFormField(\n            controller: _websiteController,\n            decoration: const InputDecoration(labelText: 'Website'),\n          ),\n          const SizedBox(height: 18),\n          ElevatedButton(\n            onPressed: _updateProfile,\n            child: Text(_loading ? 'Saving...' : 'Update'),\n          ),\n          const SizedBox(height: 18),\n          TextButton(onPressed: _signOut, child: const Text('Sign Out')),\n        ],\n      ),\n    );\n  }\n}\n")),(0,r.kt)("h3",{id:"launch"},"Launch!"),(0,r.kt)("p",null,"Now that we have all the components in place, let's update ",(0,r.kt)("inlineCode",{parentName:"p"},"lib/main.dart"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="lib/main.dart"',title:'"lib/main.dart"'},"import 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:supabase_quickstart/pages/account_page.dart';\nimport 'package:supabase_quickstart/pages/login_page.dart';\nimport 'package:supabase_quickstart/pages/splash_page.dart';\n\nFuture<void> main() async {\n  await Supabase.initialize(\n    // TODO: Replace credentials with your own\n    url: 'YOUR_SUPABASE_URL',\n    anonKey: 'YOUR_SUPABASE_ANON_KEY',\n  );\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Supabase Flutter',\n      theme: ThemeData.dark().copyWith(\n        primaryColor: Colors.green,\n        textButtonTheme: TextButtonThemeData(\n          style: TextButton.styleFrom(\n            foregroundColor: Colors.green,\n          ),\n        ),\n        elevatedButtonTheme: ElevatedButtonThemeData(\n          style: ElevatedButton.styleFrom(\n            foregroundColor: Colors.white,\n            backgroundColor: Colors.green,\n          ),\n        ),\n      ),\n      initialRoute: '/',\n      routes: <String, WidgetBuilder>{\n        '/': (_) => const SplashPage(),\n        '/login': (_) => const LoginPage(),\n        '/account': (_) => const AccountPage(),\n      },\n    );\n  }\n}\n")),(0,r.kt)("p",null,"Once that's done, run this in a terminal window to launch on Android or iOS:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"flutter run\n")),(0,r.kt)("p",null,"Or for web, run the following command to launch it on ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost:3000")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"flutter run -d web-server --web-hostname localhost --web-port 3000\n")),(0,r.kt)("p",null,"And then open the browser to ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:3000"},"localhost:3000")," and you should see the completed app."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Supabase User Management example",src:n(6949).Z,width:"1382",height:"852"})),(0,r.kt)("h2",{id:"bonus-profile-photos"},"Bonus: Profile photos"),(0,r.kt)("p",null,"Every Supabase project is configured with ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/storage"},"Storage")," for managing large files like\nphotos and videos."),(0,r.kt)("h3",{id:"making-sure-we-have-a-public-bucket"},"Making sure we have a public bucket"),(0,r.kt)("p",null,"We will be storing the image as a publicly sharable image.\nMake sure your ",(0,r.kt)("inlineCode",{parentName:"p"},"avatars")," bucket is set to public, and if it is not, change the publicity by clicking the dot menu that appears when you hover over the bucket name.\nYou should see an orange ",(0,r.kt)("inlineCode",{parentName:"p"},"Public")," badge next to your bucket name if your bucket is set to public."),(0,r.kt)("h3",{id:"adding-image-uploading-feature-to-account-page"},"Adding image uploading feature to Account page"),(0,r.kt)("p",null,"We will use ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/packages/image_picker"},(0,r.kt)("inlineCode",{parentName:"a"},"image_picker"))," plugin to select an image from the device."),(0,r.kt)("p",null,"Add the following line in your pubspec.yaml file to install ",(0,r.kt)("inlineCode",{parentName:"p"},"image_picker"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"image_picker: ^0.8.4\n")),(0,r.kt)("p",null,"Using ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/packages/image_picker"},(0,r.kt)("inlineCode",{parentName:"a"},"image_picker"))," requires some additional preparation depending on the platform.\nFollow the instruction on README.md of ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/packages/image_picker"},(0,r.kt)("inlineCode",{parentName:"a"},"image_picker"))," on how to set it up for the platform you are using."),(0,r.kt)("p",null,"Once you are done with all of the above, it is time to dive into coding."),(0,r.kt)("h3",{id:"create-an-upload-widget"},"Create an upload widget"),(0,r.kt)("p",null,"Let's create an avatar for the user so that they can upload a profile photo.\nWe can start by creating a new component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="lib/components/avatar.dart"',title:'"lib/components/avatar.dart"'},"import 'package:flutter/material.dart';\nimport 'package:image_picker/image_picker.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:supabase_quickstart/constants.dart';\n\nclass Avatar extends StatefulWidget {\n  const Avatar({\n    super.key,\n    required this.imageUrl,\n    required this.onUpload,\n  });\n\n  final String? imageUrl;\n  final void Function(String) onUpload;\n\n  @override\n  _AvatarState createState() => _AvatarState();\n}\n\nclass _AvatarState extends State<Avatar> {\n  bool _isLoading = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        if (widget.imageUrl == null || widget.imageUrl!.isEmpty)\n          Container(\n            width: 150,\n            height: 150,\n            color: Colors.grey,\n            child: const Center(\n              child: Text('No Image'),\n            ),\n          )\n        else\n          Image.network(\n            widget.imageUrl!,\n            width: 150,\n            height: 150,\n            fit: BoxFit.cover,\n          ),\n        ElevatedButton(\n          onPressed: _isLoading ? null : _upload,\n          child: const Text('Upload'),\n        ),\n      ],\n    );\n  }\n\n  Future<void> _upload() async {\n    final picker = ImagePicker();\n    final imageFile = await picker.pickImage(\n      source: ImageSource.gallery,\n      maxWidth: 300,\n      maxHeight: 300,\n    );\n    if (imageFile == null) {\n      return;\n    }\n    setState(() => _isLoading = true);\n\n    try {\n      final bytes = await imageFile.readAsBytes();\n      final fileExt = imageFile.path.split('.').last;\n      final fileName = '${DateTime.now().toIso8601String()}.$fileExt';\n      final filePath = fileName;\n      await supabase.storage.from('avatars').uploadBinary(\n            filePath,\n            bytes,\n            fileOptions: FileOptions(contentType: imageFile.mimeType),\n          );\n      final imageUrlResponse = await supabase.storage\n          .from('avatars')\n          .createSignedUrl(filePath, 60 * 60 * 24 * 365 * 10);\n      widget.onUpload(imageUrlResponse);\n    } on StorageException catch (error) {\n      if (mounted) {\n        context.showErrorSnackBar(message: error.message);\n      }\n    } catch (error) {\n      if (mounted) {\n        context.showErrorSnackBar(message: 'Unexpected error occured');\n      }\n    }\n\n    setState(() => _isLoading = false);\n  }\n}\n")),(0,r.kt)("h3",{id:"add-the-new-widget"},"Add the new widget"),(0,r.kt)("p",null,"And then we can add the widget to the Account page as well as some logic to update the ",(0,r.kt)("inlineCode",{parentName:"p"},"avatar_url")," whenever the user uploads a new avatar."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:'title="lib/pages/account_page.dart"',title:'"lib/pages/account_page.dart"'},"import 'package:flutter/material.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\nimport 'package:supabase_quickstart/components/avatar.dart';\nimport 'package:supabase_quickstart/constants.dart';\n\nclass AccountPage extends StatefulWidget {\n  const AccountPage({super.key});\n\n  @override\n  _AccountPageState createState() => _AccountPageState();\n}\n\nclass _AccountPageState extends State<AccountPage> {\n  final _usernameController = TextEditingController();\n  final _websiteController = TextEditingController();\n  String? _avatarUrl;\n  var _loading = false;\n\n  /// Called once a user id is received within `onAuthenticated()`\n  Future<void> _getProfile() async {\n    setState(() {\n      _loading = true;\n    });\n\n    try {\n      final userId = supabase.auth.currentUser!.id;\n      final data = await supabase\n          .from('profiles')\n          .select()\n          .eq('id', userId)\n          .single() as Map;\n      _usernameController.text = (data['username'] ?? '') as String;\n      _websiteController.text = (data['website'] ?? '') as String;\n      _avatarUrl = (data['avatar_url'] ?? '') as String;\n    } on PostgrestException catch (error) {\n      context.showErrorSnackBar(message: error.message);\n    } catch (error) {\n      context.showErrorSnackBar(message: 'Unexpected exception occured');\n    }\n\n    setState(() {\n      _loading = false;\n    });\n  }\n\n  /// Called when user taps `Update` button\n  Future<void> _updateProfile() async {\n    setState(() {\n      _loading = true;\n    });\n    final userName = _usernameController.text;\n    final website = _websiteController.text;\n    final user = supabase.auth.currentUser;\n    final updates = {\n      'id': user!.id,\n      'username': userName,\n      'website': website,\n      'updated_at': DateTime.now().toIso8601String(),\n    };\n    try {\n      await supabase.from('profiles').upsert(updates);\n      if (mounted) {\n        context.showSnackBar(message: 'Successfully updated profile!');\n      }\n    } on PostgrestException catch (error) {\n      context.showErrorSnackBar(message: error.message);\n    } catch (error) {\n      context.showErrorSnackBar(message: 'Unexpeted error occured');\n    }\n    setState(() {\n      _loading = false;\n    });\n  }\n\n  Future<void> _signOut() async {\n    try {\n      await supabase.auth.signOut();\n    } on AuthException catch (error) {\n      context.showErrorSnackBar(message: error.message);\n    } catch (error) {\n      context.showErrorSnackBar(message: 'Unexpected error occured');\n    }\n    if (mounted) {\n      Navigator.of(context).pushReplacementNamed('/');\n    }\n  }\n\n  /// Called when image has been uploaded to Supabase storage from within Avatar widget\n  Future<void> _onUpload(String imageUrl) async {\n    try {\n      final userId = supabase.auth.currentUser!.id;\n      await supabase.from('profiles').upsert({\n        'id': userId,\n        'avatar_url': imageUrl,\n      });\n      if (mounted) {\n        context.showSnackBar(message: 'Updated your profile image!');\n      }\n    } on PostgrestException catch (error) {\n      context.showErrorSnackBar(message: error.message);\n    } catch (error) {\n      context.showErrorSnackBar(message: 'Unexpected error has occured');\n    }\n    if (!mounted) {\n      return;\n    }\n\n    setState(() {\n      _avatarUrl = imageUrl;\n    });\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _getProfile();\n  }\n\n  @override\n  void dispose() {\n    _usernameController.dispose();\n    _websiteController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Profile')),\n      body: ListView(\n        padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 12),\n        children: [\n          Avatar(\n            imageUrl: _avatarUrl,\n            onUpload: _onUpload,\n          ),\n          const SizedBox(height: 18),\n          TextFormField(\n            controller: _usernameController,\n            decoration: const InputDecoration(labelText: 'User Name'),\n          ),\n          const SizedBox(height: 18),\n          TextFormField(\n            controller: _websiteController,\n            decoration: const InputDecoration(labelText: 'Website'),\n          ),\n          const SizedBox(height: 18),\n          ElevatedButton(\n            onPressed: _updateProfile,\n            child: Text(_loading ? 'Saving...' : 'Update'),\n          ),\n          const SizedBox(height: 18),\n          TextButton(onPressed: _signOut, child: const Text('Sign Out')),\n        ],\n      ),\n    );\n  }\n}\n")),(0,r.kt)("p",null,"Congratulations, that is it! You have now built a fully functional user management app using Flutter and Supabase!"),(0,r.kt)("h2",{id:"see-also"},"See also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://supabase.com/blog/flutter-tutorial-building-a-chat-app"},"Flutter Tutorial: building a Flutter chat app"))))}g.isMDXComponent=!0},88900:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/deeplink-setting-f4e13a03f5d77a39db8d96ea6ab5eca0.png"},6949:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/supabase-flutter-account-page-da69f26aea22aa8d2f53629e966eb5f8.png"},93434:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/supabase-flutter-demo-2838917c7cf974a4dc03e45b25a3cf04.png"}}]);