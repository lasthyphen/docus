"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[35863],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>g});var n=a(67294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),d=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=d(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(a),c=l,g=p["".concat(o,".").concat(c)]||p[c]||m[c]||r;return a?n.createElement(g,i(i({ref:t},u),{},{components:a})):n.createElement(g,i({ref:t},u))}));function g(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:l,i[1]=s;for(var d=2;d<r;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(67294),l=a(86010);const r="tabItem_Ymn6";function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,i),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>c});var n=a(87462),l=a(67294),r=a(86010),i=a(72389),s=a(67392),o=a(7094),d=a(12466);const u="tabList__CuJ",p="tabItem_LNqP";function m(e){const{lazy:t,block:a,defaultValue:i,values:m,groupId:c,className:g}=e,k=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=m??k.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),b=(0,s.l)(h,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===i?i:i??k.find((e=>e.props.default))?.props.value??k[0].props.value;if(null!==N&&!h.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:v}=(0,o.U)(),[f,w]=(0,l.useState)(N),C=[],{blockElementScrollPositionUntilNextRender:T}=(0,d.o5)();if(null!=c){const e=y[c];null!=e&&e!==f&&h.some((t=>t.value===e))&&w(e)}const q=e=>{const t=e.currentTarget,a=C.indexOf(t),n=h[a].value;n!==f&&(T(t),w(n),null!=c&&v(c,String(n)))},x=e=>{let t=null;switch(e.key){case"Enter":q(e);break;case"ArrowRight":{const a=C.indexOf(e.currentTarget)+1;t=C[a]??C[0];break}case"ArrowLeft":{const a=C.indexOf(e.currentTarget)-1;t=C[a]??C[C.length-1];break}}t?.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},g)},h.map((e=>{let{value:t,label:a,attributes:i}=e;return l.createElement("li",(0,n.Z)({role:"tab",tabIndex:f===t?0:-1,"aria-selected":f===t,key:t,ref:e=>C.push(e),onKeyDown:x,onClick:q},i,{className:(0,r.Z)("tabs__item",p,i?.className,{"tabs__item--active":f===t})}),a??t)}))),t?(0,l.cloneElement)(k.filter((e=>e.props.value===f))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==f})))))}function c(e){const t=(0,i.Z)();return l.createElement(m,(0,n.Z)({key:String(t)},e))}},42487:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>d,toc:()=>p});var n=a(87462),l=(a(67294),a(3905)),r=a(65488),i=a(85162);const s={id:"tables",title:"Tables and Data",description:"Creating and using Postgres tables."},o=void 0,d={unversionedId:"guides/database/tables",id:"guides/database/tables",title:"Tables and Data",description:"Creating and using Postgres tables.",source:"@site/docs/guides/database/tables.mdx",sourceDirName:"guides/database",slug:"/guides/database/tables",permalink:"/docs/guides/database/tables",draft:!1,editUrl:"https://github.com/docs/guides/database/tables.mdx",tags:[],version:"current",frontMatter:{id:"tables",title:"Tables and Data",description:"Creating and using Postgres tables."}},u={},p=[{value:"Creating Tables",id:"creating-tables",level:2},{value:"Columns",id:"columns",level:2},{value:"Data types",id:"data-types",level:3},{value:"Primary Keys",id:"primary-keys",level:3},{value:"Loading data",id:"loading-data",level:2},{value:"Basic data loading",id:"basic-data-loading",level:3},{value:"Bulk data loading",id:"bulk-data-loading",level:3},{value:"Joining tables with Foreign Keys",id:"joining-tables-with-foreign-keys",level:2},{value:"Schemas",id:"schemas",level:2},{value:"Views",id:"views",level:2},{value:"When to use views",id:"when-to-use-views",level:3},{value:"Simplicity",id:"simplicity",level:4},{value:"Consistency",id:"consistency",level:4},{value:"Logical Organization",id:"logical-organization",level:4},{value:"Security",id:"security",level:4},{value:"Materialized Views",id:"materialized-views",level:3},{value:"Refreshing materialized views",id:"refreshing-materialized-views",level:3},{value:"Materialized views vs Conventional views",id:"materialized-views-vs-conventional-views",level:3},{value:"Resources",id:"resources",level:2}],m={toc:p};function c(e){let{components:t,...s}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Tables are where you store your data."),(0,l.kt)("p",null,'Tables are similar to excel spreadsheets. They contain columns and rows.\nFor example, this table has 3 "columns" (',(0,l.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"description"),') and 4 "rows" of data:'),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"id")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"name")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"description")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"The Phantom Menace"),(0,l.kt)("td",{parentName:"tr",align:null},"Two Jedi escape a hostile blockade to find allies and come across a young boy who may bring balance to the Force.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"Attack of the Clones"),(0,l.kt)("td",{parentName:"tr",align:null},"Ten years after the invasion of Naboo, the Galactic Republic is facing a Separatist movement.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Revenge of the Sith"),(0,l.kt)("td",{parentName:"tr",align:null},"As Obi-Wan pursues a new threat, Anakin acts as a double agent between the Jedi Council and Palpatine and is lured into a sinister plan to rule the galaxy.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"Star Wars"),(0,l.kt)("td",{parentName:"tr",align:null},"Luke Skywalker joins forces with a Jedi Knight, a cocky pilot, a Wookiee and two droids to save the galaxy from the Empire's world-destroying battle station.")))),(0,l.kt)("p",null,"There are a few important differences from a spreadsheet, but it's a good starting point if you're new to Relational databases."),(0,l.kt)("h2",{id:"creating-tables"},"Creating Tables"),(0,l.kt)("p",null,"When creating a table, it's best practice to add columns at the same time."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Tables and columns",src:a(22676).Z,width:"1766",height:"1104"})),(0,l.kt)("p",null,'You must define the "data type" of each column when it is created. You can add and remove columns at any time after creating a table.'),(0,l.kt)("p",null,"Supabase provides several options for creating tables. You can use the Dashboard or create them directly using SQL.\nWe provide a SQL editor within the Dashboard, or you can ",(0,l.kt)("a",{parentName:"p",href:"../../guides/database/connecting-to-postgres"},"connect")," to your database\nand run the SQL queries yourself."),(0,l.kt)(r.Z,{groupId:"dashboard-or-sql",defaultValue:"dashboard",values:[{label:"Dashboard",value:"dashboard"},{label:"SQL",value:"sql"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"dashboard",mdxType:"TabItem"},(0,l.kt)("video",{width:"99%",muted:!0,playsInline:!0,controls:"true"},(0,l.kt)("source",{src:"/docs/videos/api/api-create-table-sm.mp4",type:"video/mp4",muted:!0,playsInline:!0})),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Go to the ",(0,l.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/editor"},"Table Editor")," page in the Dashboard."),(0,l.kt)("li",{parentName:"ol"},"Click ",(0,l.kt)("strong",{parentName:"li"},"New Table")," and create a table with the name ",(0,l.kt)("inlineCode",{parentName:"li"},"todos"),"."),(0,l.kt)("li",{parentName:"ol"},"Click ",(0,l.kt)("strong",{parentName:"li"},"Save"),"."),(0,l.kt)("li",{parentName:"ol"},"Click ",(0,l.kt)("strong",{parentName:"li"},"New Column")," and create a column with the name ",(0,l.kt)("inlineCode",{parentName:"li"},"task")," and type ",(0,l.kt)("inlineCode",{parentName:"li"},"text"),"."),(0,l.kt)("li",{parentName:"ol"},"Click ",(0,l.kt)("strong",{parentName:"li"},"Save"),"."))),(0,l.kt)(i.Z,{value:"sql",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create table movies (\n  id bigint generated by default as identity primary key,\n  name text,\n  description text\n);\n")))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"When naming tables, use lowercase and underscores instead of spaces (e.g., ",(0,l.kt)("inlineCode",{parentName:"p"},"table_name"),", not ",(0,l.kt)("inlineCode",{parentName:"p"},"Table Name"),").")),(0,l.kt)("h2",{id:"columns"},"Columns"),(0,l.kt)("p",null,'You must define the "data type" when you create a column.'),(0,l.kt)("h3",{id:"data-types"},"Data types"),(0,l.kt)("p",null,"Every column is a predefined type. PostgreSQL provides many ",(0,l.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/datatype.html"},"default types"),", and you can even design your own (or use extensions)\nif the default types don't fit your needs."),(0,l.kt)("details",null,(0,l.kt)("summary",null,"Show/Hide default data types"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"Name")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"Aliases")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"Description")))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bigint"),(0,l.kt)("td",{parentName:"tr",align:null},"int8"),(0,l.kt)("td",{parentName:"tr",align:null},"signed eight-byte integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bigserial"),(0,l.kt)("td",{parentName:"tr",align:null},"serial8"),(0,l.kt)("td",{parentName:"tr",align:null},"autoincrementing eight-byte integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bit"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"fixed-length bit string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bit varying"),(0,l.kt)("td",{parentName:"tr",align:null},"varbit"),(0,l.kt)("td",{parentName:"tr",align:null},"variable-length bit string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"logical Boolean (true/false)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"box"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"rectangular box on a plane")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bytea"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"binary data (\u201cbyte array\u201d)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"character"),(0,l.kt)("td",{parentName:"tr",align:null},"char"),(0,l.kt)("td",{parentName:"tr",align:null},"fixed-length character string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"character varying"),(0,l.kt)("td",{parentName:"tr",align:null},"varchar"),(0,l.kt)("td",{parentName:"tr",align:null},"variable-length character string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cidr"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"IPv4 or IPv6 network address")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"circle"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"circle on a plane")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"date"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"calendar date (year, month, day)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"double precision"),(0,l.kt)("td",{parentName:"tr",align:null},"float8"),(0,l.kt)("td",{parentName:"tr",align:null},"double precision floating-point number (8 bytes)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"inet"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"IPv4 or IPv6 host address")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"integer"),(0,l.kt)("td",{parentName:"tr",align:null},"int, int4"),(0,l.kt)("td",{parentName:"tr",align:null},"signed four-byte integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"interval ","["," fields ","]"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"time span")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"json"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"textual JSON data")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"jsonb"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"binary JSON data, decomposed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"line"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"infinite line on a plane")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"lseg"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"line segment on a plane")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"macaddr"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"MAC (Media Access Control) address")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"macaddr8"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"MAC (Media Access Control) address (EUI-64 format)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"money"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"currency amount")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"numeric"),(0,l.kt)("td",{parentName:"tr",align:null},"decimal"),(0,l.kt)("td",{parentName:"tr",align:null},"exact numeric of selectable precision")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"path"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"geometric path on a plane")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pg_lsn"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"PostgreSQL Log Sequence Number")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pg_snapshot"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"user-level transaction ID snapshot")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"point"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"geometric point on a plane")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"polygon"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"closed geometric path on a plane")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"real"),(0,l.kt)("td",{parentName:"tr",align:null},"float4"),(0,l.kt)("td",{parentName:"tr",align:null},"single precision floating-point number (4 bytes)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"smallint"),(0,l.kt)("td",{parentName:"tr",align:null},"int2"),(0,l.kt)("td",{parentName:"tr",align:null},"signed two-byte integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"smallserial"),(0,l.kt)("td",{parentName:"tr",align:null},"serial2"),(0,l.kt)("td",{parentName:"tr",align:null},"autoincrementing two-byte integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"serial"),(0,l.kt)("td",{parentName:"tr",align:null},"serial4"),(0,l.kt)("td",{parentName:"tr",align:null},"autoincrementing four-byte integer")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"text"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"variable-length character string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"time ","["," without time zone ","]"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"time of day (no time zone)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"time with time zone"),(0,l.kt)("td",{parentName:"tr",align:null},"timetz"),(0,l.kt)("td",{parentName:"tr",align:null},"time of day, including time zone")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"timestamp ","["," without time zone ","]"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"date and time (no time zone)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"timestamp with time zone"),(0,l.kt)("td",{parentName:"tr",align:null},"timestamptz"),(0,l.kt)("td",{parentName:"tr",align:null},"date and time, including time zone")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tsquery"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"text search query")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tsvector"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"text search document")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"txid_snapshot"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"user-level transaction ID snapshot (deprecated; see pg_snapshot)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"uuid"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"universally unique identifier")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"xml"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"XML data"))))),(0,l.kt)("br",null),(0,l.kt)("p",null,'You can "cast" columns from one type to another, however there can be some incompatibilities between types.\nFor example, if you cast a ',(0,l.kt)("inlineCode",{parentName:"p"},"timestamp")," to a ",(0,l.kt)("inlineCode",{parentName:"p"},"date"),", you will lose all the time information that was previously saved."),(0,l.kt)("h3",{id:"primary-keys"},"Primary Keys"),(0,l.kt)("p",null,'A table can have a "primary key" - a unique identifier for every row of data. A few tips for Primary Keys:'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"It's recommended to create a Primary Key for every table in your database."),(0,l.kt)("li",{parentName:"ul"},"You can use any column as a primary key, as long as it is unique for every row."),(0,l.kt)("li",{parentName:"ul"},"It's common to use a ",(0,l.kt)("inlineCode",{parentName:"li"},"uuid")," type or a numbered ",(0,l.kt)("inlineCode",{parentName:"li"},"identity")," column as your primary key.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create table movies (\n  id bigint generated always as identity primary key\n);\n")),(0,l.kt)("p",null,"In the example above, we have:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"created a column called ",(0,l.kt)("inlineCode",{parentName:"li"},"id")),(0,l.kt)("li",{parentName:"ol"},"assigned the data type ",(0,l.kt)("inlineCode",{parentName:"li"},"bigint")),(0,l.kt)("li",{parentName:"ol"},"instructed the database that this should be ",(0,l.kt)("inlineCode",{parentName:"li"},"generated always as identity"),", which means that Postgres will automatically assign a unique number to this column."),(0,l.kt)("li",{parentName:"ol"},"Becuase it's unique, we can also use it as our ",(0,l.kt)("inlineCode",{parentName:"li"},"primary key"),".")),(0,l.kt)("p",null,"We could also use ",(0,l.kt)("inlineCode",{parentName:"p"},"generated by default as identity"),", which would allow us to insert our own unique values."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create table movies (\n  id bigint generated by default as identity primary key\n);\n")),(0,l.kt)("h2",{id:"loading-data"},"Loading data"),(0,l.kt)("p",null,"There are several ways to load data in Supabase. You can load data directly into the database or using the ",(0,l.kt)("a",{parentName:"p",href:"../../guides/api"},"APIs"),'.\nUse the "Bulk Loading" instructions if you are loading large data sets.'),(0,l.kt)("h3",{id:"basic-data-loading"},"Basic data loading"),(0,l.kt)(r.Z,{defaultValue:"sql",values:[{label:"SQL",value:"sql"},{label:"JavaScript",value:"javascript"},{label:"Dart",value:"dart"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"sql",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"insert into movies\n  (name, description)\nvalues\n  ('The Empire Strikes Back', 'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'),\n  ('Return of the Jedi', 'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.');\n"))),(0,l.kt)(i.Z,{value:"javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"const { data, error } = await supabase\n  .from('movies')\n  .insert([{\n    name: 'The Empire Strikes Back',\n    description: 'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'\n  }, {\n    name: 'Return of the Jedi',\n    description: 'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.'\n  }])\n"))),(0,l.kt)(i.Z,{value:"dart",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"final res = await supabase\n  .from('movies')\n  .insert([{\n    name: 'The Empire Strikes Back',\n    description: 'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'\n  }, {\n    name: 'Return of the Jedi',\n    description: 'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.'\n  }]).execute();\n")))),(0,l.kt)("h3",{id:"bulk-data-loading"},"Bulk data loading"),(0,l.kt)("p",null,"When inserting large data sets it's best to use PostgreSQL's ",(0,l.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-copy.html"},"COPY")," command.\nThis loads data directly from a file into a table. There are several file formats available for copying data: text, csv, binary, JSON, etc."),(0,l.kt)("p",null,"For example, if you wanted to load a CSV file into your movies table:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csv",metastring:'title="./movies.csv"',title:'"./movies.csv"'},'"The Empire Strikes Back", "After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda."\n"Return of the Jedi", "After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star."\n')),(0,l.kt)("p",null,"You would ",(0,l.kt)("a",{parentName:"p",href:"../../guides/database/connecting-to-postgres#direct-connections"},"connect")," to your database directly and load the file with the COPY command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"psql -h DATABASE_URL -p 5432 postgres -U postgres \\\n  -c \"COPY movies FROM './movies.csv';\"\n")),(0,l.kt)("h2",{id:"joining-tables-with-foreign-keys"},"Joining tables with Foreign Keys"),(0,l.kt)("p",null,'Tables can be "joined" together using Foreign Keys.'),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Foreign Keys",src:a(38016).Z,width:"1612",height:"874"})),(0,l.kt)("p",null,'This is where the "Relational" naming comes from, as data typically forms some sort of relationship.'),(0,l.kt)("p",null,'In our "movies" example above, we might want to add a "category" for each movie (for example, "Action", or "Documentary").\nLet\'s create a new table called ',(0,l.kt)("inlineCode",{parentName:"p"},"categories"),' and "link" our ',(0,l.kt)("inlineCode",{parentName:"p"},"movies")," table."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create table categories (\n  id bigint generated always as identity primary key,\n  name text -- category name\n);\n\nalter table movies\n  add column category_id bigint references categories;\n")),(0,l.kt)("p",null,'You can also create "many-to-many" relationships by creating a "join" table.\nFor example if you had the following situations:'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"You have a list of ",(0,l.kt)("inlineCode",{parentName:"li"},"movies"),"."),(0,l.kt)("li",{parentName:"ul"},"A movie can have several ",(0,l.kt)("inlineCode",{parentName:"li"},"actors"),"."),(0,l.kt)("li",{parentName:"ul"},"An ",(0,l.kt)("inlineCode",{parentName:"li"},"actor")," can perfom in several movies.")),(0,l.kt)(r.Z,{groupId:"dashboard-or-sql",defaultValue:"dashboard",values:[{label:"Dashboard",value:"dashboard"},{label:"SQL",value:"sql"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"dashboard",mdxType:"TabItem"},(0,l.kt)("div",{class:"video-container"},(0,l.kt)("iframe",{src:"https://www.youtube-nocookie.com/embed/TKwF3IGij5c",frameBorder:"1",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowFullScreen:!0}))),(0,l.kt)(i.Z,{value:"sql",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create table movies (\n  id bigint generated by default as identity primary key,\n  name text,\n  description text\n);\n\ncreate table actors (\n  id bigint generated by default as identity primary key,\n  name text\n);\n\ncreate table performances (\n  id bigint generated by default as identity primary key,\n  movie_id bigint not null references movies,\n  actor_id bigint not null references actors\n);\n")))),(0,l.kt)("h2",{id:"schemas"},"Schemas"),(0,l.kt)("p",null,"Tables belong to ",(0,l.kt)("inlineCode",{parentName:"p"},"schemas"),". Schemas are a way of organizing your tables, often for security reasons."),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Schemas and tables",src:a(30104).Z,width:"1696",height:"1128"})),(0,l.kt)("p",null,"If you don't explicitly pass a schema when creating a table, Postgres will assume that you want to create the table in the ",(0,l.kt)("inlineCode",{parentName:"p"},"public")," schema."),(0,l.kt)("p",null,"We can create schemas for organizing tables. For example, we might want a private schema which is hidden from our API:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create schema private;\n")),(0,l.kt)("p",null,"Now we can create tables inside the ",(0,l.kt)("inlineCode",{parentName:"p"},"private")," schema:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create table salaries (\n  id bigint generated by default as identity primary key,\n  salary bigint not null,\n  actor_id bigint not null references public.actors\n);\n")),(0,l.kt)("h2",{id:"views"},"Views"),(0,l.kt)("p",null,"A View is a convenient shortcut to a query. Creating a view does not involve new tables or data. When run, an underlying query is executed, returning its results to the user."),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"By default, PostgreSQL views bypass Row Level Security unless you change their owner (see ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/supabase/supabase/discussions/901"},"https://github.com/supabase/supabase/discussions/901"),"). PostgreSQL v15 (coming soon) will have a more intuitive control for this through ",(0,l.kt)("a",{parentName:"p",href:"https://www.depesz.com/2022/03/22/waiting-for-postgresql-15-add-support-for-security-invoker-views/"},"security invoker views")," and the previous step won't be needed.")),(0,l.kt)("p",null,"Say we have the following tables from a database of a university:"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"students"))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"name"),(0,l.kt)("th",{parentName:"tr",align:null},"type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"Princess Leia"),(0,l.kt)("td",{parentName:"tr",align:null},"undergraduate")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"Yoda"),(0,l.kt)("td",{parentName:"tr",align:null},"graduate")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Anakin Skywalker"),(0,l.kt)("td",{parentName:"tr",align:null},"graduate")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"courses"))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"title"),(0,l.kt)("th",{parentName:"tr",align:null},"code"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"Introduction to Postgres"),(0,l.kt)("td",{parentName:"tr",align:null},"PG101")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"Authentication Theories"),(0,l.kt)("td",{parentName:"tr",align:null},"AUTH205")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"Fundamentals of Supabase"),(0,l.kt)("td",{parentName:"tr",align:null},"SUP412")))),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"grades"))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"id"),(0,l.kt)("th",{parentName:"tr",align:null},"student_id"),(0,l.kt)("th",{parentName:"tr",align:null},"course_id"),(0,l.kt)("th",{parentName:"tr",align:null},"result"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"B+")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"A+")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"A")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"4"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"1"),(0,l.kt)("td",{parentName:"tr",align:null},"A-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"5"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"2"),(0,l.kt)("td",{parentName:"tr",align:null},"A")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"3"),(0,l.kt)("td",{parentName:"tr",align:null},"B-")))),(0,l.kt)("p",null,"Creating a view consisting of all the three tables will look like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create view transcripts as\n    select\n        students.name,\n        students.type,\n        courses.title,\n        courses.code,\n        grades.result\n    from grades\n    left join students on grades.student_id = students.id\n    left join courses on grades.course_id = courses.id;\n\nalter view transcripts owner to authenticated;\n")),(0,l.kt)("p",null,"Once done, we can now access the underlying query with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select * from transcripts;\n")),(0,l.kt)("h3",{id:"when-to-use-views"},"When to use views"),(0,l.kt)("p",null,"Views provide the several benefits:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Simplicity"),(0,l.kt)("li",{parentName:"ul"},"Consistency"),(0,l.kt)("li",{parentName:"ul"},"Logical Organization"),(0,l.kt)("li",{parentName:"ul"},"Security")),(0,l.kt)("h4",{id:"simplicity"},"Simplicity"),(0,l.kt)("p",null,"As a query becomes complex it becomes a hassle to call it. Especially when we run it at regularly. In the example above, instead of repeatedly running:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    students.name,\n    students.type,\n    courses.title,\n    courses.code,\n    grades.result\nfrom grades\nleft join students on grades.student_id = students.id\nleft join courses on grades.course_id = courses.id;\n")),(0,l.kt)("p",null,"We can run this instead:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select * from transcripts;\n")),(0,l.kt)("p",null,"Additionally, a view behaves like a typical table. We can safely use it in table ",(0,l.kt)("inlineCode",{parentName:"p"},"JOIN"),"s or even create new views using existing views."),(0,l.kt)("h4",{id:"consistency"},"Consistency"),(0,l.kt)("p",null,"Views ensure that the likelihood of mistakes decreases when repeatedly executing a query. In our example above, we may decide that we want to exclude the course ",(0,l.kt)("em",{parentName:"p"},"Introduction to Postgres"),". The query would become:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select\n    students.name,\n    students.type,\n    courses.title,\n    courses.code,\n    grades.result\nfrom grades\n    left join students on grades.student_id = students.id\n    left join courses on grades.course_id = courses.id\nwhere courses.code != 'PG101';\n")),(0,l.kt)("p",null,"Without a view, we would need to go into every dependent query to add the new rule. This would increase in the likelihood of errors and inconsistencies, as well as introducing a lot of effort for a developer. With views, we can alter just the underlying query in the view ",(0,l.kt)("strong",{parentName:"p"},"transcripts"),". The change will be applied to all applications using this view."),(0,l.kt)("h4",{id:"logical-organization"},"Logical Organization"),(0,l.kt)("p",null,"With views, we can give our query a name. This is extremely useful for teams working with the same database. Instead of guessing what a query is supposed to do, a well-named view can easily explain it. For example, by looking at the name of the view ",(0,l.kt)("strong",{parentName:"p"},"transcripts"),", we can infer that the underlying query might involve the ",(0,l.kt)("strong",{parentName:"p"},"students"),", ",(0,l.kt)("strong",{parentName:"p"},"courses"),", and ",(0,l.kt)("strong",{parentName:"p"},"grades")," tables."),(0,l.kt)("h4",{id:"security"},"Security"),(0,l.kt)("p",null,"Views can restrict the amount and type of data presented to a user. Instead of allowing a user direct access to a set of tables, we provide them a view instead. We can prevent them from reading sensitive columns by excluding them from the underlying query."),(0,l.kt)("h3",{id:"materialized-views"},"Materialized Views"),(0,l.kt)("p",null,"A ",(0,l.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/12/rules-materializedviews.html"},"materialized view")," is a form of view but it also stores the results to disk. In subsequent reads of a materialized view, the time taken to return its results would be much faster than a conventional view. This is because the data is readily available for a materialized view while the conventional view executes the underlying query each time it is called."),(0,l.kt)("p",null,"Using our example above, a materialized view can be created like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create materialized view transcripts as\n    select\n        students.name,\n        students.type,\n        courses.title,\n        courses.code,\n        grades.result\n    from grades\n    left join students on grades.student_id = students.id\n    left join courses on grades.course_id = courses.id;\n")),(0,l.kt)("p",null,"Reading from the materialized view is the same as a conventional view:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"select * from transcripts;\n")),(0,l.kt)("h3",{id:"refreshing-materialized-views"},"Refreshing materialized views"),(0,l.kt)("p",null,"Unfortunately, there is a trade-off - data in materialized views are not always up to date. We need to refresh it regularly to prevent the data from becoming too stale. To do so:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"refresh materialized view transcripts;\n")),(0,l.kt)("p",null,"It's up to you how regularly refresh your materialized views, and it's probably different for each view depending on its use-case."),(0,l.kt)("h3",{id:"materialized-views-vs-conventional-views"},"Materialized views vs Conventional views"),(0,l.kt)("p",null,"Materialized views are useful when execution times for queries or views are too slow. These could likely occur in views or queries involving multiple tables and billions of rows. When using such a view, however, there should be tolerance towards data being outdated. Some use-cases for materialized views are internal dashboards and analytics."),(0,l.kt)("p",null,"Creating a materialized view is not a solution to inefficient queries. You should always seek to optimize a slow running query even if you are implementing a materialized view."),(0,l.kt)("h2",{id:"resources"},"Resources"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/current/sql-createtable.html"},"Official Docs: Create table")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.postgresql.org/docs/12/sql-createview.html"},"Official Docs: Create view")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-create-table/"},"PostgreSQL Tutorial: Create tables")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-add-column/"},"PostgreSQL Tutorial: Add column")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.postgresqltutorial.com/postgresql-views/"},"PostgreSQL Tutorial: Views"))))}c.isMDXComponent=!0},38016:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/foreign-keys-ee810cb1bbcd80b08822b13be2f15f4a.png"},30104:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/schema-tables-d9b87c02130a66c7206b72003066730d.png"},22676:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/tables-columns-b4116edb69f2fb9d774a3dadf380da7b.png"}}]);