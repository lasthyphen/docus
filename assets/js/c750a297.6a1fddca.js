"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[74766],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(a),h=r,m=p["".concat(o,".").concat(h)]||p[h]||d[h]||s;return a?n.createElement(m,i(i({ref:t},u),{},{components:a})):n.createElement(m,i({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<s;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},95361:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const s={id:"realtime",title:"Realtime",description:"Supabase Realtime with Broadcast, Presence, and Postgres CDC.",sidebar_label:"Overview"},i=void 0,l={unversionedId:"guides/realtime",id:"guides/realtime",title:"Realtime",description:"Supabase Realtime with Broadcast, Presence, and Postgres CDC.",source:"@site/docs/guides/realtime.mdx",sourceDirName:"guides",slug:"/guides/realtime",permalink:"/docs/guides/realtime",draft:!1,editUrl:"https://github.com/docs/guides/realtime.mdx",tags:[],version:"current",frontMatter:{id:"realtime",title:"Realtime",description:"Supabase Realtime with Broadcast, Presence, and Postgres CDC.",sidebar_label:"Overview"}},o={},c=[{value:"Broadcast",id:"broadcast",level:2},{value:"Presence",id:"presence",level:2},{value:"Postgres CDC",id:"postgres-cdc",level:2},{value:"See Also",id:"see-also",level:2}],u={toc:c};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Supabase provides a globally distributed cluster of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/supabase/realtime"},"Realtime")," servers that enable the following functionality:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#broadcast"},"Broadcast"),": Send ephemeral messages from client to clients with low latency."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#presence"},"Presence"),": Track and synchrononize shared state between clients."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#postgres-cdc"},"Postgres CDC"),": Listen to Postgres database changes and send them to authorized clients.")),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{parentName:"p",href:"https://hexdocs.pm/phoenix/channels.html"},"channel")," is the basic building block of Realtime and narrows the scope of data flow to subscribed clients. You can think of a channel as a chatroom where participants are able to see who's online and send and receive messages; similar to a Discord or Slack channel."),(0,r.kt)("p",null,"All clients can connect to a channel and take advantage of the built-in features, Broadcast and Presence, while extenstions, like Postgres CDC, must be enabled prior to use."),(0,r.kt)("h2",{id:"broadcast"},"Broadcast"),(0,r.kt)("p",null,"Broadcast follows the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern"},"publish-subscribe pattern")," where a client publishes messages to a channel with a unique identifier. For example, a user could send a message to a channel with id ",(0,r.kt)("inlineCode",{parentName:"p"},"room-1"),"."),(0,r.kt)("p",null,"Other clients can elect to receive the message in real-time by subscribing to the channel with id ",(0,r.kt)("inlineCode",{parentName:"p"},"room-1"),". If these clients are online and subscribed then they will receive the message."),(0,r.kt)("p",null,"Broadcast works by connecting your client to the nearest Realtime server, which will communicate with other servers to relay messages to other clients."),(0,r.kt)("p",null,"A common use-case is sharing a user's cursor position with other clients in an online game."),(0,r.kt)("h2",{id:"presence"},"Presence"),(0,r.kt)("p",null,"Presence utilizes an in-memory conflict-free replicated data type (CRDT) to track and synchronize shared state in an eventually consistent manner. It computes the difference between existing state and new state changes and sends the necessary updates to clients via Broadcast."),(0,r.kt)("p",null,"When a new client subscribes to a channel, it will immediately receive the channel's latest state in a single message instead of waiting for all other clients to send their individual states."),(0,r.kt)("p",null,"Clients are free to come-and-go as they please, and as long as they are all subscribed to the same channel then they will all have the same Presence state as each other."),(0,r.kt)("p",null,"The neat thing about Presence is that if a client is suddenly disconnected (for example, they go offline), their state will be automatically removed from the shared state. If you've ever tried to build an \u201cI'm online\u201d feature which handles unexpected disconnects, you'll appreciate how useful this is."),(0,r.kt)("h2",{id:"postgres-cdc"},"Postgres CDC"),(0,r.kt)("p",null,"Postgres Change Data Capture (CDC) enables you to listen to database changes and have them broadcast to authorized clients based on ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/auth/row-level-security"},"Row Level Security (RLS)")," policies."),(0,r.kt)("p",null,"This works by Realtime polling your database's logical replication slot for changes, passing those changes to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/supabase/walrus#reading-wal"},"apply_rls")," SQL function to determine which clients have permission, and then using Broadcast to send those changes to clients."),(0,r.kt)("p",null,"Realtime requires a publication called ",(0,r.kt)("inlineCode",{parentName:"p"},"supabase_realtime")," to determine which tables to poll. You must add tables to this publication prior to clients subscribing to channels that want to listen for database changes."),(0,r.kt)("p",null,"We strongly encourage you to enable RLS on your database tables and have RLS policies in place to prevent unauthorized parties from accessing your data."),(0,r.kt)("h2",{id:"see-also"},"See Also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/guides/realtime/quickstart"},"Realtime quickstart")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://supabase.com/blog/supabase-realtime-multiplayer-general-availability"},"Realtime: Multiplayer Edition")," blog post")))}p.isMDXComponent=!0}}]);