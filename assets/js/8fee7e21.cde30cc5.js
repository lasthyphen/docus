"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[70568],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var i=n.createContext({}),u=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(a),m=s,h=c["".concat(i,".").concat(m)]||c[m]||d[m]||r;return a?n.createElement(h,l(l({ref:t},p),{},{components:a})):n.createElement(h,l({ref:t},p))}));function h(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,l=new Array(r);l[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[c]="string"==typeof e?e:s,l[1]=o;for(var u=2;u<r;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>l});var n=a(67294),s=a(86010);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:a,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,s.Z)(r,l),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(87462),s=a(67294),r=a(86010),l=a(72389),o=a(67392),i=a(7094),u=a(12466);const p="tabList__CuJ",c="tabItem_LNqP";function d(e){const{lazy:t,block:a,defaultValue:l,values:d,groupId:m,className:h}=e,g=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=d??g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,o.l)(b,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===l?l:l??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==v&&!b.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:y}=(0,i.U)(),[w,N]=(0,s.useState)(v),x=[],{blockElementScrollPositionUntilNextRender:S}=(0,u.o5)();if(null!=m){const e=k[m];null!=e&&e!==w&&b.some((t=>t.value===e))&&N(e)}const j=e=>{const t=e.currentTarget,a=x.indexOf(t),n=b[a].value;n!==w&&(S(t),N(n),null!=m&&y(m,String(n)))},A=e=>{let t=null;switch(e.key){case"Enter":j(e);break;case"ArrowRight":{const a=x.indexOf(e.currentTarget)+1;t=x[a]??x[0];break}case"ArrowLeft":{const a=x.indexOf(e.currentTarget)-1;t=x[a]??x[x.length-1];break}}t?.focus()};return s.createElement("div",{className:(0,r.Z)("tabs-container",p)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},h)},b.map((e=>{let{value:t,label:a,attributes:l}=e;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>x.push(e),onKeyDown:A,onClick:j},l,{className:(0,r.Z)("tabs__item",c,l?.className,{"tabs__item--active":w===t})}),a??t)}))),t?(0,s.cloneElement)(g.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function m(e){const t=(0,l.Z)();return s.createElement(d,(0,n.Z)({key:String(t)},e))}},66788:(e,t,a)=>{a.d(t,{ZP:()=>p});var n=a(87462),s=(a(67294),a(3905)),r=a(65488),l=a(85162);const o={toc:[]};function i(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},o,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"-- Create a table for public profiles\ncreate table profiles (\n  id uuid references auth.users not null primary key,\n  updated_at timestamp with time zone,\n  username text unique,\n  full_name text,\n  avatar_url text,\n  website text,\n\n  constraint username_length check (char_length(username) >= 3)\n);\n-- Set up Row Level Security (RLS)\n-- See https://supabase.com/docs/guides/auth/row-level-security for more details.\nalter table profiles\n  enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles\n  for select using (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles\n  for insert with check (auth.uid() = id);\n\ncreate policy \"Users can update own profile.\" on profiles\n  for update using (auth.uid() = id);\n\n-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.\n-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.\ncreate function public.handle_new_user()\nreturns trigger as $$\nbegin\n  insert into public.profiles (id, full_name, avatar_url)\n  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');\n  return new;\nend;\n$$ language plpgsql security definer;\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\n  values ('avatars', 'avatars');\n\n-- Set up access controls for storage.\n-- See https://supabase.com/docs/guides/storage#policy-examples for more details.\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects\n  for select using (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects\n  for insert with check (bucket_id = 'avatars');\n\ncreate policy \"Anyone can update their own avatar.\" on storage.objects\n  for update using (auth.uid() = owner) with check (bucket_id = 'avatars');\n")))}i.isMDXComponent=!0;const u={toc:[{value:"Project set up",id:"project-set-up",level:2},{value:"Create a project",id:"create-a-project",level:3},{value:"Set up the database schema",id:"set-up-the-database-schema",level:3},{value:"Get the API Keys",id:"get-the-api-keys",level:3}]};function p(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"project-set-up"},"Project set up"),(0,s.kt)("p",null,'Before we start building we\'re going to set up our Database and API. This is as simple as starting a new Project in Supabase\nand then creating a "schema" inside the database.'),(0,s.kt)("h3",{id:"create-a-project"},"Create a project"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Go to ",(0,s.kt)("a",{parentName:"li",href:"https://app.supabase.com"},"app.supabase.com"),"."),(0,s.kt)("li",{parentName:"ol"},'Click on "New Project".'),(0,s.kt)("li",{parentName:"ol"},"Enter your project details."),(0,s.kt)("li",{parentName:"ol"},"Wait for the new database to launch.")),(0,s.kt)("h3",{id:"set-up-the-database-schema"},"Set up the database schema"),(0,s.kt)("p",null,'Now we are going to set up the database schema. We can use the "User Management Starter" quickstart in the SQL Editor,\nor you can just copy/paste the SQL from below and run it yourself.'),(0,s.kt)(r.Z,{groupId:"language",defaultValue:"dashboard",values:[{label:"Dashboard",value:"dashboard"},{label:"SQL",value:"sql"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"dashboard",mdxType:"TabItem"},(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Go to the ",(0,s.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/sql"},"SQL Editor")," page in the Dashboard."),(0,s.kt)("li",{parentName:"ol"},"Click ",(0,s.kt)("strong",{parentName:"li"},"User Management Starter"),"."),(0,s.kt)("li",{parentName:"ol"},"Click ",(0,s.kt)("strong",{parentName:"li"},"Run"),".")),(0,s.kt)("video",{width:"99%",muted:!0,playsInline:!0,controls:"true"},(0,s.kt)("source",{src:"/docs/videos/sql-user-management-starter.mp4",type:"video/mp4",muted:!0,playsInline:!0}))),(0,s.kt)(l.Z,{value:"sql",mdxType:"TabItem"},(0,s.kt)(i,{mdxType:"UserManagementSQLTemplate"}))),(0,s.kt)("h3",{id:"get-the-api-keys"},"Get the API Keys"),(0,s.kt)("p",null,"Now that you've created some database tables, you are ready to insert data using the auto-generated API.\nWe just need to get the URL and ",(0,s.kt)("inlineCode",{parentName:"p"},"anon")," key from the API settings."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Go to the ",(0,s.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/settings"},"Settings")," page in the Dashboard."),(0,s.kt)("li",{parentName:"ol"},"Click ",(0,s.kt)("strong",{parentName:"li"},"API")," in the sidebar."),(0,s.kt)("li",{parentName:"ol"},"Find your API ",(0,s.kt)("inlineCode",{parentName:"li"},"URL"),", ",(0,s.kt)("inlineCode",{parentName:"li"},"anon"),", and ",(0,s.kt)("inlineCode",{parentName:"li"},"service_role")," keys on this page.")),(0,s.kt)("video",{width:"99%",muted:!0,playsInline:!0,controls:"true"},(0,s.kt)("source",{src:"/docs/videos/api/api-url-and-key.mp4",type:"video/mp4",muted:!0,playsInline:!0})))}p.isMDXComponent=!0},27021:(e,t,a)=>{a.d(t,{ZP:()=>l});var n=a(87462),s=(a(67294),a(3905));const r={toc:[{value:"Intro",id:"intro",level:2}]};function l(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},r,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"intro"},"Intro"),(0,s.kt)("p",null,"This example provides the steps to build a basic user management app. It includes:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Supabase ",(0,s.kt)("a",{parentName:"li",href:"/docs/guides/database"},"Database"),": a Postgres database for storing your user data."),(0,s.kt)("li",{parentName:"ul"},"Supabase ",(0,s.kt)("a",{parentName:"li",href:"/docs/guides/auth"},"Auth"),": users can sign in with magic links (no passwords, only email)."),(0,s.kt)("li",{parentName:"ul"},"Supabase ",(0,s.kt)("a",{parentName:"li",href:"/docs/guides/storage"},"Storage"),": users can upload a photo."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/guides/auth#row-level-security"},"Row Level Security"),": data is protected so that individuals can only access their own data."),(0,s.kt)("li",{parentName:"ul"},"Instant ",(0,s.kt)("a",{parentName:"li",href:"/docs/guides/api"},"APIs"),": APIs will be automatically generated when you create your database tables.")),(0,s.kt)("p",null,"By the end of this guide you'll have an app which allows users to login and update some basic profile details:"))}l.isMDXComponent=!0},29218:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>g,frontMatter:()=>u,metadata:()=>c,toc:()=>m});var n=a(87462),s=(a(67294),a(3905)),r=a(65488),l=a(85162),o=a(27021),i=a(66788);const u={id:"with-nextjs",title:"Quickstart: Next.js",description:"Learn how to use Supabase in your Next App.",sidebar_label:"Next.js"},p=void 0,c={unversionedId:"guides/with-nextjs",id:"guides/with-nextjs",title:"Quickstart: Next.js",description:"Learn how to use Supabase in your Next App.",source:"@site/docs/guides/with-nextjs.mdx",sourceDirName:"guides",slug:"/guides/with-nextjs",permalink:"/docs/guides/with-nextjs",draft:!1,editUrl:"https://github.com/docs/guides/with-nextjs.mdx",tags:[],version:"current",frontMatter:{id:"with-nextjs",title:"Quickstart: Next.js",description:"Learn how to use Supabase in your Next App.",sidebar_label:"Next.js"}},d={},m=[{value:"GitHub",id:"github",level:3},{value:"Building the App",id:"building-the-app",level:2},{value:"Initialize a Next.js app",id:"initialize-a-nextjs-app",level:3},{value:"Set up a Login component",id:"set-up-a-login-component",level:3},{value:"Supabase Auth Helpers",id:"supabase-auth-helpers",level:4},{value:"Supabase Auth UI",id:"supabase-auth-ui",level:4},{value:"Account page",id:"account-page",level:3},{value:"Launch!",id:"launch",level:3},{value:"Bonus: Profile photos",id:"bonus-profile-photos",level:2},{value:"Create an upload widget",id:"create-an-upload-widget",level:3},{value:"Add the new widget",id:"add-the-new-widget",level:3},{value:"Next steps",id:"next-steps",level:2}],h={toc:m};function g(e){let{components:t,...u}=e;return(0,s.kt)("wrapper",(0,n.Z)({},h,u,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(o.ZP,{mdxType:"QuickstartIntro"}),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Supabase User Management example",src:a(83900).Z,width:"1558",height:"873"})),(0,s.kt)("h3",{id:"github"},"GitHub"),(0,s.kt)("p",null,"Should you get stuck while working through the guide, refer to ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/supabase/supabase/tree/master/examples/user-management/nextjs-ts-user-management"},"this repo"),"."),(0,s.kt)(i.ZP,{mdxType:"ProjectSetup"}),(0,s.kt)("h2",{id:"building-the-app"},"Building the App"),(0,s.kt)("p",null,"Let's start building the Next.js app from scratch."),(0,s.kt)("h3",{id:"initialize-a-nextjs-app"},"Initialize a Next.js app"),(0,s.kt)("p",null,"We can use ",(0,s.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/getting-started"},(0,s.kt)("inlineCode",{parentName:"a"},"create-next-app"))," to initialize\nan app called ",(0,s.kt)("inlineCode",{parentName:"p"},"supabase-nextjs"),":"),(0,s.kt)(r.Z,{groupId:"language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-next-app@latest --use-npm supabase-nextjs\ncd supabase-nextjs\n"))),(0,s.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-next-app@latest --ts --use-npm supabase-nextjs\ncd supabase-nextjs\n")))),(0,s.kt)("p",null,"Then install the Supabase client library: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/supabase/supabase-js"},"supabase-js")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @supabase/supabase-js\n")),(0,s.kt)("p",null,"And finally we want to save the environment variables in a ",(0,s.kt)("inlineCode",{parentName:"p"},".env.local"),".\nAll we need are the API URL and the ",(0,s.kt)("inlineCode",{parentName:"p"},"anon")," key that you copied ",(0,s.kt)("a",{parentName:"p",href:"#get-the-api-keys"},"earlier"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=".env.local"',title:'".env.local"'},"NEXT_PUBLIC_SUPABASE_URL=YOUR_SUPABASE_URL\nNEXT_PUBLIC_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\n")),(0,s.kt)("p",null,"And one optional step is to update the CSS file ",(0,s.kt)("inlineCode",{parentName:"p"},"styles/globals.css")," to make the app look nice.\nYou can find the full contents of this file ",(0,s.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/supabase/supabase/master/examples/user-management/nextjs-ts-user-management/styles/globals.css"},"here"),"."),(0,s.kt)("h3",{id:"set-up-a-login-component"},"Set up a Login component"),(0,s.kt)("h4",{id:"supabase-auth-helpers"},"Supabase Auth Helpers"),(0,s.kt)("p",null,"Next.js is a highly versatile framework offering pre-rendering at build time (SSG), server-side rendering at request time (SSR), API routes, and middleware edge-functions."),(0,s.kt)("p",null,"It can be challenging to authenticate your users in all these different environments, that's why we've created the ",(0,s.kt)("a",{parentName:"p",href:"https://supabase.com/docs/guides/auth/auth-helpers/nextjs"},"Supabase Auth Helpers")," to make user management and data fetching within Next.js as easy as possible."),(0,s.kt)("p",null,"Install the auth helpers for React and Next.js"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @supabase/auth-helpers-react @supabase/auth-helpers-nextjs\n")),(0,s.kt)(r.Z,{groupId:"language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("p",null,"Wrap your ",(0,s.kt)("inlineCode",{parentName:"p"},"pages/_app.js")," component with the ",(0,s.kt)("inlineCode",{parentName:"p"},"SessionContextProvider")," component:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="pages/_app.js"',title:'"pages/_app.js"'},"import '../styles/globals.css'\nimport { createBrowserSupabaseClient } from '@supabase/auth-helpers-nextjs'\nimport { SessionContextProvider } from '@supabase/auth-helpers-react'\n\nfunction MyApp({ Component, pageProps }) {\n  const [supabaseClient] = useState(() => createBrowserSupabaseClient())\n\n  return (\n    <SessionContextProvider\n      supabaseClient={supabaseClient}\n      initialSession={pageProps.initialSession}\n    >\n      <Component {...pageProps} />\n    </SessionContextProvider>\n  )\n}\nexport default MyApp\n"))),(0,s.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("p",null,"Wrap your ",(0,s.kt)("inlineCode",{parentName:"p"},"pages/_app.tsx")," component with the ",(0,s.kt)("inlineCode",{parentName:"p"},"SessionContextProvider")," component:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="pages/_app.tsx"',title:'"pages/_app.tsx"'},"import { createBrowserSupabaseClient } from '@supabase/auth-helpers-nextjs'\n// highlight-next-line\nimport { SessionContextProvider, Session } from '@supabase/auth-helpers-react'\n\nfunction MyApp({\n  Component,\n  pageProps,\n}: AppProps<{\n  // highlight-next-line\n  initialSession: Session,\n}>) {\n  const [supabaseClient] = useState(() => createBrowserSupabaseClient())\n\n  return (\n    <SessionContextProvider\n      supabaseClient={supabaseClient}\n      initialSession={pageProps.initialSession}\n    >\n      <Component {...pageProps} />\n    </SessionContextProvider>\n  )\n}\nexport default MyApp\n")),(0,s.kt)("p",null,"See the ",(0,s.kt)("a",{parentName:"p",href:"/docs/guides/auth/auth-helpers/nextjs#usage-with-typescript"},"Auth Helpers docs")," for more details on usage with TypeScript."))),(0,s.kt)("h4",{id:"supabase-auth-ui"},"Supabase Auth UI"),(0,s.kt)("p",null,"We can use the ",(0,s.kt)("a",{parentName:"p",href:"https://supabase.com/docs/guides/auth/auth-helpers/auth-ui"},"Supabase Auth UI")," a pre-built React component for authenticating users via OAuth, email, and magic links."),(0,s.kt)("p",null,"Install the Supabase Auth UI for React"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @supabase/auth-ui-react\n")),(0,s.kt)("p",null,"Add the ",(0,s.kt)("inlineCode",{parentName:"p"},"Auth")," component to your home page"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="pages/index.js"',title:'"pages/index.js"'},"import { Auth, ThemeSupa } from '@supabase/auth-ui-react'\nimport { useSession, useSupabaseClient } from '@supabase/auth-helpers-react'\n\nconst Home = () => {\n  const session = useSession()\n  const supabase = useSupabaseClient()\n\n  return (\n    <div className=\"container\" style={{ padding: '50px 0 100px 0' }}>\n      {!session ? (\n        <Auth\n          supabaseClient={supabase}\n          appearance={{ theme: ThemeSupa }}\n          theme=\"dark\"\n        />\n      ) : (\n        <p>Account page will go here.</p>\n      )}\n    </div>\n  )\n}\n\nexport default Home\n")),(0,s.kt)("h3",{id:"account-page"},"Account page"),(0,s.kt)("p",null,"After a user is signed in we can allow them to edit their profile details and manage their account."),(0,s.kt)(r.Z,{groupId:"language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("p",null,"Let's create a new component for that called ",(0,s.kt)("inlineCode",{parentName:"p"},"Account.js")," within a ",(0,s.kt)("inlineCode",{parentName:"p"},"components")," folder."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/Account.js"',title:'"components/Account.js"'},"import { useState, useEffect } from 'react'\nimport { useUser, useSupabaseClient } from '@supabase/auth-helpers-react'\n\nexport default function Account({ session }) {\n  const supabase = useSupabaseClient()\n  const user = useUser()\n  const [loading, setLoading] = useState(true)\n  const [username, setUsername] = useState(null)\n  const [website, setWebsite] = useState(null)\n  const [avatar_url, setAvatarUrl] = useState(null)\n\n  useEffect(() => {\n    getProfile()\n  }, [session])\n\n  async function getProfile() {\n    try {\n      setLoading(true)\n\n      let { data, error, status } = await supabase\n        .from('profiles')\n        .select(`username, website, avatar_url`)\n        .eq('id', user.id)\n        .single()\n\n      if (error && status !== 406) {\n        throw error\n      }\n\n      if (data) {\n        setUsername(data.username)\n        setWebsite(data.website)\n        setAvatarUrl(data.avatar_url)\n      }\n    } catch (error) {\n      alert('Error loading user data!')\n      console.log(error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  async function updateProfile({ username, website, avatar_url }) {\n    try {\n      setLoading(true)\n\n      const updates = {\n        id: user.id,\n        username,\n        website,\n        avatar_url,\n        updated_at: new Date().toISOString(),\n      }\n\n      let { error } = await supabase.from('profiles').upsert(updates)\n      if (error) throw error\n      alert('Profile updated!')\n    } catch (error) {\n      alert('Error updating the data!')\n      console.log(error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"form-widget\">\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" type=\"text\" value={session.user.email} disabled />\n      </div>\n      <div>\n        <label htmlFor=\"username\">Username</label>\n        <input\n          id=\"username\"\n          type=\"text\"\n          value={username || ''}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"website\">Website</label>\n        <input\n          id=\"website\"\n          type=\"website\"\n          value={website || ''}\n          onChange={(e) => setWebsite(e.target.value)}\n        />\n      </div>\n\n      <div>\n        <button\n          className=\"button primary block\"\n          onClick={() => updateProfile({ username, website, avatar_url })}\n          disabled={loading}\n        >\n          {loading ? 'Loading ...' : 'Update'}\n        </button>\n      </div>\n\n      <div>\n        <button\n          className=\"button block\"\n          onClick={() => supabase.auth.signOut()}\n        >\n          Sign Out\n        </button>\n      </div>\n    </div>\n  )\n}\n"))),(0,s.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("p",null,"Let's create a new component for that called ",(0,s.kt)("inlineCode",{parentName:"p"},"Account.tsx")," within a ",(0,s.kt)("inlineCode",{parentName:"p"},"components")," folder."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/Account.tsx"',title:'"components/Account.tsx"'},"import { useState, useEffect } from 'react'\nimport {\n  useUser,\n  useSupabaseClient,\n  Session,\n} from '@supabase/auth-helpers-react'\nimport { Database } from '../utils/database.types'\ntype Profiles = Database['public']['Tables']['profiles']['Row']\n\nexport default function Account({ session }: { session: Session }) {\n  const supabase = useSupabaseClient<Database>()\n  const user = useUser()\n  const [loading, setLoading] = useState(true)\n  const [username, setUsername] = useState<Profiles['username']>(null)\n  const [website, setWebsite] = useState<Profiles['website']>(null)\n  const [avatar_url, setAvatarUrl] = useState<Profiles['avatar_url']>(null)\n\n  useEffect(() => {\n    getProfile()\n  }, [session])\n\n  async function getProfile() {\n    try {\n      setLoading(true)\n      if (!user) throw new Error('No user')\n\n      let { data, error, status } = await supabase\n        .from('profiles')\n        .select(`username, website, avatar_url`)\n        .eq('id', user.id)\n        .single()\n\n      if (error && status !== 406) {\n        throw error\n      }\n\n      if (data) {\n        setUsername(data.username)\n        setWebsite(data.website)\n        setAvatarUrl(data.avatar_url)\n      }\n    } catch (error) {\n      alert('Error loading user data!')\n      console.log(error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  async function updateProfile({\n    username,\n    website,\n    avatar_url,\n  }: {\n    username: Profiles['username']\n    website: Profiles['website']\n    avatar_url: Profiles['avatar_url']\n  }) {\n    try {\n      setLoading(true)\n      if (!user) throw new Error('No user')\n\n      const updates = {\n        id: user.id,\n        username,\n        website,\n        avatar_url,\n        updated_at: new Date().toISOString(),\n      }\n\n      let { error } = await supabase.from('profiles').upsert(updates)\n      if (error) throw error\n      alert('Profile updated!')\n    } catch (error) {\n      alert('Error updating the data!')\n      console.log(error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className=\"form-widget\">\n      <div>\n        <label htmlFor=\"email\">Email</label>\n        <input id=\"email\" type=\"text\" value={session.user.email} disabled />\n      </div>\n      <div>\n        <label htmlFor=\"username\">Username</label>\n        <input\n          id=\"username\"\n          type=\"text\"\n          value={username || ''}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"website\">Website</label>\n        <input\n          id=\"website\"\n          type=\"website\"\n          value={website || ''}\n          onChange={(e) => setWebsite(e.target.value)}\n        />\n      </div>\n\n      <div>\n        <button\n          className=\"button primary block\"\n          onClick={() => updateProfile({ username, website, avatar_url })}\n          disabled={loading}\n        >\n          {loading ? 'Loading ...' : 'Update'}\n        </button>\n      </div>\n\n      <div>\n        <button\n          className=\"button block\"\n          onClick={() => supabase.auth.signOut()}\n        >\n          Sign Out\n        </button>\n      </div>\n    </div>\n  )\n}\n")))),(0,s.kt)("h3",{id:"launch"},"Launch!"),(0,s.kt)("p",null,"Now that we have all the components in place, let's update ",(0,s.kt)("inlineCode",{parentName:"p"},"pages/index.js"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="pages/index.js"',title:'"pages/index.js"'},"import type { NextPage } from 'next'\nimport { Auth, ThemeSupa } from '@supabase/auth-ui-react'\nimport { useSession, useSupabaseClient } from '@supabase/auth-helpers-react'\n// highlight-next-line\nimport Account from '../components/Account'\n\nconst Home: NextPage = () => {\n  const session = useSession()\n  const supabase = useSupabaseClient()\n\n  return (\n    <div className=\"container\" style={{ padding: '50px 0 100px 0' }}>\n      {!session ? (\n        <Auth\n          supabaseClient={supabase}\n          appearance={{ theme: ThemeSupa }}\n          theme=\"dark\"\n        />\n      ) : (\n        // highlight-next-line\n        <Account session={session} />\n      )}\n    </div>\n  )\n}\n\nexport default Home\n")),(0,s.kt)("p",null,"Once that's done, run this in a terminal window:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm run dev\n")),(0,s.kt)("p",null,"And then open the browser to ",(0,s.kt)("a",{parentName:"p",href:"http://localhost:3000"},"localhost:3000")," and you should see the completed app."),(0,s.kt)("h2",{id:"bonus-profile-photos"},"Bonus: Profile photos"),(0,s.kt)("p",null,"Every Supabase project is configured with ",(0,s.kt)("a",{parentName:"p",href:"/docs/guides/storage"},"Storage")," for managing large files like\nphotos and videos."),(0,s.kt)("h3",{id:"create-an-upload-widget"},"Create an upload widget"),(0,s.kt)("p",null,"Let's create an avatar widget for the user so that they can upload a profile photo. We can start by creating a new component:"),(0,s.kt)(r.Z,{groupId:"language",defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"js",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="components/Avatar.js"',title:'"components/Avatar.js"'},"import React, { useEffect, useState } from 'react'\nimport { useSupabaseClient } from '@supabase/auth-helpers-react'\n\nexport default function Avatar({ uid, url, size, onUpload }) {\n  const supabase = useSupabaseClient()\n  const [avatarUrl, setAvatarUrl] = useState(null)\n  const [uploading, setUploading] = useState(false)\n\n  useEffect(() => {\n    if (url) downloadImage(url)\n  }, [url])\n\n  async function downloadImage(path) {\n    try {\n      const { data, error } = await supabase.storage\n        .from('avatars')\n        .download(path)\n      if (error) {\n        throw error\n      }\n      const url = URL.createObjectURL(data)\n      setAvatarUrl(url)\n    } catch (error) {\n      console.log('Error downloading image: ', error)\n    }\n  }\n\n  const uploadAvatar = async (event) => {\n    try {\n      setUploading(true)\n\n      if (!event.target.files || event.target.files.length === 0) {\n        throw new Error('You must select an image to upload.')\n      }\n\n      const file = event.target.files[0]\n      const fileExt = file.name.split('.').pop()\n      const fileName = `${uid}.${fileExt}`\n      const filePath = `${fileName}`\n\n      let { error: uploadError } = await supabase.storage\n        .from('avatars')\n        .upload(filePath, file, { upsert: true })\n\n      if (uploadError) {\n        throw uploadError\n      }\n\n      onUpload(filePath)\n    } catch (error) {\n      alert('Error uploading avatar!')\n      console.log(error)\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  return (\n    <div>\n      {avatarUrl ? (\n        <img\n          src={avatarUrl}\n          alt=\"Avatar\"\n          className=\"avatar image\"\n          style={{ height: size, width: size }}\n        />\n      ) : (\n        <div\n          className=\"avatar no-image\"\n          style={{ height: size, width: size }}\n        />\n      )}\n      <div style={{ width: size }}>\n        <label className=\"button primary block\" htmlFor=\"single\">\n          {uploading ? 'Uploading ...' : 'Upload'}\n        </label>\n        <input\n          style={{\n            visibility: 'hidden',\n            position: 'absolute',\n          }}\n          type=\"file\"\n          id=\"single\"\n          accept=\"image/*\"\n          onChange={uploadAvatar}\n          disabled={uploading}\n        />\n      </div>\n    </div>\n  )\n}\n"))),(0,s.kt)(l.Z,{value:"ts",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/Avatar.tsx"',title:'"components/Avatar.tsx"'},"import React, { useEffect, useState } from 'react'\nimport { useSupabaseClient } from '@supabase/auth-helpers-react'\nimport { Database } from '../utils/database.types'\ntype Profiles = Database['public']['Tables']['profiles']['Row']\n\nexport default function Avatar({\n  uid,\n  url,\n  size,\n  onUpload,\n}: {\n  uid: string\n  url: Profiles['avatar_url']\n  size: number\n  onUpload: (url: string) => void\n}) {\n  const supabase = useSupabaseClient<Database>()\n  const [avatarUrl, setAvatarUrl] = useState<Profiles['avatar_url']>(null)\n  const [uploading, setUploading] = useState(false)\n\n  useEffect(() => {\n    if (url) downloadImage(url)\n  }, [url])\n\n  async function downloadImage(path: string) {\n    try {\n      const { data, error } = await supabase.storage\n        .from('avatars')\n        .download(path)\n      if (error) {\n        throw error\n      }\n      const url = URL.createObjectURL(data)\n      setAvatarUrl(url)\n    } catch (error) {\n      console.log('Error downloading image: ', error)\n    }\n  }\n\n  const uploadAvatar: React.ChangeEventHandler<HTMLInputElement> = async (\n    event\n  ) => {\n    try {\n      setUploading(true)\n\n      if (!event.target.files || event.target.files.length === 0) {\n        throw new Error('You must select an image to upload.')\n      }\n\n      const file = event.target.files[0]\n      const fileExt = file.name.split('.').pop()\n      const fileName = `${uid}.${fileExt}`\n      const filePath = `${fileName}`\n\n      let { error: uploadError } = await supabase.storage\n        .from('avatars')\n        .upload(filePath, file, { upsert: true })\n\n      if (uploadError) {\n        throw uploadError\n      }\n\n      onUpload(filePath)\n    } catch (error) {\n      alert('Error uploading avatar!')\n      console.log(error)\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  return (\n    <div>\n      {avatarUrl ? (\n        <img\n          src={avatarUrl}\n          alt=\"Avatar\"\n          className=\"avatar image\"\n          style={{ height: size, width: size }}\n        />\n      ) : (\n        <div\n          className=\"avatar no-image\"\n          style={{ height: size, width: size }}\n        />\n      )}\n      <div style={{ width: size }}>\n        <label className=\"button primary block\" htmlFor=\"single\">\n          {uploading ? 'Uploading ...' : 'Upload'}\n        </label>\n        <input\n          style={{\n            visibility: 'hidden',\n            position: 'absolute',\n          }}\n          type=\"file\"\n          id=\"single\"\n          accept=\"image/*\"\n          onChange={uploadAvatar}\n          disabled={uploading}\n        />\n      </div>\n    </div>\n  )\n}\n")))),(0,s.kt)("h3",{id:"add-the-new-widget"},"Add the new widget"),(0,s.kt)("p",null,"And then we can add the widget to the Account page:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="components/Account.js"',title:'"components/Account.js"'},"// Import the new component\nimport Avatar from './Avatar'\n\n// ...\n\nreturn (\n  <div className=\"form-widget\">\n    {/* Add to the body */}\n    <Avatar\n      uid={user.id}\n      url={avatar_url}\n      size={150}\n      onUpload={(url) => {\n        setAvatarUrl(url)\n        updateProfile({ username, website, avatar_url: url })\n      }}\n    />\n    {/* ... */}\n  </div>\n)\n")),(0,s.kt)("h2",{id:"next-steps"},"Next steps"),(0,s.kt)("p",null,"At this stage you have a fully functional application!"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"See the complete ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/supabase/supabase/tree/master/examples/user-management/nextjs-ts-user-management"},"example on GitHub")," and deploy it to Vercel."),(0,s.kt)("li",{parentName:"ul"},"Explore the ",(0,s.kt)("a",{parentName:"li",href:"https://supabase.com/docs/guides/auth/auth-helpers/auth-ui"},"pre-built Auth UI for React"),"."),(0,s.kt)("li",{parentName:"ul"},"Explore the ",(0,s.kt)("a",{parentName:"li",href:"https://supabase.com/docs/guides/auth/auth-helpers/nextjs"},"Auth Helpers for Next.js"),"."),(0,s.kt)("li",{parentName:"ul"},"Explore the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/psteinroe/supabase-cache-helpers"},"Supabase Cache Helpers"),"."),(0,s.kt)("li",{parentName:"ul"},"See the ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/vercel/nextjs-subscription-payments"},"Next.js Supscription Payments Starter")," template on GitHub."),(0,s.kt)("li",{parentName:"ul"},"Got a question? ",(0,s.kt)("a",{parentName:"li",href:"https://github.com/supabase/supabase/discussions"},"Ask here"),"."),(0,s.kt)("li",{parentName:"ul"},"Sign in: ",(0,s.kt)("a",{parentName:"li",href:"https://app.supabase.com"},"app.supabase.com"))))}g.isMDXComponent=!0},83900:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/user-management-demo-807ebc3917e770d969d27713c151126d.png"}}]);