"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[23305],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=l,h=c["".concat(o,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:l,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),l=n(86010);const r="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(r,i),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(87462),l=n(67294),r=n(86010),i=n(72389),s=n(67392),o=n(7094),p=n(12466);const u="tabList__CuJ",c="tabItem_LNqP";function m(e){const{lazy:t,block:n,defaultValue:i,values:m,groupId:d,className:h}=e,f=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=m??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,s.l)(g,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===i?i:i??f.find((e=>e.props.default))?.props.value??f[0].props.value;if(null!==k&&!g.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:y}=(0,o.U)(),[N,_]=(0,l.useState)(k),T=[],{blockElementScrollPositionUntilNextRender:x}=(0,p.o5)();if(null!=d){const e=v[d];null!=e&&e!==N&&g.some((t=>t.value===e))&&_(e)}const w=e=>{const t=e.currentTarget,n=T.indexOf(t),a=g[n].value;a!==N&&(x(t),_(a),null!=d&&y(d,String(a)))},P=e=>{let t=null;switch(e.key){case"Enter":w(e);break;case"ArrowRight":{const n=T.indexOf(e.currentTarget)+1;t=T[n]??T[0];break}case"ArrowLeft":{const n=T.indexOf(e.currentTarget)-1;t=T[n]??T[T.length-1];break}}t?.focus()};return l.createElement("div",{className:(0,r.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},h)},g.map((e=>{let{value:t,label:n,attributes:i}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>T.push(e),onKeyDown:P,onClick:w},i,{className:(0,r.Z)("tabs__item",c,i?.className,{"tabs__item--active":N===t})}),n??t)}))),t?(0,l.cloneElement)(f.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function d(e){const t=(0,i.Z)();return l.createElement(m,(0,a.Z)({key:String(t)},e))}},94827:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a=n(87462),l=(n(67294),n(3905)),r=n(65488),i=n(85162);const s={id:"pgtap",title:"pgTAP: Unit Testing",description:"Unit testing in PostgreSQL."},o=void 0,p={unversionedId:"guides/database/extensions/pgtap",id:"guides/database/extensions/pgtap",title:"pgTAP: Unit Testing",description:"Unit testing in PostgreSQL.",source:"@site/docs/guides/database/extensions/pgtap.mdx",sourceDirName:"guides/database/extensions",slug:"/guides/database/extensions/pgtap",permalink:"/docs/guides/database/extensions/pgtap",draft:!1,editUrl:"https://github.com/docs/guides/database/extensions/pgtap.mdx",tags:[],version:"current",frontMatter:{id:"pgtap",title:"pgTAP: Unit Testing",description:"Unit testing in PostgreSQL."}},u={},c=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Enable the extension",id:"enable-the-extension",level:3},{value:"Testing tables",id:"testing-tables",level:3},{value:"Testing columns",id:"testing-columns",level:3},{value:"Testing RLS Policies",id:"testing-rls-policies",level:3},{value:"Testing Functions",id:"testing-functions",level:3},{value:"Resources",id:"resources",level:2}],m={toc:c};function d(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"pgTAP")," is a unit testing extension for PostgreSQL."),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,"Let's cover some basic concepts:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Unit tests: allow you to test small parts of a system (like a database table!)."),(0,l.kt)("li",{parentName:"ul"},"TAP: stands for ",(0,l.kt)("a",{parentName:"li",href:"http://testanything.org/"},"Test Anything Protocol"),". It is an framework which aims to simplify the error reporting during testing.")),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("h3",{id:"enable-the-extension"},"Enable the extension"),(0,l.kt)(r.Z,{defaultValue:"dashboard",values:[{label:"Dashboard",value:"dashboard"},{label:"SQL",value:"sql"}],mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"dashboard",mdxType:"TabItem"},(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Go to the ",(0,l.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/database/tables"},"Database")," page in the Dashboard."),(0,l.kt)("li",{parentName:"ol"},"Click on ",(0,l.kt)("strong",{parentName:"li"},"Extensions")," in the sidebar."),(0,l.kt)("li",{parentName:"ol"},'Search for "pgtap" and enable the extension.'))),(0,l.kt)(i.Z,{value:"sql",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'-- Enable the "pgtap" extension\ncreate extension pgtap with schema extensions;\n\n-- Disable the "pgtap" extension\ndrop extension if exists pgtap;\n')),(0,l.kt)("p",null,"Even though the SQL code is ",(0,l.kt)("inlineCode",{parentName:"p"},"create extension"),', this is the equivalent of "enabling the extension".\nTo disable an extension you can call ',(0,l.kt)("inlineCode",{parentName:"p"},"drop extension"),"."),(0,l.kt)("p",null,"It's good practice to create the extension within a separate schema (like ",(0,l.kt)("inlineCode",{parentName:"p"},"extensions"),") to keep your database clean."))),(0,l.kt)("h3",{id:"testing-tables"},"Testing tables"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"begin;\nselect plan( 1 );\n\nselect has_table( 'profiles' );\n\nselect * from finish();\nrollback;\n")),(0,l.kt)("p",null,"API:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://pgtap.org/documentation.html#has_table"},(0,l.kt)("inlineCode",{parentName:"a"},"has_table()")),": Tests whether or not a table exists in the database"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://pgtap.org/documentation.html#has_index"},(0,l.kt)("inlineCode",{parentName:"a"},"has_index()")),": Checks for the existence of a named index associated with the named table."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://pgtap.org/documentation.html#has_relation"},(0,l.kt)("inlineCode",{parentName:"a"},"has_relation()")),": Tests whether or not a relation exists in the database.")),(0,l.kt)("h3",{id:"testing-columns"},"Testing columns"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"begin;\nselect plan( 2 );\n\nselect has_column( 'profiles', 'id' );  # test that the \"id\" column exists in the \"profiles\" table\nselect col_is_pk( 'profiles', 'id' );   # test that the \"id\" column is a primary key\n\nselect * from finish();\nrollback;\n")),(0,l.kt)("p",null,"API:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://pgtap.org/documentation.html#has_column"},(0,l.kt)("inlineCode",{parentName:"a"},"has_column()")),": Tests whether or not a column exists in a given table, view, materialized view or composite type."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://pgtap.org/documentation.html#col_is_pk"},(0,l.kt)("inlineCode",{parentName:"a"},"col_is_pk()")),": Tests whether the specified column or columns in a table is/are the primary key for that table.")),(0,l.kt)("h3",{id:"testing-rls-policies"},"Testing RLS Policies"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"begin;\nselect plan( 1 );\n\nselect policies_are(\n  'public',\n  'profiles',\n  ARRAY [\n    'Profiles are public', # Test that there is a policy called  \"Profiles are public\" on the \"profiles\" table.\n    'Profiles can only be updated by the owner'  # Test that there is a policy called  \"Profiles can only be updated by the owner\" on the \"profiles\" table.\n  ]\n);\n\nselect * from finish();\nrollback;\n")),(0,l.kt)("p",null,"API:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://pgtap.org/documentation.html#policies_are"},(0,l.kt)("inlineCode",{parentName:"a"},"policies_are()")),": Tests that all of the policies on the named table are only the policies that should be on that table."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://pgtap.org/documentation.html#policy_roles_are"},(0,l.kt)("inlineCode",{parentName:"a"},"policy_roles_are()")),": Tests whether the roles to which policy applies are only the roles that should be on that policy."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://pgtap.org/documentation.html#policy_cmd_is"},(0,l.kt)("inlineCode",{parentName:"a"},"policy_cmd_is()")),": Tests whether the command to which policy applies is same as command that is given in function arguments.")),(0,l.kt)("p",null,"You can also use the ",(0,l.kt)("inlineCode",{parentName:"p"},"results_eq()")," method to test that a Policy returns the correct data:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"begin;\nselect plan( 1 );\n\nselect results_eq(\n    'select * from profiles()',\n    $$VALUES ( 1, 'Anna'), (2, 'Bruce'), (3, 'Caryn')$$\n    'profiles() should return all users'\n);\n\n\nselect * from finish();\nrollback;\n")),(0,l.kt)("p",null,"API:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://pgtap.org/documentation.html#results_eq"},(0,l.kt)("inlineCode",{parentName:"a"},"results_eq()"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://pgtap.org/documentation.html#results_ne"},(0,l.kt)("inlineCode",{parentName:"a"},"results_ne()")))),(0,l.kt)("h3",{id:"testing-functions"},"Testing Functions"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"begin;\nselect plan( 1 );\n\nselect function_returns( 'hello_world', 'text' );                   # test if the function \"hello_world\" returns text\nselect function_returns( 'is_even', ARRAY['integer'], 'boolean' );  # test if the function \"is_even\" returns a boolean\nselect results_eq('select * from hello_world()', 'hello');          # test if the function \"hello_world\" returns \"hello\"\n\nselect * from finish();\nrollback;\n")),(0,l.kt)("p",null,"API:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://pgtap.org/documentation.html#function_returns"},(0,l.kt)("inlineCode",{parentName:"a"},"function_returns()")),": Tests that a particular function returns a particular data type"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://pgtap.org/documentation.html#is_definer"},(0,l.kt)("inlineCode",{parentName:"a"},"is_definer()")),": Tests that a function is a security definer (i.e., a \u201csetuid\u201d function).")),(0,l.kt)("h2",{id:"resources"},"Resources"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Official ",(0,l.kt)("a",{parentName:"li",href:"https://pgtap.org/"},(0,l.kt)("inlineCode",{parentName:"a"},"pgTAP")," documentation"))))}d.isMDXComponent=!0}}]);