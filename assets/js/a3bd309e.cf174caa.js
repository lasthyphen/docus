"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[11900],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(86010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,i),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(87462),r=n(67294),o=n(86010),i=n(72389),s=n(67392),l=n(7094),p=n(12466);const u="tabList__CuJ",c="tabItem_LNqP";function d(e){const{lazy:t,block:n,defaultValue:i,values:d,groupId:m,className:h}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=d??g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,s.l)(b,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===i?i:i??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==v&&!b.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:w}=(0,l.U)(),[y,N]=(0,r.useState)(v),S=[],{blockElementScrollPositionUntilNextRender:A}=(0,p.o5)();if(null!=m){const e=k[m];null!=e&&e!==y&&b.some((t=>t.value===e))&&N(e)}const I=e=>{const t=e.currentTarget,n=S.indexOf(t),a=b[n].value;a!==y&&(A(t),N(a),null!=m&&w(m,String(a)))},C=e=>{let t=null;switch(e.key){case"Enter":I(e);break;case"ArrowRight":{const n=S.indexOf(e.currentTarget)+1;t=S[n]??S[0];break}case"ArrowLeft":{const n=S.indexOf(e.currentTarget)-1;t=S[n]??S[S.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},h)},b.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,key:t,ref:e=>S.push(e),onKeyDown:C,onClick:I},i,{className:(0,o.Z)("tabs__item",c,i?.className,{"tabs__item--active":y===t})}),n??t)}))),t?(0,r.cloneElement)(g.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==y})))))}function m(e){const t=(0,i.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},66788:(e,t,n)=>{n.d(t,{ZP:()=>u});var a=n(87462),r=(n(67294),n(3905)),o=n(65488),i=n(85162);const s={toc:[]};function l(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- Create a table for public profiles\ncreate table profiles (\n  id uuid references auth.users not null primary key,\n  updated_at timestamp with time zone,\n  username text unique,\n  full_name text,\n  avatar_url text,\n  website text,\n\n  constraint username_length check (char_length(username) >= 3)\n);\n-- Set up Row Level Security (RLS)\n-- See https://supabase.com/docs/guides/auth/row-level-security for more details.\nalter table profiles\n  enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles\n  for select using (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles\n  for insert with check (auth.uid() = id);\n\ncreate policy \"Users can update own profile.\" on profiles\n  for update using (auth.uid() = id);\n\n-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.\n-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.\ncreate function public.handle_new_user()\nreturns trigger as $$\nbegin\n  insert into public.profiles (id, full_name, avatar_url)\n  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');\n  return new;\nend;\n$$ language plpgsql security definer;\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\n  values ('avatars', 'avatars');\n\n-- Set up access controls for storage.\n-- See https://supabase.com/docs/guides/storage#policy-examples for more details.\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects\n  for select using (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects\n  for insert with check (bucket_id = 'avatars');\n\ncreate policy \"Anyone can update their own avatar.\" on storage.objects\n  for update using (auth.uid() = owner) with check (bucket_id = 'avatars');\n")))}l.isMDXComponent=!0;const p={toc:[{value:"Project set up",id:"project-set-up",level:2},{value:"Create a project",id:"create-a-project",level:3},{value:"Set up the database schema",id:"set-up-the-database-schema",level:3},{value:"Get the API Keys",id:"get-the-api-keys",level:3}]};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"project-set-up"},"Project set up"),(0,r.kt)("p",null,'Before we start building we\'re going to set up our Database and API. This is as simple as starting a new Project in Supabase\nand then creating a "schema" inside the database.'),(0,r.kt)("h3",{id:"create-a-project"},"Create a project"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Go to ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com"},"app.supabase.com"),"."),(0,r.kt)("li",{parentName:"ol"},'Click on "New Project".'),(0,r.kt)("li",{parentName:"ol"},"Enter your project details."),(0,r.kt)("li",{parentName:"ol"},"Wait for the new database to launch.")),(0,r.kt)("h3",{id:"set-up-the-database-schema"},"Set up the database schema"),(0,r.kt)("p",null,'Now we are going to set up the database schema. We can use the "User Management Starter" quickstart in the SQL Editor,\nor you can just copy/paste the SQL from below and run it yourself.'),(0,r.kt)(o.Z,{groupId:"language",defaultValue:"dashboard",values:[{label:"Dashboard",value:"dashboard"},{label:"SQL",value:"sql"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"dashboard",mdxType:"TabItem"},(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Go to the ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/sql"},"SQL Editor")," page in the Dashboard."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"User Management Starter"),"."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"Run"),".")),(0,r.kt)("video",{width:"99%",muted:!0,playsInline:!0,controls:"true"},(0,r.kt)("source",{src:"/docs/videos/sql-user-management-starter.mp4",type:"video/mp4",muted:!0,playsInline:!0}))),(0,r.kt)(i.Z,{value:"sql",mdxType:"TabItem"},(0,r.kt)(l,{mdxType:"UserManagementSQLTemplate"}))),(0,r.kt)("h3",{id:"get-the-api-keys"},"Get the API Keys"),(0,r.kt)("p",null,"Now that you've created some database tables, you are ready to insert data using the auto-generated API.\nWe just need to get the URL and ",(0,r.kt)("inlineCode",{parentName:"p"},"anon")," key from the API settings."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Go to the ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/settings"},"Settings")," page in the Dashboard."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"API")," in the sidebar."),(0,r.kt)("li",{parentName:"ol"},"Find your API ",(0,r.kt)("inlineCode",{parentName:"li"},"URL"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"anon"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"service_role")," keys on this page.")),(0,r.kt)("video",{width:"99%",muted:!0,playsInline:!0,controls:"true"},(0,r.kt)("source",{src:"/docs/videos/api/api-url-and-key.mp4",type:"video/mp4",muted:!0,playsInline:!0})))}u.isMDXComponent=!0},27021:(e,t,n)=>{n.d(t,{ZP:()=>i});var a=n(87462),r=(n(67294),n(3905));const o={toc:[{value:"Intro",id:"intro",level:2}]};function i(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"intro"},"Intro"),(0,r.kt)("p",null,"This example provides the steps to build a basic user management app. It includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Supabase ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/database"},"Database"),": a Postgres database for storing your user data."),(0,r.kt)("li",{parentName:"ul"},"Supabase ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/auth"},"Auth"),": users can sign in with magic links (no passwords, only email)."),(0,r.kt)("li",{parentName:"ul"},"Supabase ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/storage"},"Storage"),": users can upload a photo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/guides/auth#row-level-security"},"Row Level Security"),": data is protected so that individuals can only access their own data."),(0,r.kt)("li",{parentName:"ul"},"Instant ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/api"},"APIs"),": APIs will be automatically generated when you create your database tables.")),(0,r.kt)("p",null,"By the end of this guide you'll have an app which allows users to login and update some basic profile details:"))}i.isMDXComponent=!0},92370:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),o=(n(65488),n(85162),n(27021)),i=n(66788);const s={id:"with-ionic-angular",title:"Quickstart: Ionic Angular",description:"Learn how to use Supabase in your Ionic Angular App.",sidebar_label:"Ionic Angular"},l=void 0,p={unversionedId:"guides/with-ionic-angular",id:"guides/with-ionic-angular",title:"Quickstart: Ionic Angular",description:"Learn how to use Supabase in your Ionic Angular App.",source:"@site/docs/guides/with-ionic-angular.mdx",sourceDirName:"guides",slug:"/guides/with-ionic-angular",permalink:"/docs/guides/with-ionic-angular",draft:!1,editUrl:"https://github.com/docs/guides/with-ionic-angular.mdx",tags:[],version:"current",frontMatter:{id:"with-ionic-angular",title:"Quickstart: Ionic Angular",description:"Learn how to use Supabase in your Ionic Angular App.",sidebar_label:"Ionic Angular"}},u={},c=[{value:"GitHub",id:"github",level:3},{value:"Building the App",id:"building-the-app",level:2},{value:"Initialize an Ionic Angular app",id:"initialize-an-ionic-angular-app",level:3},{value:"Set up a Login route",id:"set-up-a-login-route",level:3},{value:"Account page",id:"account-page",level:3},{value:"Launch!",id:"launch",level:3},{value:"Bonus: Profile photos",id:"bonus-profile-photos",level:2},{value:"Create an upload widget",id:"create-an-upload-widget",level:3},{value:"Add the new widget",id:"add-the-new-widget",level:3},{value:"Next steps",id:"next-steps",level:2}],d={toc:c};function m(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(o.ZP,{mdxType:"QuickstartIntro"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Supabase User Management example",src:n(51918).Z,width:"2414",height:"1790"})),(0,r.kt)("h3",{id:"github"},"GitHub"),(0,r.kt)("p",null,"Should you get stuck while working through the guide, refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mhartington/supabase-ionic-angular"},"this repo"),"."),(0,r.kt)(i.ZP,{mdxType:"ProjectSetup"}),(0,r.kt)("h2",{id:"building-the-app"},"Building the App"),(0,r.kt)("p",null,"Let's start building the Angular app from scratch."),(0,r.kt)("h3",{id:"initialize-an-ionic-angular-app"},"Initialize an Ionic Angular app"),(0,r.kt)("p",null,"We can use the ",(0,r.kt)("a",{parentName:"p",href:"https://ionicframework.com/docs/cli"},"Ionic CLI")," to initialize\nan app called ",(0,r.kt)("inlineCode",{parentName:"p"},"supabase-ionic-angular"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g @ionic/cli\nionic start supabase-ionic-angular blank --type angular\ncd supabase-ionic-angular\n")),(0,r.kt)("p",null,"Then let's install the only additional dependency: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/supabase/supabase-js"},"supabase-js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @supabase/supabase-js\n")),(0,r.kt)("p",null,"And finally we want to save the environment variables in the ",(0,r.kt)("inlineCode",{parentName:"p"},"environment.ts")," file.\nAll we need are the API URL and the ",(0,r.kt)("inlineCode",{parentName:"p"},"anon")," key that you copied ",(0,r.kt)("a",{parentName:"p",href:"#get-the-api-keys"},"earlier"),".\nThese variables will be exposed on the browser, and that's completely fine since we have ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/auth#row-level-security"},"Row Level Security")," enabled on our Database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="environment.ts"',title:'"environment.ts"'},"export const environment = {\n  production: false,\n  supabaseUrl: 'YOUR_SUPABASE_URL',\n  supabaseKey: 'YOUR_SUPABASE_KEY',\n}\n")),(0,r.kt)("p",null,"Now that we have the API credentials in place, let's create a ",(0,r.kt)("strong",{parentName:"p"},"SupabaseService")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"ionic g s supabase")," to initialize the Supabase client and implement functions to communicate with the Supabase API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/supabase.service.ts"',title:'"src/app/supabase.service.ts"'},"import { Injectable } from '@angular/core'\nimport { LoadingController, ToastController } from '@ionic/angular'\nimport {\n  AuthChangeEvent,\n  createClient,\n  Session,\n  SupabaseClient,\n} from '@supabase/supabase-js'\nimport { environment } from '../environments/environment'\n\nexport interface Profile {\n  username: string\n  website: string\n  avatar_url: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SupabaseService {\n  private supabase: SupabaseClient\n\n  constructor(\n    private loadingCtrl: LoadingController,\n    private toastCtrl: ToastController\n  ) {\n    this.supabase = createClient(\n      environment.supabaseUrl,\n      environment.supabaseKey\n    )\n  }\n\n  get user() {\n    return this.supabase.auth.user()\n  }\n\n  get session() {\n    return this.supabase.auth.session()\n  }\n\n  get profile() {\n    return this.supabase\n      .from('profiles')\n      .select(`username, website, avatar_url`)\n      .eq('id', this.user?.id)\n      .single()\n  }\n\n  authChanges(\n    callback: (event: AuthChangeEvent, session: Session | null) => void\n  ) {\n    return this.supabase.auth.onAuthStateChange(callback)\n  }\n\n  signIn(email: string) {\n    return this.supabase.auth.signIn({ email })\n  }\n\n  signOut() {\n    return this.supabase.auth.signOut()\n  }\n\n  updateProfile(profile: Profile) {\n    const update = {\n      ...profile,\n      id: this.user?.id,\n      updated_at: new Date(),\n    }\n\n    return this.supabase.from('profiles').upsert(update, {\n      returning: 'minimal', // Don't return the value after inserting\n    })\n  }\n\n  downLoadImage(path: string) {\n    return this.supabase.storage.from('avatars').download(path)\n  }\n\n  uploadAvatar(filePath: string, file: File) {\n    return this.supabase.storage.from('avatars').upload(filePath, file)\n  }\n\n  async createNotice(message: string) {\n    const toast = await this.toastCtrl.create({ message, duration: 5000 })\n    await toast.present()\n  }\n\n  createLoader() {\n    return this.loadingCtrl.create()\n  }\n}\n")),(0,r.kt)("h3",{id:"set-up-a-login-route"},"Set up a Login route"),(0,r.kt)("p",null,"Let's set up an route to manage logins and sign ups. We'll use Magic Links, so users can sign in with their email without using passwords.\nCreate an ",(0,r.kt)("strong",{parentName:"p"},"LoginPage")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"ionic g page login")," Ionic CLI command."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This guide will show the template inline, but the example app will have templateUrls")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/login/login.page.ts"',title:'"src/app/login/login.page.ts"'},'import { Component, OnInit } from \'@angular/core\'\nimport { SupabaseService } from \'../supabase.service\'\n\n@Component({\n  selector: \'app-login\',\n  template: `\n    <ion-header>\n      <ion-toolbar>\n        <ion-title>Login</ion-title>\n      </ion-toolbar>\n    </ion-header>\n\n    <ion-content>\n      <div class="ion-padding">\n        <h1>Supabase + Ionic Angular</h1>\n        <p>Sign in via magic link with your email below</p>\n      </div>\n      <ion-list inset="true">\n        <form (ngSubmit)="handleLogin($event)">\n          <ion-item>\n            <ion-label position="stacked">Email</ion-label>\n            <ion-input\n              [(ngModel)]="email"\n              name="email"\n              autocomplete\n              type="email"\n            ></ion-input>\n          </ion-item>\n          <div class="ion-text-center">\n            <ion-button type="submit" fill="clear">Login</ion-button>\n          </div>\n        </form>\n      </ion-list>\n    </ion-content>\n  `,\n  styleUrls: [\'./login.page.scss\'],\n})\nexport class LoginPage implements OnInit {\n  email = \'\'\n  constructor(private readonly supabase: SupabaseService) {}\n\n  ngOnInit() {}\n  async handleLogin(event: any) {\n    event.preventDefault()\n    const loader = await this.supabase.createLoader()\n    await loader.present()\n    try {\n      await this.supabase.signIn(this.email)\n      await loader.dismiss()\n      await this.supabase.createNotice(\'Check your email for the login link!\')\n    } catch (error) {\n      await loader.dismiss()\n      await this.supabase.createNotice(error.error_description || error.message)\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"account-page"},"Account page"),(0,r.kt)("p",null,"After a user is signed in we can allow them to edit their profile details and manage their account.\nCreate an ",(0,r.kt)("strong",{parentName:"p"},"AccountComponent")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"ionic g page account")," Ionic CLI command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/account.component.ts"',title:'"src/app/account.component.ts"'},'import { Component, OnInit } from \'@angular/core\'\nimport { Router } from \'@angular/router\'\nimport { Profile, SupabaseService } from \'../supabase.service\'\n\n@Component({\n  selector: \'app-account\',\n  template: `\n    <ion-header>\n      <ion-toolbar>\n        <ion-title>Account</ion-title>\n      </ion-toolbar>\n    </ion-header>\n\n    <ion-content>\n      <form>\n        <ion-item>\n          <ion-label position="stacked">Email</ion-label>\n          <ion-input type="email" [value]="session?.user?.email"></ion-input>\n        </ion-item>\n\n        <ion-item>\n          <ion-label position="stacked">Name</ion-label>\n          <ion-input\n            type="text"\n            name="username"\n            [(ngModel)]="profile.username"\n          ></ion-input>\n        </ion-item>\n\n        <ion-item>\n          <ion-label position="stacked">Website</ion-label>\n          <ion-input\n            type="url"\n            name="website"\n            [(ngModel)]="profile.website"\n          ></ion-input>\n        </ion-item>\n        <div class="ion-text-center">\n          <ion-button fill="clear" (click)="updateProfile()"\n            >Update Profile</ion-button\n          >\n        </div>\n      </form>\n\n      <div class="ion-text-center">\n        <ion-button fill="clear" (click)="signOut()">Log Out</ion-button>\n      </div>\n    </ion-content>\n  `,\n  styleUrls: [\'./account.page.scss\'],\n})\nexport class AccountPage implements OnInit {\n  profile: Profile = {\n    username: \'\',\n    avatar_url: \'\',\n    website: \'\',\n  }\n\n  session = this.supabase.session\n\n  constructor(\n    private readonly supabase: SupabaseService,\n    private router: Router\n  ) {}\n  ngOnInit() {\n    this.getProfile()\n  }\n\n  async getProfile() {\n    try {\n      let { data: profile, error, status } = await this.supabase.profile\n      if (error && status !== 406) {\n        throw error\n      }\n      if (profile) {\n        this.profile = profile\n      }\n    } catch (error) {\n      alert(error.message)\n    }\n  }\n\n  async updateProfile(avatar_url: string = \'\') {\n    const loader = await this.supabase.createLoader()\n    await loader.present()\n    try {\n      await this.supabase.updateProfile({ ...this.profile, avatar_url })\n      await loader.dismiss()\n      await this.supabase.createNotice(\'Profile updated!\')\n    } catch (error) {\n      await this.supabase.createNotice(error.message)\n    }\n  }\n\n  async signOut() {\n    console.log(\'testing?\')\n    await this.supabase.signOut()\n    this.router.navigate([\'/\'], { replaceUrl: true })\n  }\n}\n')),(0,r.kt)("h3",{id:"launch"},"Launch!"),(0,r.kt)("p",null,"Now that we have all the components in place, let's update ",(0,r.kt)("strong",{parentName:"p"},"AppComponent"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/app.component.ts"',title:'"src/app/app.component.ts"'},"import { Component } from '@angular/core'\nimport { Router } from '@angular/router'\nimport { SupabaseService } from './supabase.service'\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <ion-app>\n      <ion-router-outlet></ion-router-outlet>\n    </ion-app>\n  `,\n  styleUrls: ['app.component.scss'],\n})\nexport class AppComponent {\n  constructor(private supabase: SupabaseService, private router: Router) {\n    this.supabase.authChanges((_, session) => {\n      console.log(session)\n      if (session?.user) {\n        this.router.navigate(['/account'])\n      }\n    })\n  }\n}\n")),(0,r.kt)("p",null,"Then update the ",(0,r.kt)("strong",{parentName:"p"},"AppRoutingModule")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/app.ts"',title:'"src/app/app.ts"'},"import { NgModule } from '@angular/core'\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router'\n\nconst routes: Routes = [\n  {\n    path: '/',\n    loadChildren: () =>\n      import('./login/login.module').then((m) => m.LoginPageModule),\n  },\n  {\n    path: 'account',\n    loadChildren: () =>\n      import('./account/account.module').then((m) => m.AccountPageModule),\n  },\n]\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, {\n      preloadingStrategy: PreloadAllModules,\n    }),\n  ],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n")),(0,r.kt)("p",null,"Once that's done, run this in a terminal window:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ionic serve\n")),(0,r.kt)("p",null,"And the browser will auomatically open to show the app."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Supabase Angular",src:n(83322).Z,width:"2414",height:"1790"})),(0,r.kt)("h2",{id:"bonus-profile-photos"},"Bonus: Profile photos"),(0,r.kt)("p",null,"Every Supabase project is configured with ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/storage"},"Storage")," for managing large files like photos and videos."),(0,r.kt)("h3",{id:"create-an-upload-widget"},"Create an upload widget"),(0,r.kt)("p",null,"Let's create an avatar for the user so that they can upload a profile photo."),(0,r.kt)("p",null,"First install two packages in order to interact with the user's camera."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @ionic/pwa-elements @capacitor/camera\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://capacitorjs.com"},"CapacitorJS")," is a cross platform native runtime from Ionic that enables web apps to be deployed through the app store and provides access to native deavice API."),(0,r.kt)("p",null,"Ionic PWA elements is a companion package that will polyfill certain browser APIs that provide no user interface with custom Ionic UI."),(0,r.kt)("p",null,"With those packages installed we can update our ",(0,r.kt)("inlineCode",{parentName:"p"},"main.ts")," to include an additional bootstapping call for the Ionic PWA Elements."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/main.ts"',title:'"src/main.ts"'},"import { enableProdMode } from '@angular/core'\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic'\n\nimport { AppModule } from './app/app.module'\nimport { environment } from './environments/environment'\n\nimport { defineCustomElements } from '@ionic/pwa-elements/loader'\ndefineCustomElements(window)\n\nif (environment.production) {\n  enableProdMode()\n}\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch((err) => console.log(err))\n")),(0,r.kt)("p",null,"Then create an ",(0,r.kt)("strong",{parentName:"p"},"AvatarComponent")," with this Ionic CLI command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"}," ionic g component avatar --module=/src/app/account/account.module.ts --create-module\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/avatar.component.ts"',title:'"src/app/avatar.component.ts"'},"import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core'\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser'\nimport { SupabaseService } from '../supabase.service'\nimport { Camera, CameraResultType } from '@capacitor/camera'\n@Component({\n  selector: 'app-avatar',\n  template: `\n    <div class=\"avatar_wrapper\" (click)=\"uploadAvatar()\">\n      <img *ngIf=\"_avatarUrl; else noAvatar\" [src]=\"_avatarUrl\" />\n      <ng-template #noAvatar>\n        <ion-icon name=\"person\" class=\"no-avatar\"></ion-icon>\n      </ng-template>\n    </div>\n  `,\n  style: [\n    `\n    :host {\n       display: block;\n       margin: auto;\n       min-height: 150px;\n    }\n     :host .avatar_wrapper {\n       margin: 16px auto 16px;\n       border-radius: 50%;\n       overflow: hidden;\n       height: 150px;\n       aspect-ratio: 1;\n       background: var(--ion-color-step-50);\n       border: thick solid var(--ion-color-step-200);\n    }\n     :host .avatar_wrapper:hover {\n       cursor: pointer;\n    }\n     :host .avatar_wrapper ion-icon.no-avatar {\n       width: 100%;\n       height: 115%;\n    }\n     :host img {\n       display: block;\n       object-fit: cover;\n       width: 100%;\n       height: 100%;\n    }\n  `,\n  ],\n})\nexport class AvatarComponent implements OnInit {\n  _avatarUrl: SafeResourceUrl | undefined\n  uploading = false\n\n  @Input()\n  set avatarUrl(url: string | undefined) {\n    if (url) {\n      this.downloadImage(url)\n    }\n  }\n\n  @Output() upload = new EventEmitter<string>()\n\n  constructor(\n    private readonly supabase: SupabaseService,\n    private readonly dom: DomSanitizer\n  ) {}\n\n  ngOnInit() {}\n\n  async downloadImage(path: string) {\n    try {\n      const { data } = await this.supabase.downLoadImage(path)\n      this._avatarUrl = this.dom.bypassSecurityTrustResourceUrl(\n        URL.createObjectURL(data)\n      )\n    } catch (error) {\n      console.error('Error downloading image: ', error.message)\n    }\n  }\n\n  async uploadAvatar() {\n    const loader = await this.supabase.createLoader()\n    try {\n      const photo = await Camera.getPhoto({\n        resultType: CameraResultType.DataUrl,\n      })\n\n      const file = await fetch(photo.dataUrl)\n        .then((res) => res.blob())\n        .then(\n          (blob) =>\n            new File([blob], 'my-file', { type: `image/${photo.format}` })\n        )\n\n      const fileName = `${Math.random()}-${new Date().getTime()}.${\n        photo.format\n      }`\n\n      await loader.present()\n      await this.supabase.uploadAvatar(fileName, file)\n\n      this.upload.emit(fileName)\n    } catch (error) {\n      this.supabase.createNotice(error.message)\n    } finally {\n      loader.dismiss()\n    }\n  }\n}\n")),(0,r.kt)("h3",{id:"add-the-new-widget"},"Add the new widget"),(0,r.kt)("p",null,"And then we can add the widget on top of the ",(0,r.kt)("strong",{parentName:"p"},"AccountComponent")," html template:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/account.component.ts"',title:'"src/app/account.component.ts"'},'template: `\n<ion-header>\n  <ion-toolbar>\n    <ion-title>Account</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <app-avatar\n    [avatarUrl]="this.profile?.avatar_url"\n    (upload)="updateProfile($event)"\n  ></app-avatar>\n\n\x3c!-- input fields --\x3e\n`\n')),(0,r.kt)("h2",{id:"next-steps"},"Next steps"),(0,r.kt)("p",null,"At this stage you have a fully functional application!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Got a question? ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/supabase/supabase/discussions"},"Ask here"),"."),(0,r.kt)("li",{parentName:"ul"},"Sign in: ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com"},"app.supabase.com"))))}m.isMDXComponent=!0},51918:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/ionic-angular-account-33770dcbf7c6a89b356a58c8e7b9f318.png"},83322:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/ionic-angular-5a78b848f5571bf92ffbc30c6a0a3416.png"}}]);