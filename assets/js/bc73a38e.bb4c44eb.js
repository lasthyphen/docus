"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[23731],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(a),b=r,g=u["".concat(l,".").concat(b)]||u[b]||d[b]||o;return a?n.createElement(g,s(s({ref:t},p),{},{components:a})):n.createElement(g,s({ref:t},p))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=b;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}b.displayName="MDXCreateElement"},18329:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={id:"migrating-between-projects",title:"Migrating Between Projects",description:"Migrate data from one project to another"},s=void 0,i={unversionedId:"guides/database/migrating-between-projects",id:"guides/database/migrating-between-projects",title:"Migrating Between Projects",description:"Migrate data from one project to another",source:"@site/docs/guides/database/migrating-between-projects.mdx",sourceDirName:"guides/database",slug:"/guides/database/migrating-between-projects",permalink:"/docs/guides/database/migrating-between-projects",draft:!1,editUrl:"https://github.com/docs/guides/database/migrating-between-projects.mdx",tags:[],version:"current",frontMatter:{id:"migrating-between-projects",title:"Migrating Between Projects",description:"Migrate data from one project to another"}},l={},c=[{value:"Before you begin",id:"before-you-begin",level:2},{value:"Migrate the database",id:"migrate-the-database",level:2},{value:"Enable publication on tables",id:"enable-publication-on-tables",level:2},{value:"Migrate Storage objects",id:"migrate-storage-objects",level:2}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Migrating projects can be achieved using standard PostgreSQL tooling. This is particularly useful for older projects (e.g. to use a newer Postgres version)."),(0,r.kt)("h2",{id:"before-you-begin"},"Before you begin"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Install ",(0,r.kt)("a",{parentName:"li",href:"https://www.postgresql.org/download/"},"Postgres")," so you can run ",(0,r.kt)("inlineCode",{parentName:"li"},"psql")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"pg_dump"),"."),(0,r.kt)("li",{parentName:"ul"},"Create a new ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com"},"Supabase project"),"."),(0,r.kt)("li",{parentName:"ul"},"Store the old project's database URL as ",(0,r.kt)("inlineCode",{parentName:"li"},"$OLD_DB_URL")," and the new project's as ",(0,r.kt)("inlineCode",{parentName:"li"},"$NEW_DB_URL"),".")),(0,r.kt)("h2",{id:"migrate-the-database"},"Migrate the database"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Enable ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/database/hooks"},"Database Webhooks")," in your new project if you enabled them in your old project."),(0,r.kt)("li",{parentName:"ol"},"In your new project, enable all extensions that were enabled in your old project."),(0,r.kt)("li",{parentName:"ol"},"Run the following command from your terminal:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'set -euo pipefail\n\npg_dump \\\n  --clean \\\n  --if-exists \\\n  --quote-all-identifiers \\\n  --exclude-table-data \'storage.objects\' \\\n  --exclude-schema \'extensions|graphql|graphql_public|net|pgbouncer|pgsodium|pgsodium_masks|realtime|supabase_functions|pg_toast|pg_catalog|information_schema\' \\\n  --schema \'*\' \\\n  --dbname "$OLD_DB_URL" \\\n| sed \'s/^DROP SCHEMA IF EXISTS "auth";$/-- DROP SCHEMA IF EXISTS "auth";/\' \\\n| sed \'s/^DROP SCHEMA IF EXISTS "storage";$/-- DROP SCHEMA IF EXISTS "storage";/\' \\\n| sed \'s/^CREATE SCHEMA "auth";$/-- CREATE SCHEMA "auth";/\' \\\n| sed \'s/^CREATE SCHEMA "storage";$/-- CREATE SCHEMA "storage";/\' \\\n| sed \'s/^ALTER DEFAULT PRIVILEGES FOR ROLE "supabase_admin"/-- ALTER DEFAULT PRIVILEGES FOR ROLE "supabase_admin"/\' \\\n> dump.sql\n\npsql \\\n  --single-transaction \\\n  --variable ON_ERROR_STOP=1 \\\n  --file dump.sql \\\n  --dbname "$NEW_DB_URL"\n')),(0,r.kt)("h2",{id:"enable-publication-on-tables"},"Enable publication on tables"),(0,r.kt)("p",null,"Replication for Realtime is disabled for all tables in your new project. On the ",(0,r.kt)("a",{parentName:"p",href:"https://app.supabase.com/project/_/database/replication"},"Replication")," page in the Dashboard, select your new project and enable replication for tables that were enabled in your old project."),(0,r.kt)("h2",{id:"migrate-storage-objects"},"Migrate Storage objects"),(0,r.kt)("p",null,"The new project has the old project's Storage buckets, but the Storage objects need to be migrated manually. Use this script to move storage objects from one project to another. If you have more than 10k objects, we can move the objects for you. Just contact us at ",(0,r.kt)("a",{parentName:"p",href:"mailto:support@supabase.com"},"support@supabase.com"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// npm install @supabase/supabase-js@1\nconst { createClient } = require('@supabase/supabase-js')\n\nconst OLD_PROJECT_URL = 'https://xxx.supabase.co'\nconst OLD_PROJECT_SERVICE_KEY = 'old-project-service-key-xxx'\n\nconst NEW_PROJECT_URL = 'https://yyy.supabase.co'\nconst NEW_PROJECT_SERVICE_KEY = 'new-project-service-key-yyy'\n\n;(async () => {\n  const oldSupabaseRestClient = createClient(\n    OLD_PROJECT_URL,\n    OLD_PROJECT_SERVICE_KEY,\n    {\n      schema: 'storage',\n    }\n  )\n  const oldSupabaseClient = createClient(\n    OLD_PROJECT_URL,\n    OLD_PROJECT_SERVICE_KEY\n  )\n  const newSupabaseClient = createClient(\n    NEW_PROJECT_URL,\n    NEW_PROJECT_SERVICE_KEY\n  )\n\n  // make sure you update max_rows in postgrest settings if you have a lot of objects\n  // or paginate here\n  const { data: oldObjects, error } = await oldSupabaseRestClient\n    .from('objects')\n    .select()\n  if (error) {\n    console.log('error getting objects from old bucket')\n    throw error\n  }\n\n  for (const objectData of oldObjects) {\n    console.log(`moving ${objectData.id}`)\n    try {\n      const { data, error: downloadObjectError } =\n        await oldSupabaseClient.storage\n          .from(objectData.bucket_id)\n          .download(objectData.name)\n      if (downloadObjectError) {\n        throw downloadObjectError\n      }\n\n      const { _, error: uploadObjectError } = await newSupabaseClient.storage\n        .from(objectData.bucket_id)\n        .upload(objectData.name, data, {\n          upsert: true,\n          contentType: objectData.metadata.mimetype,\n          cacheControl: objectData.metadata.cacheControl,\n        })\n      if (uploadObjectError) {\n        throw uploadObjectError\n      }\n    } catch (err) {\n      console.log('error moving ', objectData)\n      console.log(err)\n    }\n  }\n})()\n")))}u.isMDXComponent=!0}}]);