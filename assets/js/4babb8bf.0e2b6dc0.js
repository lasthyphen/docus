"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[65095],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||s;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(86010);const s="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(87462),r=n(67294),s=n(86010),o=n(72389),i=n(67392),l=n(7094),p=n(12466);const u="tabList__CuJ",c="tabItem_LNqP";function m(e){const{lazy:t,block:n,defaultValue:o,values:m,groupId:d,className:h}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),b=(0,i.l)(f,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===o?o:o??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==v&&!f.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:y}=(0,l.U)(),[w,N]=(0,r.useState)(v),S=[],{blockElementScrollPositionUntilNextRender:A}=(0,p.o5)();if(null!=d){const e=k[d];null!=e&&e!==w&&f.some((t=>t.value===e))&&N(e)}const C=e=>{const t=e.currentTarget,n=S.indexOf(t),a=f[n].value;a!==w&&(A(t),N(a),null!=d&&y(d,String(a)))},I=e=>{let t=null;switch(e.key){case"Enter":C(e);break;case"ArrowRight":{const n=S.indexOf(e.currentTarget)+1;t=S[n]??S[0];break}case"ArrowLeft":{const n=S.indexOf(e.currentTarget)-1;t=S[n]??S[S.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},h)},f.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>S.push(e),onKeyDown:I,onClick:C},o,{className:(0,s.Z)("tabs__item",c,o?.className,{"tabs__item--active":w===t})}),n??t)}))),t?(0,r.cloneElement)(g.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function d(e){const t=(0,o.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},66788:(e,t,n)=>{n.d(t,{ZP:()=>u});var a=n(87462),r=(n(67294),n(3905)),s=n(65488),o=n(85162);const i={toc:[]};function l(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- Create a table for public profiles\ncreate table profiles (\n  id uuid references auth.users not null primary key,\n  updated_at timestamp with time zone,\n  username text unique,\n  full_name text,\n  avatar_url text,\n  website text,\n\n  constraint username_length check (char_length(username) >= 3)\n);\n-- Set up Row Level Security (RLS)\n-- See https://supabase.com/docs/guides/auth/row-level-security for more details.\nalter table profiles\n  enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles\n  for select using (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles\n  for insert with check (auth.uid() = id);\n\ncreate policy \"Users can update own profile.\" on profiles\n  for update using (auth.uid() = id);\n\n-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.\n-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.\ncreate function public.handle_new_user()\nreturns trigger as $$\nbegin\n  insert into public.profiles (id, full_name, avatar_url)\n  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');\n  return new;\nend;\n$$ language plpgsql security definer;\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\n  values ('avatars', 'avatars');\n\n-- Set up access controls for storage.\n-- See https://supabase.com/docs/guides/storage#policy-examples for more details.\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects\n  for select using (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects\n  for insert with check (bucket_id = 'avatars');\n\ncreate policy \"Anyone can update their own avatar.\" on storage.objects\n  for update using (auth.uid() = owner) with check (bucket_id = 'avatars');\n")))}l.isMDXComponent=!0;const p={toc:[{value:"Project set up",id:"project-set-up",level:2},{value:"Create a project",id:"create-a-project",level:3},{value:"Set up the database schema",id:"set-up-the-database-schema",level:3},{value:"Get the API Keys",id:"get-the-api-keys",level:3}]};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"project-set-up"},"Project set up"),(0,r.kt)("p",null,'Before we start building we\'re going to set up our Database and API. This is as simple as starting a new Project in Supabase\nand then creating a "schema" inside the database.'),(0,r.kt)("h3",{id:"create-a-project"},"Create a project"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Go to ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com"},"app.supabase.com"),"."),(0,r.kt)("li",{parentName:"ol"},'Click on "New Project".'),(0,r.kt)("li",{parentName:"ol"},"Enter your project details."),(0,r.kt)("li",{parentName:"ol"},"Wait for the new database to launch.")),(0,r.kt)("h3",{id:"set-up-the-database-schema"},"Set up the database schema"),(0,r.kt)("p",null,'Now we are going to set up the database schema. We can use the "User Management Starter" quickstart in the SQL Editor,\nor you can just copy/paste the SQL from below and run it yourself.'),(0,r.kt)(s.Z,{groupId:"language",defaultValue:"dashboard",values:[{label:"Dashboard",value:"dashboard"},{label:"SQL",value:"sql"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"dashboard",mdxType:"TabItem"},(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Go to the ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/sql"},"SQL Editor")," page in the Dashboard."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"User Management Starter"),"."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"Run"),".")),(0,r.kt)("video",{width:"99%",muted:!0,playsInline:!0,controls:"true"},(0,r.kt)("source",{src:"/docs/videos/sql-user-management-starter.mp4",type:"video/mp4",muted:!0,playsInline:!0}))),(0,r.kt)(o.Z,{value:"sql",mdxType:"TabItem"},(0,r.kt)(l,{mdxType:"UserManagementSQLTemplate"}))),(0,r.kt)("h3",{id:"get-the-api-keys"},"Get the API Keys"),(0,r.kt)("p",null,"Now that you've created some database tables, you are ready to insert data using the auto-generated API.\nWe just need to get the URL and ",(0,r.kt)("inlineCode",{parentName:"p"},"anon")," key from the API settings."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Go to the ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/settings"},"Settings")," page in the Dashboard."),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("strong",{parentName:"li"},"API")," in the sidebar."),(0,r.kt)("li",{parentName:"ol"},"Find your API ",(0,r.kt)("inlineCode",{parentName:"li"},"URL"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"anon"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"service_role")," keys on this page.")),(0,r.kt)("video",{width:"99%",muted:!0,playsInline:!0,controls:"true"},(0,r.kt)("source",{src:"/docs/videos/api/api-url-and-key.mp4",type:"video/mp4",muted:!0,playsInline:!0})))}u.isMDXComponent=!0},27021:(e,t,n)=>{n.d(t,{ZP:()=>o});var a=n(87462),r=(n(67294),n(3905));const s={toc:[{value:"Intro",id:"intro",level:2}]};function o(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"intro"},"Intro"),(0,r.kt)("p",null,"This example provides the steps to build a basic user management app. It includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Supabase ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/database"},"Database"),": a Postgres database for storing your user data."),(0,r.kt)("li",{parentName:"ul"},"Supabase ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/auth"},"Auth"),": users can sign in with magic links (no passwords, only email)."),(0,r.kt)("li",{parentName:"ul"},"Supabase ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/storage"},"Storage"),": users can upload a photo."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/guides/auth#row-level-security"},"Row Level Security"),": data is protected so that individuals can only access their own data."),(0,r.kt)("li",{parentName:"ul"},"Instant ",(0,r.kt)("a",{parentName:"li",href:"/docs/guides/api"},"APIs"),": APIs will be automatically generated when you create your database tables.")),(0,r.kt)("p",null,"By the end of this guide you'll have an app which allows users to login and update some basic profile details:"))}o.isMDXComponent=!0},26997:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var a=n(87462),r=(n(67294),n(3905)),s=(n(65488),n(85162),n(27021)),o=n(66788);const i={id:"with-angular",title:"Quickstart: Angular",description:"Learn how to use Supabase in your Angular App.",sidebar_label:"Angular"},l=void 0,p={unversionedId:"guides/with-angular",id:"guides/with-angular",title:"Quickstart: Angular",description:"Learn how to use Supabase in your Angular App.",source:"@site/docs/guides/with-angular.mdx",sourceDirName:"guides",slug:"/guides/with-angular",permalink:"/docs/guides/with-angular",draft:!1,editUrl:"https://github.com/docs/guides/with-angular.mdx",tags:[],version:"current",frontMatter:{id:"with-angular",title:"Quickstart: Angular",description:"Learn how to use Supabase in your Angular App.",sidebar_label:"Angular"}},u={},c=[{value:"GitHub",id:"github",level:3},{value:"Building the App",id:"building-the-app",level:2},{value:"Initialize an Angular app",id:"initialize-an-angular-app",level:3},{value:"Set up a Login component",id:"set-up-a-login-component",level:3},{value:"Account page",id:"account-page",level:3},{value:"Launch!",id:"launch",level:3},{value:"Bonus: Profile photos",id:"bonus-profile-photos",level:2},{value:"Create an upload widget",id:"create-an-upload-widget",level:3},{value:"Add the new widget",id:"add-the-new-widget",level:3},{value:"Next steps",id:"next-steps",level:2}],m={toc:c};function d(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(s.ZP,{mdxType:"QuickstartIntro"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Supabase User Management example",src:n(83900).Z,width:"1558",height:"873"})),(0,r.kt)("h3",{id:"github"},"GitHub"),(0,r.kt)("p",null,"Should you get stuck while working through the guide, refer to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/supabase/supabase/tree/master/examples/user-management/angular-user-management"},"this repo"),"."),(0,r.kt)(o.ZP,{mdxType:"ProjectSetup"}),(0,r.kt)("h2",{id:"building-the-app"},"Building the App"),(0,r.kt)("p",null,"Let's start building the Angular app from scratch."),(0,r.kt)("h3",{id:"initialize-an-angular-app"},"Initialize an Angular app"),(0,r.kt)("p",null,"We can use the ",(0,r.kt)("a",{parentName:"p",href:"https://angular.io/cli"},"Angular CLI")," to initialize\nan app called ",(0,r.kt)("inlineCode",{parentName:"p"},"supabase-angular"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx ng new supabase-angular --routing false --style css\ncd supabase-angular\n")),(0,r.kt)("p",null,"Then let's install the only additional dependency: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/supabase/supabase-js"},"supabase-js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @supabase/supabase-js\n")),(0,r.kt)("p",null,"And finally we want to save the environment variables in the ",(0,r.kt)("inlineCode",{parentName:"p"},"environment.ts")," file.\nAll we need are the API URL and the ",(0,r.kt)("inlineCode",{parentName:"p"},"anon")," key that you copied ",(0,r.kt)("a",{parentName:"p",href:"#get-the-api-keys"},"earlier"),".\nThese variables will be exposed on the browser, and that's completely fine since we have ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/auth#row-level-security"},"Row Level Security")," enabled on our Database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="environment.ts"',title:'"environment.ts"'},"export const environment = {\n  production: false,\n  supabaseUrl: 'YOUR_SUPABASE_URL',\n  supabaseKey: 'YOUR_SUPABASE_KEY',\n}\n")),(0,r.kt)("p",null,"Now that we have the API credentials in place, let's create a ",(0,r.kt)("strong",{parentName:"p"},"SupabaseService")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"ng g s supabase")," to initialize the Supabase client and implement functions to communicate with the Supabase API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/supabase.service.ts"',title:'"src/app/supabase.service.ts"'},"import { Injectable } from '@angular/core'\nimport {\n  AuthChangeEvent,\n  AuthSession,\n  createClient,\n  Session,\n  SupabaseClient,\n  User,\n} from '@supabase/supabase-js'\nimport { environment } from 'src/environments/environment'\nimport { Database } from 'src/schema'\n\nexport interface Profile {\n  id?: string\n  username: string\n  website: string\n  avatar_url: string\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SupabaseService {\n  private supabase: SupabaseClient\n  _session: AuthSession | null = null\n\n  constructor() {\n    this.supabase = createClient(\n      environment.supabaseUrl,\n      environment.supabaseKey\n    )\n  }\n\n  get session() {\n    this.supabase.auth.getSession().then(({ data }) => {\n      this._session = data.session\n    })\n    return this._session\n  }\n\n  profile(user: User) {\n    return this.supabase\n      .from('profiles')\n      .select(`username, website, avatar_url`)\n      .eq('id', user.id)\n      .single()\n  }\n\n  authChanges(\n    callback: (event: AuthChangeEvent, session: Session | null) => void\n  ) {\n    return this.supabase.auth.onAuthStateChange(callback)\n  }\n\n  signIn(email: string) {\n    return this.supabase.auth.signInWithOtp({ email })\n  }\n\n  signOut() {\n    return this.supabase.auth.signOut()\n  }\n\n  updateProfile(profile: Profile) {\n    const update = {\n      ...profile,\n      updated_at: new Date(),\n    }\n\n    return this.supabase.from('profiles').upsert(update)\n  }\n\n  downLoadImage(path: string) {\n    return this.supabase.storage.from('avatars').download(path)\n  }\n\n  uploadAvatar(filePath: string, file: File) {\n    return this.supabase.storage.from('avatars').upload(filePath, file)\n  }\n}\n")),(0,r.kt)("p",null,"Optionally, update ",(0,r.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/supabase/supabase/master/examples/user-management/angular-user-management/src/styles.css"},"src/styles.css")," to style the app."),(0,r.kt)("h3",{id:"set-up-a-login-component"},"Set up a Login component"),(0,r.kt)("p",null,"Let's set up an Angular component to manage logins and sign ups. We'll use Magic Links, so users can sign in with their email without using passwords.\nCreate an ",(0,r.kt)("strong",{parentName:"p"},"AuthComponent")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"ng g c auth")," Angular CLI command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/auth/auth.component.ts"',title:'"src/app/auth/auth.component.ts"'},"import { Component, OnInit } from '@angular/core'\nimport { FormBuilder } from '@angular/forms'\nimport { SupabaseService } from '../supabase.service'\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.css'],\n})\nexport class AuthComponent implements OnInit {\n  loading = false\n\n  signInForm = this.formBuilder.group({\n    email: '',\n  })\n\n  constructor(\n    private readonly supabase: SupabaseService,\n    private readonly formBuilder: FormBuilder\n  ) {}\n\n  ngOnInit(): void {}\n\n  async onSubmit(): Promise<void> {\n    try {\n      this.loading = true\n      const email = this.signInForm.value.email as string\n      const { error } = await this.supabase.signIn(email)\n      if (error) throw error\n      alert('Check your email for the login link!')\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      this.signInForm.reset()\n      this.loading = false\n    }\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="src/app/auth/auth.component.html"',title:'"src/app/auth/auth.component.html"'},'<div class="row flex-center flex">\n  <div class="col-6 form-widget" aria-live="polite">\n    <h1 class="header">Supabase + Angular</h1>\n    <p class="description">Sign in via magic link with your email below</p>\n    <form [formGroup]="signInForm" (ngSubmit)="onSubmit()" class="form-widget">\n      <div>\n        <label for="email">Email</label>\n        <input\n          id="email"\n          formControlName="email"\n          class="inputField"\n          type="email"\n          placeholder="Your email"\n        />\n      </div>\n      <div>\n        <button\n          type="submit"\n          class="button block"\n          [disabled]="loading"\n        >\n          {{ loading ? \'Loading\' : \'Send magic link\' }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div\n')),(0,r.kt)("h3",{id:"account-page"},"Account page"),(0,r.kt)("p",null,"Users also need a way to edit their profile details and manage their accounts after signing in.\nCreate an ",(0,r.kt)("strong",{parentName:"p"},"AccountComponent")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ng g c account")," Angular CLI command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/account/account.component.ts"',title:'"src/app/account/account.component.ts"'},"import { Component, Input, OnInit } from '@angular/core'\nimport { FormBuilder } from '@angular/forms'\nimport { AuthSession } from '@supabase/supabase-js'\nimport { Profile, SupabaseService } from '../supabase.service'\n\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css'],\n})\nexport class AccountComponent implements OnInit {\n  loading = false\n  profile!: Profile\n\n  @Input()\n  session!: AuthSession\n\n  updateProfileForm = this.formBuilder.group({\n    username: '',\n    website: '',\n    avatar_url: '',\n  })\n\n  constructor(\n    private readonly supabase: SupabaseService,\n    private formBuilder: FormBuilder\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    await this.getProfile()\n\n    const { username, website, avatar_url } = this.profile\n    this.updateProfileForm.patchValue({\n      username,\n      website,\n      avatar_url,\n    })\n  }\n\n  async getProfile() {\n    try {\n      this.loading = true\n      const { user } = this.session\n      let { data: profile, error, status } = await this.supabase.profile(user)\n\n      if (error && status !== 406) {\n        throw error\n      }\n\n      if (profile) {\n        this.profile = profile\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      this.loading = false\n    }\n  }\n\n  async updateProfile(): Promise<void> {\n    try {\n      this.loading = true\n      const { user } = this.session\n\n      const username = this.updateProfileForm.value.username as string\n      const website = this.updateProfileForm.value.website as string\n      const avatar_url = this.updateProfileForm.value.avatar_url as string\n\n      const { error } = await this.supabase.updateProfile({\n        id: user.id,\n        username,\n        website,\n        avatar_url,\n      })\n      if (error) throw error\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      this.loading = false\n    }\n  }\n\n  async signOut() {\n    await this.supabase.signOut()\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="src/app/account/account.component.html"',title:'"src/app/account/account.component.html"'},'<form\n  [formGroup]="updateProfileForm"\n  (ngSubmit)="updateProfile()"\n  class="form-widget"\n>\n  <div>\n    <label for="email">Email</label>\n    <input id="email" type="text" [value]="session.user.email" disabled />\n  </div>\n  <div>\n    <label for="username">Name</label>\n    <input formControlName="username" id="username" type="text" />\n  </div>\n  <div>\n    <label for="website">Website</label>\n    <input formControlName="website" id="website" type="url" />\n  </div>\n\n  <div>\n    <button type="submit" class="button primary block" [disabled]="loading">\n      {{ loading ? \'Loading ...\' : \'Update\' }}\n    </button>\n  </div>\n\n  <div>\n    <button class="button block" (click)="signOut()">Sign Out</button>\n  </div>\n</form>\n')),(0,r.kt)("h3",{id:"launch"},"Launch!"),(0,r.kt)("p",null,"Now that we have all the components in place, let's update ",(0,r.kt)("strong",{parentName:"p"},"AppComponent"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/app.component.ts"',title:'"src/app/app.component.ts"'},"import { Component, OnInit } from '@angular/core'\nimport { SupabaseService } from './supabase.service'\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n  title = 'angular-user-management'\n\n  session = this.supabase.session\n\n  constructor(private readonly supabase: SupabaseService) {}\n\n  ngOnInit() {\n    this.supabase.authChanges((_, session) => (this.session = session))\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="src/app/app.component.html"',title:'"src/app/app.component.html"'},'<div class="container" style="padding: 50px 0 100px 0">\n  <app-account *ngIf="session; else auth" [session]="session"></app-account>\n  <ng-template #auth>\n    <app-auth></app-auth>\n  </ng-template>\n</div>\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"app.module.ts")," also needs to be modified to include the ",(0,r.kt)("inlineCode",{parentName:"p"},"ReactiveFormsModule")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"@angular/forms")," package."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/app.module.ts"',title:'"src/app/app.module.ts"'},"import { NgModule } from '@angular/core'\nimport { BrowserModule } from '@angular/platform-browser'\n\nimport { AppComponent } from './app.component'\nimport { AuthComponent } from './auth/auth.component'\nimport { AccountComponent } from './account/account.component'\nimport { ReactiveFormsModule } from '@angular/forms'\nimport { AvatarComponent } from './avatar/avatar.component'\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AuthComponent,\n    AccountComponent,\n    AvatarComponent,\n  ],\n  imports: [BrowserModule, ReactiveFormsModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n")),(0,r.kt)("p",null,"Once that's done, run this in a terminal window:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start\n")),(0,r.kt)("p",null,"And then open the browser to ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:4200"},"localhost:4200")," and you should see the completed app."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Supabase Angular",src:n(35182).Z,width:"1280",height:"800"})),(0,r.kt)("h2",{id:"bonus-profile-photos"},"Bonus: Profile photos"),(0,r.kt)("p",null,"Every Supabase project is configured with ",(0,r.kt)("a",{parentName:"p",href:"/docs/guides/storage"},"Storage")," for managing large files like photos and videos."),(0,r.kt)("h3",{id:"create-an-upload-widget"},"Create an upload widget"),(0,r.kt)("p",null,"Let's create an avatar for the user so that they can upload a profile photo.\nCreate an ",(0,r.kt)("strong",{parentName:"p"},"AvatarComponent")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"ng g c avatar")," Angular CLI command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/avatar/avatar.component.ts"',title:'"src/app/avatar/avatar.component.ts"'},"import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core'\nimport { SafeResourceUrl, DomSanitizer } from '@angular/platform-browser'\nimport { SupabaseService } from '../supabase.service'\n\n@Component({\n  selector: 'app-avatar',\n  templateUrl: './avatar.component.html',\n  styleUrls: ['./avatar.component.css'],\n})\nexport class AvatarComponent implements OnInit {\n  _avatarUrl: SafeResourceUrl | undefined\n  uploading = false\n\n  @Input()\n  set avatarUrl(url: string | null) {\n    if (url) {\n      this.downloadImage(url)\n    }\n  }\n\n  @Output() upload = new EventEmitter<string>()\n\n  constructor(\n    private readonly supabase: SupabaseService,\n    private readonly dom: DomSanitizer\n  ) {}\n\n  ngOnInit(): void {}\n\n  async downloadImage(path: string) {\n    try {\n      const { data } = await this.supabase.downLoadImage(path)\n      if (data instanceof Blob) {\n        this._avatarUrl = this.dom.bypassSecurityTrustResourceUrl(\n          URL.createObjectURL(data)\n        )\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        console.error('Error downloading image: ', error.message)\n      }\n    }\n  }\n\n  async uploadAvatar(event: any) {\n    try {\n      this.uploading = true\n      if (!event.target.files || event.target.files.length === 0) {\n        throw new Error('You must select an image to upload.')\n      }\n\n      const file = event.target.files[0]\n      const fileExt = file.name.split('.').pop()\n      const filePath = `${Math.random()}.${fileExt}`\n\n      await this.supabase.uploadAvatar(filePath, file)\n      this.upload.emit(filePath)\n    } catch (error) {\n      if (error instanceof Error) {\n        alert(error.message)\n      }\n    } finally {\n      this.uploading = false\n    }\n  }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="src/app/avatar/avatar.component.html"',title:'"src/app/avatar/avatar.component.html"'},'<div>\n  <img\n    *ngIf="_avatarUrl"\n    [src]="_avatarUrl"\n    alt="Avatar"\n    class="avatar image"\n    style="height: 150px; width: 150px"\n  />\n</div>\n<div\n  *ngIf="!_avatarUrl"\n  class="avatar no-image"\n  style="height: 150px; width: 150px"\n></div>\n<div style="width: 150px">\n  <label class="button primary block" for="single">\n    {{ uploading ? \'Uploading ...\' : \'Upload\' }}\n  </label>\n  <input\n    style="visibility: hidden;position: absolute"\n    type="file"\n    id="single"\n    accept="image/*"\n    (change)="uploadAvatar($event)"\n    [disabled]="uploading"\n  />\n</div>\n')),(0,r.kt)("h3",{id:"add-the-new-widget"},"Add the new widget"),(0,r.kt)("p",null,"And then we can add the widget on top of the ",(0,r.kt)("strong",{parentName:"p"},"AccountComponent")," html template:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="src/app/account.component.html"',title:'"src/app/account.component.html"'},'<form\n  [formGroup]="updateProfileForm"\n  (ngSubmit)="updateProfile()"\n  class="form-widget"\n>\n  <app-avatar [avatarUrl]="this.avatarUrl" (upload)="updateAvatar($event)">\n  </app-avatar>\n  \x3c!-- input fields --\x3e\n</form>\n')),(0,r.kt)("p",null,"And add an ",(0,r.kt)("inlineCode",{parentName:"p"},"updateAvatar")," function along with an ",(0,r.kt)("inlineCode",{parentName:"p"},"avatarUrl")," getter to the ",(0,r.kt)("strong",{parentName:"p"},"AccountComponent")," typescript file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/app/account.component.ts"',title:'"src/app/account.component.ts"'},"@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css'],\n})\nexport class AccountComponent implements OnInit {\n  // ...\n  get avatarUrl() {\n    return this.updateProfileForm.value.avatar_url as string\n  }\n\n  async updateAvatar(event: string): Promise<void> {\n    this.updateProfileForm.patchValue({\n      avatar_url: event,\n    })\n    await this.updateProfile()\n  }\n  // ...\n}\n")),(0,r.kt)("h2",{id:"next-steps"},"Next steps"),(0,r.kt)("p",null,"At this stage you have a fully functional application!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Got a question? ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/supabase/supabase/discussions"},"Ask here"),"."),(0,r.kt)("li",{parentName:"ul"},"Sign in: ",(0,r.kt)("a",{parentName:"li",href:"https://app.supabase.com"},"app.supabase.com"))))}d.isMDXComponent=!0},35182:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/supabase-angular-demo-7edad6eee6dde241ce490241f8a765ed.png"},83900:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/user-management-demo-807ebc3917e770d969d27713c151126d.png"}}]);