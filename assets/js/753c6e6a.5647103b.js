"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[83511],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||s;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(86010);const s="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,i),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>h});var a=n(87462),r=n(67294),s=n(86010),i=n(72389),o=n(67392),l=n(7094),p=n(12466);const u="tabList__CuJ",d="tabItem_LNqP";function c(e){const{lazy:t,block:n,defaultValue:i,values:c,groupId:h,className:m}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=c??g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,o.l)(b,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===i?i:i??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==k&&!b.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:N}=(0,l.U)(),[w,y]=(0,r.useState)(k),C=[],{blockElementScrollPositionUntilNextRender:S}=(0,p.o5)();if(null!=h){const e=v[h];null!=e&&e!==w&&b.some((t=>t.value===e))&&y(e)}const x=e=>{const t=e.currentTarget,n=C.indexOf(t),a=b[n].value;a!==w&&(S(t),y(a),null!=h&&N(h,String(a)))},j=e=>{let t=null;switch(e.key){case"Enter":x(e);break;case"ArrowRight":{const n=C.indexOf(e.currentTarget)+1;t=C[n]??C[0];break}case"ArrowLeft":{const n=C.indexOf(e.currentTarget)-1;t=C[n]??C[C.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},m)},b.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>C.push(e),onKeyDown:j,onClick:x},i,{className:(0,s.Z)("tabs__item",d,i?.className,{"tabs__item--active":w===t})}),n??t)}))),t?(0,r.cloneElement)(g.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function h(e){const t=(0,i.Z)();return r.createElement(c,(0,a.Z)({key:String(t)},e))}},31831:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var a=n(87462),r=(n(67294),n(3905)),s=n(65488),i=n(85162);const o={id:"nextjs",title:"Supabase Auth with Next.js",description:"Authentication helpers for Next.js API routes, middleware, and SSR.",sidebar_label:"Next.js"},l=void 0,p={unversionedId:"guides/auth/auth-helpers/nextjs",id:"guides/auth/auth-helpers/nextjs",title:"Supabase Auth with Next.js",description:"Authentication helpers for Next.js API routes, middleware, and SSR.",source:"@site/docs/guides/auth/auth-helpers/nextjs.mdx",sourceDirName:"guides/auth/auth-helpers",slug:"/guides/auth/auth-helpers/nextjs",permalink:"/docs/guides/auth/auth-helpers/nextjs",draft:!1,editUrl:"https://github.com/docs/guides/auth/auth-helpers/nextjs.mdx",tags:[],version:"current",frontMatter:{id:"nextjs",title:"Supabase Auth with Next.js",description:"Authentication helpers for Next.js API routes, middleware, and SSR.",sidebar_label:"Next.js"}},u={},d=[{value:"Install the Next.js helper library",id:"install-the-nextjs-helper-library",level:2},{value:"Set up environment variables",id:"set-up-environment-variables",level:2},{value:"Basic Setup",id:"basic-setup",level:2},{value:"Usage with TypeScript",id:"usage-with-typescript",level:2},{value:"Browser client",id:"browser-client",level:3},{value:"Server client",id:"server-client",level:3},{value:"Client-side data fetching with RLS",id:"client-side-data-fetching-with-rls",level:2},{value:"Server-side rendering (SSR) - withPageAuth",id:"server-side-rendering-ssr---withpageauth",level:2},{value:"Server-side data fetching with RLS",id:"server-side-data-fetching-with-rls",level:2},{value:"Server-side data fetching to OAuth APIs using <code>provider_token</code>",id:"server-side-data-fetching-to-oauth-apis-using-provider_token",level:2},{value:"Protecting API routes",id:"protecting-api-routes",level:2},{value:"Protecting routes with Nextjs Middleware",id:"protecting-routes-with-nextjs-middleware",level:2},{value:"Migrating to version <code>0.4.X</code>",id:"migration",level:2}],c={toc:d};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This submodule provides convenience helpers for implementing user authentication in Next.js applications."),(0,r.kt)("h2",{id:"install-the-nextjs-helper-library"},"Install the Next.js helper library"),(0,r.kt)(s.Z,{groupId:"install",defaultValue:"npm",values:[{label:"npm",value:"npm"},{label:"Yarn",value:"yarn"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @supabase/auth-helpers-nextjs\n")),(0,r.kt)("p",null,"This library supports the following tooling versions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Node.js: ",(0,r.kt)("inlineCode",{parentName:"li"},"^10.13.0 || >=12.0.0")),(0,r.kt)("li",{parentName:"ul"},"Next.js: ",(0,r.kt)("inlineCode",{parentName:"li"},">=10"))),(0,r.kt)("p",null,"Additionally, install the ",(0,r.kt)("strong",{parentName:"p"},"React Auth Helpers")," for components and hooks that can be used across all React-based frameworks."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @supabase/auth-helpers-react\n"))),(0,r.kt)(i.Z,{value:"yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add @supabase/auth-helpers-nextjs\n")),(0,r.kt)("p",null,"This library supports the following tooling versions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Node.js: ",(0,r.kt)("inlineCode",{parentName:"li"},"^10.13.0 || >=12.0.0")),(0,r.kt)("li",{parentName:"ul"},"Next.js: ",(0,r.kt)("inlineCode",{parentName:"li"},">=10"))),(0,r.kt)("p",null,"Additionally, install the ",(0,r.kt)("strong",{parentName:"p"},"React Auth Helpers")," for components and hooks that can be used across all React-based frameworks."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add @supabase/auth-helpers-react\n")))),(0,r.kt)("h2",{id:"set-up-environment-variables"},"Set up environment variables"),(0,r.kt)("p",null,"Retrieve your project URL and anon key in your project's ",(0,r.kt)("a",{parentName:"p",href:"https://app.supabase.com/project/_/settings/api"},"API settings")," in the Dashboard to set up the following environment variables. For local development you can set them in a ",(0,r.kt)("inlineCode",{parentName:"p"},".env.local")," file. See an ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/supabase/auth-helpers/blob/main/examples/nextjs/.env.local.example"},"example"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=".env.local"',title:'".env.local"'},"NEXT_PUBLIC_SUPABASE_URL=YOUR_SUPABASE_URL\nNEXT_PUBLIC_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\n")),(0,r.kt)("h2",{id:"basic-setup"},"Basic Setup"),(0,r.kt)(s.Z,{defaultValue:"js",values:[{label:"JavaScript",value:"js"},{label:"TypeScript",value:"ts"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"js",mdxType:"TabItem"},(0,r.kt)("p",null,"Wrap your ",(0,r.kt)("inlineCode",{parentName:"p"},"pages/_app.js")," component with the ",(0,r.kt)("inlineCode",{parentName:"p"},"SessionContextProvider")," component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="pages/_app.js"',title:'"pages/_app.js"'},"import { createBrowserSupabaseClient } from '@supabase/auth-helpers-nextjs'\nimport { SessionContextProvider } from '@supabase/auth-helpers-react'\n\nfunction MyApp({ Component, pageProps }) {\n  const router = useRouter()\n  // Create a new supabase browser client on every first render.\n  const [supabaseClient] = useState(() => createBrowserSupabaseClient())\n\n  return (\n    <SessionContextProvider\n      supabaseClient={supabaseClient}\n      initialSession={pageProps.initialSession}\n    >\n      <Component {...pageProps} />\n    </SessionContextProvider>\n  )\n}\n"))),(0,r.kt)(i.Z,{value:"ts",mdxType:"TabItem"},(0,r.kt)("p",null,"Wrap your ",(0,r.kt)("inlineCode",{parentName:"p"},"pages/_app.tsx")," component with the ",(0,r.kt)("inlineCode",{parentName:"p"},"SessionContextProvider")," component:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="pages/_app.tsx"',title:'"pages/_app.tsx"'},"import { createBrowserSupabaseClient } from '@supabase/auth-helpers-nextjs'\n// highlight-next-line\nimport { SessionContextProvider, Session } from '@supabase/auth-helpers-react'\n\nfunction MyApp({\n  Component,\n  pageProps,\n}: AppProps<{\n  // highlight-next-line\n  initialSession: Session,\n}>) {\n  // Create a new supabase browser client on every first render.\n  const [supabaseClient] = useState(() => createBrowserSupabaseClient())\n\n  return (\n    <SessionContextProvider\n      supabaseClient={supabaseClient}\n      initialSession={pageProps.initialSession}\n    >\n      <Component {...pageProps} />\n    </SessionContextProvider>\n  )\n}\n")))),(0,r.kt)("p",null,"You can now determine if a user is authenticated by checking that the ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," object returned by the ",(0,r.kt)("inlineCode",{parentName:"p"},"useUser()")," hook is defined."),(0,r.kt)("h2",{id:"usage-with-typescript"},"Usage with TypeScript"),(0,r.kt)("p",null,"You can pass types that were to the Supabase Client to get enhanced type safety and auto completion:"),(0,r.kt)("h3",{id:"browser-client"},"Browser client"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Creating a new supabase client object:\nimport { createBrowserSupabaseClient } from '@supabase/auth-helpers-nextjs'\nimport { Database } from '../database.types'\n\nconst supabaseClient = createBrowserSupabaseClient<Database>()\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Retrieving a supabase client object from the SessionContext:\nimport { useSupabaseClient } from '@supabase/auth-helpers-react'\nimport { Database } from '../database.types'\n\nconst supabaseClient = useSupabaseClient<Database>()\n")),(0,r.kt)("h3",{id:"server-client"},"Server client"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// Creating a new supabase server client object (e.g. in API route):\nimport type { NextApiRequest, NextApiResponse } from 'next'\nimport type { Database } from 'types_db'\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  const supabaseServerClient = createServerSupabaseClient<Database>({\n    req,\n    res,\n  })\n  const {\n    data: { user },\n  } = await supabaseServerClient.auth.getUser()\n\n  res.status(200).json({ name: user?.name ?? '' })\n}\n")),(0,r.kt)("h2",{id:"client-side-data-fetching-with-rls"},"Client-side data fetching with RLS"),(0,r.kt)("p",null,"For ",(0,r.kt)("a",{parentName:"p",href:"https://supabase.com/docs/learn/auth-deep-dive/auth-row-level-security"},"row level security")," to work properly when fetching data client-side, you need to make sure to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"supabaseClient")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"useSupabaseClient")," hook and only run your query once the user is defined client-side in the ",(0,r.kt)("inlineCode",{parentName:"p"},"useUser()")," hook:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { Auth, ThemeSupa } from '@supabase/auth-ui-react'\nimport { useUser, useSupabaseClient } from '@supabase/auth-helpers-react'\nimport { useEffect, useState } from 'react'\n\nconst LoginPage = () => {\n  const supabaseClient = useSupabaseClient()\n  const user = useUser()\n  const [data, setData] = useState()\n\n  // highlight-start\n  useEffect(() => {\n    async function loadData() {\n      const { data } = await supabaseClient.from('test').select('*')\n      setData(data)\n    }\n    // Only run query once user is logged in.\n    if (user) loadData()\n  }, [user])\n  // highlight-end\n\n  if (!user)\n    return (\n      <Auth\n        redirectTo=\"http://localhost:3000/\"\n        appearance={{ theme: ThemeSupa }}\n        supabaseClient={supabaseClient}\n        providers={['google', 'github']}\n        socialLayout=\"horizontal\"\n      />\n    )\n\n  return (\n    <>\n      <button onClick={() => supabaseClient.auth.signOut()}>Sign out</button>\n      <p>user:</p>\n      <pre>{JSON.stringify(user, null, 2)}</pre>\n      <p>client-side data fetching with RLS</p>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </>\n  )\n}\n\nexport default LoginPage\n")),(0,r.kt)("h2",{id:"server-side-rendering-ssr---withpageauth"},"Server-side rendering (SSR) - withPageAuth"),(0,r.kt)("p",null,"If you wrap your ",(0,r.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"withPageAuth")," your props object will be augmented with the user object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="pages/profile.js"',title:'"pages/profile.js"'},"import { withPageAuth } from '@supabase/auth-helpers-nextjs'\n\nexport default function Profile({ user }) {\n  return <div>Hello {user.name}</div>\n}\n\nexport const getServerSideProps = withPageAuth({ redirectTo: '/login' })\n")),(0,r.kt)("p",null,"If there is no authenticated user, they will be redirect to your home page, unless you specify the ",(0,r.kt)("inlineCode",{parentName:"p"},"redirectTo")," option."),(0,r.kt)("p",null,"You can pass in your own ",(0,r.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," method, the props returned from this will be merged with the\nuser props. You can also access the user session data by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"supabase.auth.getUser()")," inside of this method, eg:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="pages/protected-page.js"',title:'"pages/protected-page.js"'},"import { withPageAuth } from '@supabase/auth-helpers-nextjs'\n\nexport default function ProtectedPage({ user, customProp }) {\n  return <div>Protected content</div>\n}\n\nexport const getServerSideProps = withPageAuth({\n  redirectTo: '/foo',\n  async getServerSideProps(ctx, supabase) {\n    // Access the user object\n    const {\n      data: { user },\n    } = await supabase.auth.getUser()\n    return { props: { email: user?.email } }\n  },\n})\n")),(0,r.kt)("h2",{id:"server-side-data-fetching-with-rls"},"Server-side data fetching with RLS"),(0,r.kt)("p",null,"Both ",(0,r.kt)("inlineCode",{parentName:"p"},"withApiAuth")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"withPageAuth")," return a supabase client that you can use to run ",(0,r.kt)("a",{parentName:"p",href:"https://supabase.com/docs/learn/auth-deep-dive/auth-row-level-security"},"row level security")," authenticated queries server-side:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { User, withPageAuth } from '@supabase/auth-helpers-nextjs'\n\nexport default function ProtectedPage({\n  user,\n  data,\n}: {\n  user: User,\n  data: any,\n}) {\n  return (\n    <>\n      <div>Protected content for {user.email}</div>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n      <pre>{JSON.stringify(user, null, 2)}</pre>\n    </>\n  )\n}\n\nexport const getServerSideProps = withPageAuth({\n  redirectTo: '/',\n  async getServerSideProps(ctx, supabase) {\n    // Run queries with RLS on the server\n    const { data } = await supabase.from('test').select('*')\n    return { props: { data } }\n  },\n})\n")),(0,r.kt)("h2",{id:"server-side-data-fetching-to-oauth-apis-using-provider_token"},"Server-side data fetching to OAuth APIs using ",(0,r.kt)("inlineCode",{parentName:"h2"},"provider_token")),(0,r.kt)("p",null,"When using third-party auth providers, sessions are initiated with an additional ",(0,r.kt)("inlineCode",{parentName:"p"},"provider_token")," field which is persisted as an HTTPOnly cookie upon logging in to enabled usage on the server side. The ",(0,r.kt)("inlineCode",{parentName:"p"},"provider_token")," can be used to make API requests to the OAuth provider's API endpoints on behalf of the logged-in user. In the following example, we fetch the user's full profile from the third-party API during SSR using their id and auth token:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { User, withPageAuth } from '@supabase/auth-helpers-nextjs'\n\nexport default function ProtectedPage({\n  user,\n  allRepos,\n}: {\n  user: User,\n  allRepos: any,\n}) {\n  return (\n    <>\n      <div>Protected content for {user.email}</div>\n      <p>Data fetched with provider token:</p>\n      <pre>{JSON.stringify(allRepos, null, 2)}</pre>\n      <p>user:</p>\n      <pre>{JSON.stringify(user, null, 2)}</pre>\n    </>\n  )\n}\n\nexport const getServerSideProps = withPageAuth({\n  redirectTo: '/',\n  async getServerSideProps(ctx, supabase) {\n    const {\n      data: { session },\n      error,\n    } = await supabase.auth.getSession()\n    if (error) {\n      throw error\n    }\n    if (!session) {\n      return { props: {} }\n    }\n\n    // Retrieve provider_token & logged in user's third-party id from metadata\n    const { provider_token, user } = session\n    const userId = user.user_metadata.user_name\n\n    const allRepos = await (\n      await fetch(\n        `https://api.github.com/search/repositories?q=user:${userId}`,\n        {\n          method: 'GET',\n          headers: {\n            Authorization: `token ${provider_token}`,\n          },\n        }\n      )\n    ).json()\n\n    return { props: { allRepos, user } }\n  },\n})\n")),(0,r.kt)("h2",{id:"protecting-api-routes"},"Protecting API routes"),(0,r.kt)("p",null,"Wrap an API Route to check that the user has a valid session. If they're not logged in the handler will return a\n401 Unauthorized."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="pages/api/protected-route.js"',title:'"pages/api/protected-route.js"'},"import { withApiAuth } from '@supabase/auth-helpers-nextjs'\n\nexport default withApiAuth(async function ProtectedRoute(req, res, supabase) {\n  // Run queries with RLS on the server\n  const { data } = await supabase.from('test').select('*')\n  res.json(data)\n})\n")),(0,r.kt)("p",null,"If you visit ",(0,r.kt)("inlineCode",{parentName:"p"},"/api/protected-route")," without a valid session cookie, you will get a 401 response."),(0,r.kt)("h2",{id:"protecting-routes-with-nextjs-middleware"},"Protecting routes with ",(0,r.kt)("a",{parentName:"h2",href:"https://nextjs.org/docs/middleware"},"Nextjs Middleware")),(0,r.kt)("p",null,"As an alternative to protecting individual pages using ",(0,r.kt)("inlineCode",{parentName:"p"},"getServerSideProps")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"withPageAuth"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"withMiddlewareAuth")," can be used from inside a ",(0,r.kt)("inlineCode",{parentName:"p"},"middleware")," file to protect the entire directory or those that match the config object. In the following example, all requests to ",(0,r.kt)("inlineCode",{parentName:"p"},"/middleware-protected/*")," will check whether a user is signed in, if successful the request will be forwarded to the destination route, otherwise the user will be redirected to ",(0,r.kt)("inlineCode",{parentName:"p"},"/login")," (defaults to: ",(0,r.kt)("inlineCode",{parentName:"p"},"/"),") with a 307 Temporary Redirect response status:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="middleware.ts"',title:'"middleware.ts"'},"import { withMiddlewareAuth } from '@supabase/auth-helpers-nextjs'\n\nexport const middleware = withMiddlewareAuth({ redirectTo: '/login' })\n\nexport const config = {\n  matcher: ['/middleware-protected/:path*'],\n}\n")),(0,r.kt)("p",null,"It is also possible to add finer granularity based on the user logged in. I.e. you can specify a promise to determine if a specific user has permission or not."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="middleware.ts"',title:'"middleware.ts"'},"import { withMiddlewareAuth } from '@supabase/auth-helpers-nextjs'\n\nexport const middleware = withMiddlewareAuth({\n  redirectTo: '/login',\n  authGuard: {\n    isPermitted: async (user) => user.email?.endsWith('@example.com') ?? false,\n    redirectTo: '/insufficient-permissions',\n  },\n})\n\nexport const config = {\n  matcher: ['/middleware-protected/:path*'],\n}\n")),(0,r.kt)("h2",{id:"migration"},"Migrating to version ",(0,r.kt)("inlineCode",{parentName:"h2"},"0.4.X")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"With ",(0,r.kt)("inlineCode",{parentName:"p"},"supabase-js")," v2, the ",(0,r.kt)("inlineCode",{parentName:"p"},"auth")," API routes are no longer required and you can delete the ",(0,r.kt)("inlineCode",{parentName:"p"},"auth")," directory under the ",(0,r.kt)("inlineCode",{parentName:"p"},"/pages/api/")," directory.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"/api/auth/logout")," API route has been removed\u2014use the ",(0,r.kt)("inlineCode",{parentName:"p"},"signout")," method instead."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<button\n  onClick={async () => {\n    await supabaseClient.auth.signOut()\n    router.push('/')\n  }}\n>\n  Logout\n</button>\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"supabaseClient")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"supabaseServerClient")," have been removed in favor of the ",(0,r.kt)("inlineCode",{parentName:"p"},"createBrowserSupabaseClient")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"createServerSupabaseClient")," methods. This allows you to provide the CLI-generated types to the client:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// client-side\nimport type { Database } from 'types_db';\nconst [supabaseClient] = useState(() =>\n    createBrowserSupabaseClient<Database>()\n  );\n\n// server-side API route\nimport type { NextApiRequest, NextApiResponse } from 'next'\nimport type { Database } from 'types_db';\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  const supabaseServerClient = createServerSupabaseClient<Database>({ req, res })\n  const { data:{ user } } = await supabaseServerClient.auth.getUser()\n\n  res.status(200).json({ name: user?.name ?? '' })\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"UserProvider")," has been replaced by the ",(0,r.kt)("inlineCode",{parentName:"p"},"SessionContextProvider"),". Make sure to wrap your ",(0,r.kt)("inlineCode",{parentName:"p"},"pages/_app.js")," componenent with the ",(0,r.kt)("inlineCode",{parentName:"p"},"SessionContextProvider"),". Then, throughout your application you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"useSessionContext")," hook to get the ",(0,r.kt)("inlineCode",{parentName:"p"},"session")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"useSupabaseClient")," hook to get an authenticated ",(0,r.kt)("inlineCode",{parentName:"p"},"supabaseClient"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"useUser")," hook now returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," object or ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Usage with TypeScript: You can pass types that were ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/javascript/typescript-support#generating-types"},"generated with the Supabase CLI")," to the Supabase Client to get enhanced type safety and auto completion:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Creating a new supabase client object:\nimport { Database } from '../database.types';\n\nconst [supabaseClient] = useState(() =>\n    createBrowserSupabaseClient<Database>()\n  );\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Retrieving a supabase client object from the SessionContext:\nimport { useSupabaseClient } from '@supabase/auth-helpers-react';\nimport { Database } from '../database.types';\n\nconst supabaseClient = useSupabaseClient<Database>();\n")))))}h.isMDXComponent=!0}}]);