"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[5718],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),d=o,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(h,r(r({ref:t},u),{},{components:n})):a.createElement(h,r({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:o,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294),o=n(86010);const i="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(i,r),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(87462),o=n(67294),i=n(86010),r=n(72389),l=n(67392),s=n(7094),p=n(12466);const u="tabList__CuJ",m="tabItem_LNqP";function c(e){const{lazy:t,block:n,defaultValue:r,values:c,groupId:d,className:h}=e,g=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=c??g.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),k=(0,l.l)(b,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===r?r:r??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:v}=(0,s.U)(),[w,N]=(0,o.useState)(y),C=[],{blockElementScrollPositionUntilNextRender:T}=(0,p.o5)();if(null!=d){const e=f[d];null!=e&&e!==w&&b.some((t=>t.value===e))&&N(e)}const S=e=>{const t=e.currentTarget,n=C.indexOf(t),a=b[n].value;a!==w&&(T(t),N(a),null!=d&&v(d,String(a)))},A=e=>{let t=null;switch(e.key){case"Enter":S(e);break;case"ArrowRight":{const n=C.indexOf(e.currentTarget)+1;t=C[n]??C[0];break}case"ArrowLeft":{const n=C.indexOf(e.currentTarget)-1;t=C[n]??C[C.length-1];break}}t?.focus()};return o.createElement("div",{className:(0,i.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},h)},b.map((e=>{let{value:t,label:n,attributes:r}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>C.push(e),onKeyDown:A,onClick:S},r,{className:(0,i.Z)("tabs__item",m,r?.className,{"tabs__item--active":w===t})}),n??t)}))),t?(0,o.cloneElement)(g.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function d(e){const t=(0,r.Z)();return o.createElement(c,(0,a.Z)({key:String(t)},e))}},67806:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>m});var a=n(87462),o=(n(67294),n(3905)),i=n(65488),r=n(85162);const l={id:"managing-environments",title:"Managing Environments",description:"How to deploy Supabase schema changes with a CI / CD pipeline."},s=void 0,p={unversionedId:"guides/cli/managing-environments",id:"guides/cli/managing-environments",title:"Managing Environments",description:"How to deploy Supabase schema changes with a CI / CD pipeline.",source:"@site/docs/guides/cli/environments.mdx",sourceDirName:"guides/cli",slug:"/guides/cli/managing-environments",permalink:"/docs/guides/cli/managing-environments",draft:!1,editUrl:"https://github.com/docs/guides/cli/environments.mdx",tags:[],version:"current",frontMatter:{id:"managing-environments",title:"Managing Environments",description:"How to deploy Supabase schema changes with a CI / CD pipeline."}},u={},m=[{value:"Overview",id:"overview",level:2},{value:"Set up a local environment",id:"set-up-a-local-environment",level:2},{value:"Create a new migration",id:"create-a-new-migration",level:2},{value:"Manual migration",id:"manual-migration",level:3},{value:"Auto schema diff",id:"auto-schema-diff",level:3},{value:"Deploy a migration",id:"deploy-a-migration",level:2},{value:"Configure GitHub Actions",id:"configure-github-actions",level:3},{value:"Open a PR with new migration",id:"open-a-pr-with-new-migration",level:3},{value:"Release to production",id:"release-to-production",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Sync production project to staging",id:"sync-production-project-to-staging",level:3},{value:"Permission denied on db remote commit",id:"permission-denied-on-db-remote-commit",level:3},{value:"Permission denied on db push",id:"permission-denied-on-db-push",level:3},{value:"Rebasing new migrations",id:"rebasing-new-migrations",level:3}],c={toc:m};function d(e){let{components:t,...l}=e;return(0,o.kt)("wrapper",(0,a.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"The Supabase CLI provides the tools you need to manage multiple environments.\nThis guide shows you how to set up your local Supabase development environment that integrates with GitHub Actions to automatically\ntest and release schema changes to staging and production Supabase projects."),(0,o.kt)("p",null,"To get started:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/guides/cli"},"Install the Supabase CLI")),(0,o.kt)("li",{parentName:"ul"},"Create a ",(0,o.kt)("a",{parentName:"li",href:"https://app.supabase.com"},"Supabase project")," or use an existing one"),(0,o.kt)("li",{parentName:"ul"},"Initialize a local Git repository")),(0,o.kt)("h2",{id:"set-up-a-local-environment"},"Set up a local environment"),(0,o.kt)("p",null,"The first step is to set up your local repository with the Supabase CLI:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"supabase init\n")),(0,o.kt)("p",null,"You should see a new ",(0,o.kt)("inlineCode",{parentName:"p"},"supabase")," directory. Then you need to link your local repository with your Supabase project:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"supabase login\nsupabase link --project-ref $PROJECT_ID\n")),(0,o.kt)("p",null,"You can get your ",(0,o.kt)("inlineCode",{parentName:"p"},"$PROJECT_ID")," from your project's dashboard URL:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"https://app.supabase.com/project/<project-id>\n")),(0,o.kt)("p",null,"If you're using an existing Supabase project, you might have made schema changes through the Dashboard.\nRun the following command to pull these changes before making local schema changes from the CLI:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"supabase db remote commit\n")),(0,o.kt)("p",null,"This command creates a new migration in ",(0,o.kt)("inlineCode",{parentName:"p"},"supabase/migrations/<timestamp>_remote_commit.sql")," which reflects the schema changes you have made previously."),(0,o.kt)("p",null,"Now commit your local changes to Git and run the local development setup:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'git add .\ngit commit -m "init supabase"\nsupabase start\n')),(0,o.kt)("p",null,"You are now ready to develop schema changes locally and create your first migration."),(0,o.kt)("h2",{id:"create-a-new-migration"},"Create a new migration"),(0,o.kt)("p",null,"There are two ways to make schema changes:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Manual migration: Write DDL statements manually into a migration file"),(0,o.kt)("li",{parentName:"ol"},"Auto schema diff: Make changes through Studio UI and auto generate a schema diff")),(0,o.kt)("h3",{id:"manual-migration"},"Manual migration"),(0,o.kt)("p",null,"Create a new migration script by running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"supabase migration new new_employee\n")),(0,o.kt)("p",null,"You should see a new file created: ",(0,o.kt)("inlineCode",{parentName:"p"},"supabase/migrations/<timestamp>_new_employee.sql"),". You can then write SQL statements in this script using a text editor:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"create table public.employees (\n  id integer primary key generated always as identity,\n  name text\n);\n")),(0,o.kt)("p",null,"Apply the new migration to your local database:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"supabase db reset\n")),(0,o.kt)("p",null,"This command recreates your local database from scratch and applies all migration scripts under ",(0,o.kt)("inlineCode",{parentName:"p"},"supabase/migrations")," directory. Now your local database is up to date."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"The new migration command also supports stdin as input.\nThis allows you to pipe in an existing script from another file or stdout:"),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"supabase migration new new_employee < create_employees_table.sql"))),(0,o.kt)("h3",{id:"auto-schema-diff"},"Auto schema diff"),(0,o.kt)("p",null,"Unlike manual migrations, auto schema diff creates a new migration script from changes ",(0,o.kt)("strong",{parentName:"p"},"already")," applied to your local database."),(0,o.kt)("p",null,"Create an ",(0,o.kt)("inlineCode",{parentName:"p"},"employees")," table under the ",(0,o.kt)("inlineCode",{parentName:"p"},"public")," schema using Studio UI, accessible at ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:54323/"},"localhost:54323")," by default."),(0,o.kt)("p",null,"Next, generate a schema diff by running the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"supabase db diff -f new_employee\n")),(0,o.kt)("p",null,"You should see that a new file ",(0,o.kt)("inlineCode",{parentName:"p"},"supabase/migrations/<timestamp>_new_employee.sql")," is created. Open the file and verify that the generated DDL statements are the same as below."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},'-- This script was generated by the Schema Diff utility in pgAdmin 4\n-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated\n-- and may require manual changes to the script to ensure changes are applied in the correct order.\n-- Please report an issue for any failure with the reproduction steps.\n\nCREATE TABLE IF NOT EXISTS public.employees\n(\n    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),\n    name text COLLATE pg_catalog."default",\n    CONSTRAINT employees_pkey PRIMARY KEY (id)\n)\n\nTABLESPACE pg_default;\n\nALTER TABLE IF EXISTS public.employees\n    OWNER to postgres;\n\nGRANT ALL ON TABLE public.employees TO anon;\n\nGRANT ALL ON TABLE public.employees TO authenticated;\n\nGRANT ALL ON TABLE public.employees TO postgres;\n\nGRANT ALL ON TABLE public.employees TO service_role;\n')),(0,o.kt)("p",null,"You may notice that the auto-generated migration script is more verbose than the manually written one.\nThis is because the default schema diff tool does not account for default privileges added by the initial schema."),(0,o.kt)("p",null,"Commit the new migration script to git and you are ready to deploy."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Alternatively, you may pass in the ",(0,o.kt)("inlineCode",{parentName:"p"},"--use-migra")," experimental flag to generate a more concise migration using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/djrobstep/migra"},"migra"),".\nWithout the ",(0,o.kt)("inlineCode",{parentName:"p"},"-f")," file flag, the output is written to stdout by default."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"supabase db diff --use-migra"))),(0,o.kt)("h2",{id:"deploy-a-migration"},"Deploy a migration"),(0,o.kt)("p",null,"In a production environment, we recommend using a CI/CD pipeline to deploy new migrations with GitHub Actions rather than deploying from your local machine."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Deploy migration",src:n(96267).Z,width:"2208",height:"1326"})),(0,o.kt)("p",null,"This example uses two Supabase projects, one for production and one for staging."),(0,o.kt)("p",null,"Prepare your environments by:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Creating separate Supabase projects for staging and production"),(0,o.kt)("li",{parentName:"ul"},"Pushing your git repository to GitHub and enabling GitHub Actions")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"You need a ",(0,o.kt)("em",{parentName:"p"},"new")," project for staging. A project which has already been modified to reflect the production project's schema can't be used because the CLI would reapply these changes.")),(0,o.kt)("h3",{id:"configure-github-actions"},"Configure GitHub Actions"),(0,o.kt)("p",null,"The Supabase CLI requires a few environment variables to run in non-interactive mode."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SUPABASE_ACCESS_TOKEN")," is your personal access token"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SUPABASE_DB_PASSWORD")," is your project specific database password")),(0,o.kt)("p",null,"We recommend adding these as ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets"},"encrypted secrets")," to your GitHub Actions runners."),(0,o.kt)("p",null,"Create the following files inside the ",(0,o.kt)("inlineCode",{parentName:"p"},".github/workflows")," directory:"),(0,o.kt)(i.Z,{defaultValue:"CI",values:[{label:"ci.yaml",value:"CI"},{label:"staging.yaml",value:"STAGING"},{label:"production.yaml",value:"PRODUCTION"}],mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"CI",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".github/workflows/ci.yml"',title:'".github/workflows/ci.yml"'},'name: CI\n\non:\n  pull_request:\n  workflow_dispatch:\n\njobs:\n  test:\n    runs-on: ubuntu-22.04\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: supabase/setup-cli@v1\n        with:\n          version: 1.0.0\n\n      - name: Start Supabase local development setup\n        run: supabase start\n\n      - name: Verify generated types are up-to-date\n        run: |\n          supabase gen types typescript --local > types.ts\n          if [ "$(git diff --ignore-space-at-eol types.ts | wc -l)" -gt "0" ]; then\n            echo "Detected uncommitted changes after build. See status below:"\n            git diff\n            exit 1\n          fi\n'))),(0,o.kt)(r.Z,{value:"STAGING",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".github/workflows/staging.yml"',title:'".github/workflows/staging.yml"'},"name: Deploy Migrations to Staging\n\non:\n  push:\n    branches:\n      - develop\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-22.04\n\n    env:\n      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}\n      SUPABASE_DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}\n      STAGING_PROJECT_ID: abcdefghijklmnopqrst\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: supabase/setup-cli@v1\n        with:\n          version: 1.0.0\n\n      - run: |\n          supabase link --project-ref $STAGING_PROJECT_ID\n          supabase db push\n"))),(0,o.kt)(r.Z,{value:"PRODUCTION",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title=".github/workflows/production.yml"',title:'".github/workflows/production.yml"'},"name: Deploy Migrations to Production\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-22.04\n\n    env:\n      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}\n      SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}\n      PRODUCTION_PROJECT_ID: abcdefghijklmnopqrst\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - uses: supabase/setup-cli@v1\n        with:\n          version: 1.0.0\n\n      - run: |\n          supabase link --project-ref $PRODUCTION_PROJECT_ID\n          supabase db push\n")))),(0,o.kt)("p",null,"The full example code is available in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/supabase/supabase-action-example"},"demo repository"),"."),(0,o.kt)("p",null,"Commit these files to git and push to your ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," branch on GitHub. Update these environment variables to match your Supabase projects:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SUPABASE_ACCESS_TOKEN")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"PRODUCTION_PROJECT_ID")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"PRODUCTION_DB_PASSWORD")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"STAGING_PROJECT_ID")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"STAGING_DB_PASSWORD"))),(0,o.kt)("p",null,"When configured correctly, your repository will have CI and Release workflows that trigger on new commits pushed to ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"develop")," branches."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Correctly configured repo",src:n(76442).Z,width:"720",height:"260"})),(0,o.kt)("h3",{id:"open-a-pr-with-new-migration"},"Open a PR with new migration"),(0,o.kt)("p",null,"Follow the ",(0,o.kt)("a",{parentName:"p",href:"#create-a-new-migration"},"migration steps")," to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"supabase/migrations/<timestamp>_new_employee.sql")," file."),(0,o.kt)("p",null,"Checkout a new branch ",(0,o.kt)("inlineCode",{parentName:"p"},"feat/employee")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"develop")," , commit the migration file, and push to GitHub."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'git checkout -b feat/employee\ngit add supabase/migrations/<timestamp>_new_employee.sql\ngit commit -m "Add employee table"\ngit push --set-upstream origin feat/employee\n')),(0,o.kt)("p",null,"Open a PR from ",(0,o.kt)("inlineCode",{parentName:"p"},"feat/employee")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"develop")," branch to see that the CI workflow has been triggered."),(0,o.kt)("p",null,"Once the test error is resolved, merge this PR and watch the deployment in action."),(0,o.kt)("h3",{id:"release-to-production"},"Release to production"),(0,o.kt)("p",null,"After verifying your staging project has successfully migrated, create another PR from ",(0,o.kt)("inlineCode",{parentName:"p"},"develop")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"main")," and merge it to deploy the migration to the production project."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"release")," job applies all new migration scripts merged in ",(0,o.kt)("inlineCode",{parentName:"p"},"supabase/migrations")," directory to a linked Supabase project. You can control which project the job links to via ",(0,o.kt)("inlineCode",{parentName:"p"},"PROJECT_ID")," environment variable."),(0,o.kt)("h2",{id:"troubleshooting"},"Troubleshooting"),(0,o.kt)("h3",{id:"sync-production-project-to-staging"},"Sync production project to staging"),(0,o.kt)("p",null,"When setting up a new staging project, you might need to sync the initial schema with migrations previously applied to the production project."),(0,o.kt)("p",null,"One way is to leverage the Release workflow:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create a new branch ",(0,o.kt)("inlineCode",{parentName:"li"},"develop")," and choose ",(0,o.kt)("inlineCode",{parentName:"li"},"main")," as the branch source"),(0,o.kt)("li",{parentName:"ul"},"Push the ",(0,o.kt)("inlineCode",{parentName:"li"},"develop")," branch to GitHub")),(0,o.kt)("p",null,"The GitHub Actions runner will deploy your existing migrations to the staging project."),(0,o.kt)("p",null,"Alternatively, you can also apply migrations through your local CLI to a linked remote database."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"supabase db push\n")),(0,o.kt)("p",null,"Once pushed, check that the migration version is up to date for both local and remote databases."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"supabase migration list\n")),(0,o.kt)("h3",{id:"permission-denied-on-db-remote-commit"},"Permission denied on db remote commit"),(0,o.kt)("p",null,"If you have been using Supabase hosted projects for a long time, you might encounter the following permission error when executing ",(0,o.kt)("inlineCode",{parentName:"p"},"db remote commit"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'Error: Error running pg_dump on remote database: pg_dump: error: query failed: ERROR:  permission denied for table _type\n\npg_dump: error: query was: LOCK TABLE "graphql"."_type" IN ACCESS SHARE MODE\n')),(0,o.kt)("p",null,"To resolve this error, you need to grant ",(0,o.kt)("inlineCode",{parentName:"p"},"postgres")," role permissions to ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql")," schema. You can do that by running the following query from Supabase dashboard's SQL Editor."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"grant all on all tables in schema graphql to postgres, anon, authenticated, service_role;\ngrant all on all functions in schema graphql to postgres, anon, authenticated, service_role;\ngrant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;\n")),(0,o.kt)("h3",{id:"permission-denied-on-db-push"},"Permission denied on db push"),(0,o.kt)("p",null,"If you created a table through Supabase dashboard, and your new migration script contains ",(0,o.kt)("inlineCode",{parentName:"p"},"ALTER TABLE")," statements, you might run into permission error when applying them on staging or production databases."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"ERROR: must be owner of table employees (SQLSTATE 42501); while executing migration <timestamp>\n")),(0,o.kt)("p",null,"This is because tables created through Supabase dashboard are owned by ",(0,o.kt)("inlineCode",{parentName:"p"},"supabase_admin")," role while the migration scripts executed through CLI are under ",(0,o.kt)("inlineCode",{parentName:"p"},"postgres")," role."),(0,o.kt)("p",null,"One way to solve this is to reassign the owner of those tables to ",(0,o.kt)("inlineCode",{parentName:"p"},"postgres")," role. For example, if your table is named ",(0,o.kt)("inlineCode",{parentName:"p"},"users")," in the public schema, you can run the following command to reassign owner."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE users OWNER TO postgres;\n")),(0,o.kt)("p",null,"Apart from tables, you also need to reassign owner of other entities using their respective commands, including ",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-alterschema.html"},"types"),", ",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-alterroutine.html"},"functions"),", and ",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-altertype.html"},"schemas"),"."),(0,o.kt)("h3",{id:"rebasing-new-migrations"},"Rebasing new migrations"),(0,o.kt)("p",null,"Sometimes your teammate may merge a new migration file to git main branch, and now you need to rebase your local schema changes on top."),(0,o.kt)("p",null,"We can handle this scenario gracefully by renaming your old migration file with a new timestamp."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"git pull\nsupabase migration new dev_A\n# Assume the new file is: supabase/migrations/<t+2>_dev_A.sql\nmv <time>_dev_A.sql <t+2>_dev_A.sql\nsupabase db reset\n")),(0,o.kt)("p",null,"In case ",(0,o.kt)("a",{parentName:"p",href:"/reference/cli/usage#supabase-db-reset"},(0,o.kt)("inlineCode",{parentName:"a"},"reset"))," fails, you can manually resolve conflicts by editing ",(0,o.kt)("inlineCode",{parentName:"p"},"<t+2>_dev_A.sql")," file."),(0,o.kt)("p",null,"Once validated locally, commit your changes to Git and push to GitHub."))}d.isMDXComponent=!0},76442:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/ci-main-cbcedd84dc1d0dd16e4258356acde1ae.png"},96267:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/cicd-github-713eced0d6742c196d8be86414424b5d.png"}}]);