"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[91761],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(a),h=r,k=c["".concat(l,".").concat(h)]||c[h]||d[h]||s;return a?n.createElement(k,i(i({ref:t},u),{},{components:a})):n.createElement(k,i({ref:t},u))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},39038:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const s={id:"clerk",title:"Clerk",description:"This guide explains how to connect your Supabase database with Clerk, a powerful authentication provider built for the modern web."},i=void 0,o={unversionedId:"guides/integrations/clerk",id:"guides/integrations/clerk",title:"Clerk",description:"This guide explains how to connect your Supabase database with Clerk, a powerful authentication provider built for the modern web.",source:"@site/docs/guides/integrations/clerk.mdx",sourceDirName:"guides/integrations",slug:"/guides/integrations/clerk",permalink:"/docs/guides/integrations/clerk",draft:!1,editUrl:"https://github.com/docs/guides/integrations/clerk.mdx",tags:[],version:"current",frontMatter:{id:"clerk",title:"Clerk",description:"This guide explains how to connect your Supabase database with Clerk, a powerful authentication provider built for the modern web."}},l={},p=[{value:"Step 1: Create JWT template",id:"step-1-create-jwt-template",level:2},{value:"Step 2: Sign JWT with Supabase secret",id:"step-2-sign-jwt-with-supabase-secret",level:2},{value:"Step 3: Configure client",id:"step-3-configure-client",level:2},{value:"Step 4: Set up Clerk Provider",id:"step-4-set-up-clerk-provider",level:2},{value:"Step 5: Set auth token with Supabase",id:"step-5-set-auth-token-with-supabase",level:2},{value:"Access user ID in RLS policies",id:"access-user-id-in-rls-policies",level:2},{value:"Access user ID in table column",id:"access-user-id-in-table-column",level:2},{value:"Resources",id:"resources",level:2}],u={toc:p};function c(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide explains how to connect your Supabase database with ",(0,r.kt)("a",{parentName:"p",href:"https://clerk.dev"},"Clerk"),", an authentication provider built for the modern web."),(0,r.kt)("p",null,"Clerk authenticates users, manages session tokens, and provides user management functionality that can be used in combination with the authorization logic available in Supabase through PostgreSQL Row Level Security (RLS) policies."),(0,r.kt)("p",null,"This guide assumes you have a Supabase account and database project already set up."),(0,r.kt)("p",null,"If you don't have a Clerk account, you can ",(0,r.kt)("a",{parentName:"p",href:"https://dashboard.clerk.dev/sign-up"},"create one now"),"."),(0,r.kt)("h2",{id:"step-1-create-jwt-template"},"Step 1: Create JWT template"),(0,r.kt)("p",null,"The first step is to create a new Clerk application from your Clerk Dashboard if you haven't done so already. You can choose whichever authentication strategy and social login providers you prefer. For more information, check out Clerk's ",(0,r.kt)("a",{parentName:"p",href:"https://docs.clerk.dev/popular-guides/setup-your-application"},"guide"),"."),(0,r.kt)("p",null,"After your Clerk application has been created, use the lefthand menu to navigate to the ",(0,r.kt)("strong",{parentName:"p"},"JWT Templates")," page."),(0,r.kt)("p",null,"Click on the button to create a new template based on Supabase."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Create Supabase JWT template from Clerk dashboard",src:a(91069).Z,width:"1472",height:"1238"})),(0,r.kt)("p",null,"This will pre-populate the default claims required by Supabase. You can include additional claims or modify them as necessary. ",(0,r.kt)("a",{parentName:"p",href:"https://docs.clerk.dev/popular-guides/jwt-templates#shortcodes"},"Shortcodes")," are also available for adding dynamic values."),(0,r.kt)("p",null,"\u2139\ufe0f\xa0Note the name of the JWT template (which you can change) because this will be needed later."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"JWT template claims",src:a(72649).Z,width:"1012",height:"875"})),(0,r.kt)("h2",{id:"step-2-sign-jwt-with-supabase-secret"},"Step 2: Sign JWT with Supabase secret"),(0,r.kt)("p",null,"Supabase requires JWTs be signed with the HS256 signing algorithm and use their signing key. Find the JWT secret key in your Supabase project under ",(0,r.kt)("strong",{parentName:"p"},"Settings")," > ",(0,r.kt)("strong",{parentName:"p"},"API")," in the ",(0,r.kt)("strong",{parentName:"p"},"Config")," section."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Sign with Supabase secret",src:a(70741).Z,width:"2406",height:"1308"})),(0,r.kt)("p",null,"Click to reveal the JWT secret, copy it, and then paste it in the Signing key field in the Clerk JWT template."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Paste signing key",src:a(64436).Z,width:"1042",height:"474"})),(0,r.kt)("p",null,"After the key is added, click the ",(0,r.kt)("strong",{parentName:"p"},"Apply Changes")," button to save your template."),(0,r.kt)("h2",{id:"step-3-configure-client"},"Step 3: Configure client"),(0,r.kt)("p",null,"The next step is to configure your client. Supabase provides an official ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/supabase/supabase-js"},"JavaScript/TypeScript client library")," and there are ",(0,r.kt)("a",{parentName:"p",href:"https://supabase.com/docs/reference/javascript/installing"},"libraries in other languages")," built by the community."),(0,r.kt)("p",null,"This guide will use a Next.js project with the JS client as an example, but the mechanism of setting the authentication token should be similar with other libraries and frameworks."),(0,r.kt)("p",null,"Assuming a Next.js application, set the following environment variables in an ",(0,r.kt)("inlineCode",{parentName:"p"},".env.local")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"NEXT_PUBLIC_CLERK_FRONTEND_API=your-frontend-api\nNEXT_PUBLIC_SUPABASE_URL=your-supabase-url\nNEXT_PUBLIC_SUPABASE_KEY=your-supabase-anon-key\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": If you're using Create React App, replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"NEXT_PUBLIC")," prefix with ",(0,r.kt)("inlineCode",{parentName:"p"},"REACT_APP")),(0,r.kt)("p",null,"Your Clerk Frontend API can be found on the ",(0,r.kt)("a",{parentName:"p",href:"https://dashboard.clerk.dev/last-active?path=api-keys"},"API Keys")," screen."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Clerk Frontend API",src:a(85263).Z,width:"2064",height:"748"})),(0,r.kt)("p",null,"To get the ones needed for Supabase, navigate to the same Settings > API page as before and locate the anon public key and URL."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Supabase keys",src:a(28029).Z,width:"2392",height:"1300"})),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": It is recommended that you enable ",(0,r.kt)("a",{parentName:"p",href:"https://supabase.com/docs/guides/auth/row-level-security"},"Row Level Security")," (RLS) for your database tables and configure access policies as needed."),(0,r.kt)("p",null,"After setting those three environment variables, you should be able to start up your application development server."),(0,r.kt)("p",null,"Install the JavaScript client for Supabase with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @supabase/supabase-js\n")),(0,r.kt)("p",null,"Initialize the Supabase client by passing it the environment variables."),(0,r.kt)("p",null,"This can be saved to a common file, for example as ",(0,r.kt)("inlineCode",{parentName:"p"},"lib/supabaseClient.js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_KEY\n\nexport const supabase = createClient(supabaseUrl, supabaseKey)\nexport default supabase\n")),(0,r.kt)("h2",{id:"step-4-set-up-clerk-provider"},"Step 4: Set up Clerk Provider"),(0,r.kt)("p",null,"Install the latest Clerk Next.js SDK by running the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @clerk/nextjs@next\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": There is also a Clerk library for ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/clerkinc/javascript/tree/main/packages/react"},"React")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/clerkinc/javascript/tree/main/packages/expo"},"React Native with Expo"),"."),(0,r.kt)("p",null,"After the package is installed, wrap your application with the ",(0,r.kt)("inlineCode",{parentName:"p"},"<ClerkProvider />")," component."),(0,r.kt)("p",null,"In a Next.js application, this is typically done in ",(0,r.kt)("inlineCode",{parentName:"p"},"pages/_app.js"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { ClerkProvider } from '@clerk/nextjs'\n\nfunction MyApp({ Component, pageProps }) {\n  return (\n    <ClerkProvider>\n      <Component {...pageProps} />\n    </ClerkProvider>\n  )\n}\n\nexport default MyApp\n")),(0,r.kt)("h2",{id:"step-5-set-auth-token-with-supabase"},"Step 5: Set auth token with Supabase"),(0,r.kt)("p",null,"In order to access the custom JWT, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"getToken")," function returned by the Clerk ",(0,r.kt)("inlineCode",{parentName:"p"},"useAuth")," hook and pass it the name of your template (hopefully you remembered from earlier)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),": The ",(0,r.kt)("inlineCode",{parentName:"p"},"getToken({ template: <your-template-name> })")," call is asynchronous and returns a Promise that needs to be resolved before accessing the token value. This token is short-lived for better security and should be called before every request to your Supabase backend. The caching and refreshing of the token is handled automatically by Clerk."),(0,r.kt)("p",null,"Call ",(0,r.kt)("inlineCode",{parentName:"p"},"supabase.auth.setAuth(token)")," to override the JWT on the current client. The JWT will then be sent to Supabase with all subsequent network requests."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useAuth } from '@clerk/nextjs'\nimport supabase from '../lib/supabaseClient'\n\nexport default function Home() {\n  const { getToken } = useAuth()\n\n  const fetchData = async () => {\n    // TODO #1: Replace with your JWT template name\n    const token = await getToken({ template: 'supabase' })\n\n    supabase.auth.setAuth(token)\n\n    // TODO #2: Replace with your database table name\n    const { data, error } = await supabase.from('your_table').select()\n\n    // TODO #3: Handle the response\n  }\n\n  return (\n    <button type=\"button\" onClick={fetchData}>\n      Fetch data\n    </button>\n  )\n}\n")),(0,r.kt)("h2",{id:"access-user-id-in-rls-policies"},"Access user ID in RLS policies"),(0,r.kt)("p",null,"It is common practice to need access to the user identifier on the database level, especially when working with RLS policies in Postgres. Although Supabase provides a special function ",(0,r.kt)("inlineCode",{parentName:"p"},"auth.uid()")," to extract the user ID from the JWT, this does not work with Clerk. The workaround is to write a custom SQL function to read the ",(0,r.kt)("inlineCode",{parentName:"p"},"sub")," property from the JWT claims."),(0,r.kt)("p",null,"In the ",(0,r.kt)("strong",{parentName:"p"},"SQL Editor")," section of the Supabase dashboard, click New Query and enter the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"create or replace function requesting_user_id()\nreturns text\nlanguage sql stable\nas $$\n  select nullif(current_setting('request.jwt.claims', true)::json->>'sub', '')::text;\n$$;\n")),(0,r.kt)("p",null,"This will create a ",(0,r.kt)("inlineCode",{parentName:"p"},"requesting_user_id()")," function that can be used within an RLS policy."),(0,r.kt)("p",null,"For example, this policy would check that the user making the request is authenticated and matches the ",(0,r.kt)("inlineCode",{parentName:"p"},"user_id")," column of a todos table."),(0,r.kt)("h2",{id:"access-user-id-in-table-column"},"Access user ID in table column"),(0,r.kt)("p",null,"If you would like the requesting user ID from the JWT to automatically populate a text type column in your database table, you can set the ",(0,r.kt)("strong",{parentName:"p"},"Default Value")," field to the previously defined ",(0,r.kt)("inlineCode",{parentName:"p"},"requesting_user_id()")," function."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Set requesting_user_id() as default value",src:a(97363).Z,width:"1304",height:"1476"})),(0,r.kt)("h2",{id:"resources"},"Resources"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/clerkinc/clerk-supabase-starter"},"Clerk + Supabase starter repo")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://clerk.dev/blog/nextjs-supabase-todos-with-multifactor-authentication"},"Next.js + Supabase + Clerk tutorial")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.clerk.dev/get-started/nextjs"},"Clerk guide for Next.js Authentication")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://discord.com/invite/b5rXHjAg7A"},"Clerk Community Discord channel"))))}c.isMDXComponent=!0},91069:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/01_supabase-template-0841276f2eedb7ce5949dc4c2f8f79ba.png"},72649:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/02_jwt-claims-794fdd10d27cc4cb0bd96b8efd372721.png"},70741:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/03_jwt-secret-4741359dd7515d2e2403efde6d375056.png"},64436:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/04_signing-key-d08aff19b3be0ec593841c91abef2d8c.png"},85263:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/05_clerk-frontend-api-6e1fec23e7313423d947bc29f1b19af9.png"},28029:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/06_supabase-keys-78c79a60288dce821b9dd51533155efa.png"},97363:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/07_requesting-user-id-88f1b0288162e0ad15024f6d77a2b3ed.png"}}]);