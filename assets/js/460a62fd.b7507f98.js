"use strict";(self.webpackChunkreference_docs=self.webpackChunkreference_docs||[]).push([[50976],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(a),m=o,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||r;return a?n.createElement(h,s(s({ref:t},u),{},{components:a})):n.createElement(h,s({ref:t},u))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},85162:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(67294),o=a(86010);const r="tabItem_Ymn6";function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,s),hidden:a},t)}},65488:(e,t,a)=>{a.d(t,{Z:()=>m});var n=a(87462),o=a(67294),r=a(86010),s=a(72389),i=a(67392),l=a(7094),p=a(12466);const u="tabList__CuJ",d="tabItem_LNqP";function c(e){const{lazy:t,block:a,defaultValue:s,values:c,groupId:m,className:h}=e,g=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),w=c??g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),b=(0,i.l)(w,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===s?s:s??g.find((e=>e.props.default))?.props.value??g[0].props.value;if(null!==k&&!w.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${w.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:v}=(0,l.U)(),[y,N]=(0,o.useState)(k),A=[],{blockElementScrollPositionUntilNextRender:S}=(0,p.o5)();if(null!=m){const e=f[m];null!=e&&e!==y&&w.some((t=>t.value===e))&&N(e)}const j=e=>{const t=e.currentTarget,a=A.indexOf(t),n=w[a].value;n!==y&&(S(t),N(n),null!=m&&v(m,String(n)))},P=e=>{let t=null;switch(e.key){case"Enter":j(e);break;case"ArrowRight":{const a=A.indexOf(e.currentTarget)+1;t=A[a]??A[0];break}case"ArrowLeft":{const a=A.indexOf(e.currentTarget)-1;t=A[a]??A[A.length-1];break}}t?.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",u)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":a},h)},w.map((e=>{let{value:t,label:a,attributes:s}=e;return o.createElement("li",(0,n.Z)({role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,key:t,ref:e=>A.push(e),onKeyDown:P,onClick:j},s,{className:(0,r.Z)("tabs__item",d,s?.className,{"tabs__item--active":y===t})}),a??t)}))),t?(0,o.cloneElement)(g.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==y})))))}function m(e){const t=(0,s.Z)();return o.createElement(c,(0,n.Z)({key:String(t)},e))}},82422:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var n=a(87462),o=(a(67294),a(3905)),r=a(65488),s=a(85162);const i={id:"with-redwoodjs",title:"Quickstart: RedwoodJS",description:"Learn how to use Supabase in your RedwoodJS App.",sidebar_label:"RedwoodJS"},l=void 0,p={unversionedId:"guides/with-redwoodjs",id:"guides/with-redwoodjs",title:"Quickstart: RedwoodJS",description:"Learn how to use Supabase in your RedwoodJS App.",source:"@site/docs/guides/with-redwoodjs.mdx",sourceDirName:"guides",slug:"/guides/with-redwoodjs",permalink:"/docs/guides/with-redwoodjs",draft:!1,editUrl:"https://github.com/docs/guides/with-redwoodjs.mdx",tags:[],version:"current",frontMatter:{id:"with-redwoodjs",title:"Quickstart: RedwoodJS",description:"Learn how to use Supabase in your RedwoodJS App.",sidebar_label:"RedwoodJS"}},u={},d=[{value:"Intro",id:"intro",level:2},{value:"GitHub",id:"github",level:3},{value:"About RedwoodJS",id:"about-redwoodjs",level:2},{value:"Project set up",id:"project-set-up",level:2},{value:"Create a project",id:"create-a-project",level:3},{value:"Set up the database schema",id:"set-up-the-database-schema",level:3},{value:"Important Note about Prisma and Migrations",id:"important-note-about-prisma-and-migrations",level:4},{value:"Get the API Keys",id:"get-the-api-keys",level:3},{value:"Building the App",id:"building-the-app",level:2},{value:"Initialize a RedwoodJS app",id:"initialize-a-redwoodjs-app",level:3},{value:"Start RedwoodJS and your first Page",id:"start-redwoodjs-and-your-first-page",level:3},{value:"Set up a Login component",id:"set-up-a-login-component",level:3},{value:"Set up an Account component",id:"set-up-an-account-component",level:3},{value:"Update Home Page",id:"update-home-page",level:3},{value:"Launch!",id:"launch",level:3},{value:"Bonus: Profile photos",id:"bonus-profile-photos",level:2},{value:"Create an upload widget",id:"create-an-upload-widget",level:3},{value:"Add the new widget",id:"add-the-new-widget",level:3},{value:"Next steps",id:"next-steps",level:2}],c={toc:d};function m(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"intro"},"Intro"),(0,o.kt)("p",null,"For the sake of consistency with the other framework Quickstart examples, we'll build a RedwoodJS a little differently than normal."),(0,o.kt)("p",null,"We ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"won't use"))," Prisma to connect to the Supabase Postgres database or ",(0,o.kt)("a",{parentName:"p",href:"https://redwoodjs.com/docs/cli-commands#prisma-migrate"},"Prisma migrations")," as one typically might in a Redwood app.\nInstead, we'll rely on the Supabase client to do some of the work on the ",(0,o.kt)("strong",{parentName:"p"},"web")," side and use the client again on the ",(0,o.kt)("strong",{parentName:"p"},"API")," side to do data fetching as well."),(0,o.kt)("p",null,"That means you will want to refrain from running any ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn rw prisma migrate")," commands and also double check your build commands on deployment to ensure Prisma won't reset your database."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"TLDR; Prisma currently doesn't support cross-schema foreign keys, so introspecting the schema fails due to how your Supabase ",(0,o.kt)("inlineCode",{parentName:"p"},"public")," schema references the ",(0,o.kt)("inlineCode",{parentName:"p"},"auth.users"),".")),(0,o.kt)("p",null,"This example provides the steps to build a simple user management app (from scratch!) using Supabase and ",(0,o.kt)("a",{parentName:"p",href:"https://redwoodjs.com/docs/introduction"},"RedwoodJS"),". It includes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Supabase ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/database"},"Database"),": a Postgres database for storing your user data."),(0,o.kt)("li",{parentName:"ul"},"Supabase ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/auth"},"Auth"),": users can sign in with magic links (no passwords, only email)."),(0,o.kt)("li",{parentName:"ul"},"Supabase ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/storage"},"Storage"),": users can upload a photo."),(0,o.kt)("li",{parentName:"ul"},"Instant ",(0,o.kt)("a",{parentName:"li",href:"/docs/guides/api"},"APIs"),": APIs will be automatically generated when you create your database tables."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/guides/auth#row-level-security"},"Row Level Security"),": data is protected so that individuals can only access their own data.")),(0,o.kt)("p",null,"By the end of this guide you'll have an app which allows users to login and update some basic profile details:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Supabase User Management example",src:a(83900).Z,width:"1558",height:"873"})),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Note: For RedwoodJS apps, port will be 8910")),(0,o.kt)("h3",{id:"github"},"GitHub"),(0,o.kt)("p",null,"If you get stuck at any point, take a look at ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/redwoodjs/redwoodjs-supabase-quickstart"},"this repo"),"."),(0,o.kt)("h2",{id:"about-redwoodjs"},"About RedwoodJS"),(0,o.kt)("p",null,"A Redwood application is split into two parts: a frontend and a backend. This is represented as two node projects within a single monorepo."),(0,o.kt)("p",null,"The frontend project is called ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"web"))," and the backend project is called ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"api")),". For clarity, we will refer to these in prose as ",(0,o.kt)("strong",{parentName:"p"},'"sides"'),', i.e. the "web side" and the "api side".\nThey are separate projects because code on the ',(0,o.kt)("inlineCode",{parentName:"p"},"web side")," will end up running in the user's browser while code on the ",(0,o.kt)("inlineCode",{parentName:"p"},"api side")," will run on a server somewhere."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},'Important: When this guide refers to "API", that means the Supabase API and when it refers to "api side", that means the RedwoodJS ',(0,o.kt)("inlineCode",{parentName:"p"},"api side"),".")),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"api side")),' is an implementation of a GraphQL API. The business logic is organized into "services" that represent their own internal API and can be called both from external GraphQL requests and other internal services.'),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"web side")),' is built with React. Redwood\'s router makes it simple to map URL paths to React "Page" components (and automatically code-split your app on each route).\nPages may contain a "Layout" component to wrap content. They also contain "Cells" and regular React components.\nCells allow you to declaratively manage the lifecycle of a component that fetches and displays data.'),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"For the sake of consistency with the other framework Quickstart examples, we'll build a RedwoodJS a little differently than normal.\nWe ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"won't use"))," Prisma to connect to the Supabase Postgres database or ",(0,o.kt)("a",{parentName:"p",href:"https://redwoodjs.com/docs/cli-commands#prisma-migrate"},"Prisma migrations")," as one typically might in a Redwood app.\nInstead, we'll rely on the Supabase client to do some of the work on the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"web"))," side and use the client again on the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"api"))," side to do data fetching as well.")),(0,o.kt)("h2",{id:"project-set-up"},"Project set up"),(0,o.kt)("p",null,'Before we start building we\'re going to set up our Database and API. This is as simple as starting a new Project in Supabase\nand then creating a "schema" inside the database.'),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"When setting up Supabase, you'll interact with your project dashboard. However, most of the RedwoodJS setup steps will interact with the ",(0,o.kt)("a",{parentName:"p",href:"https://redwoodjs.com/docs/cli-commands"},"Redwood CLI")," to generate routes, pages, components, and more.\nSo be sure to have a terminal at the ready and in your project directory.")),(0,o.kt)("h3",{id:"create-a-project"},"Create a project"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Go to ",(0,o.kt)("a",{parentName:"li",href:"https://app.supabase.com"},"app.supabase.com"),"."),(0,o.kt)("li",{parentName:"ol"},'Click on "New Project".'),(0,o.kt)("li",{parentName:"ol"},"Enter your project details."),(0,o.kt)("li",{parentName:"ol"},"Wait for the new database to launch.")),(0,o.kt)("h3",{id:"set-up-the-database-schema"},"Set up the database schema"),(0,o.kt)("p",null,'Now we are going to set up the database schema. We can use the "User Management Starter" quickstart in the SQL Editor,\nor you can just copy/paste the SQL from below and run it yourself.'),(0,o.kt)(r.Z,{defaultValue:"dashboard",values:[{label:"Dashboard",value:"dashboard"},{label:"SQL",value:"sql"}],mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"dashboard",mdxType:"TabItem"},(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Go to the ",(0,o.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/sql"},"SQL Editor")," page in the Dashboard."),(0,o.kt)("li",{parentName:"ol"},"Click ",(0,o.kt)("strong",{parentName:"li"},"User Management Starter"),"."),(0,o.kt)("li",{parentName:"ol"},"Click ",(0,o.kt)("strong",{parentName:"li"},"Run"),".")),(0,o.kt)("video",{width:"99%",muted:!0,playsInline:!0,controls:"true"},(0,o.kt)("source",{src:"/docs/videos/sql-user-management-starter.mp4",type:"video/mp4",muted:!0,playsInline:!0}))),(0,o.kt)(s.Z,{value:"sql",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},'-- Create a table for public "profiles"\ncreate table profiles (\n  id uuid references auth.users not null,\n  updated_at timestamp with time zone,\n  username text unique,\n  avatar_url text,\n  website text,\n\n  primary key (id),\n  unique(username),\n  constraint username_length check (char_length(username) >= 3)\n);\n\nalter table profiles enable row level security;\n\ncreate policy "Public profiles are viewable by everyone."\n  on profiles for select\n  using ( true );\n\ncreate policy "Users can insert their own profile."\n  on profiles for insert\n  with check ( auth.uid() = id );\n\ncreate policy "Users can update own profile."\n  on profiles for update\n  using ( auth.uid() = id );\n\n-- Set up Realtime!\nbegin;\n  drop publication if exists supabase_realtime;\n  create publication supabase_realtime;\ncommit;\nalter publication supabase_realtime add table profiles;\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\nvalues (\'avatars\', \'avatars\');\n\ncreate policy "Avatar images are publicly accessible."\n  on storage.objects for select\n  using ( bucket_id = \'avatars\' );\n\ncreate policy "Anyone can upload an avatar."\n  on storage.objects for insert\n  with check ( bucket_id = \'avatars\' );\n\n')))),(0,o.kt)("h4",{id:"important-note-about-prisma-and-migrations"},"Important Note about Prisma and Migrations"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Because this Quick Start does not use Prisma to manage the database schema, seed it, or run migrations, you ",(0,o.kt)("strong",{parentName:"p"},"need")," to take extra care when running some of the typical Redwood CLI commands.")),(0,o.kt)("h3",{id:"get-the-api-keys"},"Get the API Keys"),(0,o.kt)("p",null,"Now that you've created some database tables, you are ready to insert data using the auto-generated API.\nWe just need to get the URL as well as the ",(0,o.kt)("inlineCode",{parentName:"p"},"anon"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"service_role")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"JWT_SECRET")," keys from the API settings."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Go to the ",(0,o.kt)("a",{parentName:"li",href:"https://app.supabase.com/project/_/settings"},"Settings")," page in the Dashboard."),(0,o.kt)("li",{parentName:"ol"},"Click ",(0,o.kt)("strong",{parentName:"li"},"API")," in the sidebar."),(0,o.kt)("li",{parentName:"ol"},"Find your API ",(0,o.kt)("inlineCode",{parentName:"li"},"URL"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"anon"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"service_role")," keys on this page.")),(0,o.kt)("video",{width:"99%",muted:!0,playsInline:!0,controls:"true"},(0,o.kt)("source",{src:"/docs/videos/api/api-url-and-key.mp4",type:"video/mp4",muted:!0,playsInline:!0})),(0,o.kt)("h2",{id:"building-the-app"},"Building the App"),(0,o.kt)("p",null,"Let's start building the RedwoodJS app from scratch."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"RedwoodJS requires Node.js (>=14.x <=16.x) and Yarn (>=1.15).")),(0,o.kt)("p",null,"Make sure you have installed yarn since RedwoodJS relies on it to ",(0,o.kt)("a",{parentName:"p",href:"https://classic.yarnpkg.com/lang/en/docs/workspaces/"},"manage its packages in workspaces")," for its ",(0,o.kt)("inlineCode",{parentName:"p"},"web")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"api"),' "sides".'),(0,o.kt)("h3",{id:"initialize-a-redwoodjs-app"},"Initialize a RedwoodJS app"),(0,o.kt)("p",null,"We can use ",(0,o.kt)("a",{parentName:"p",href:"https://redwoodjs.com/docs/quick-start"},"Create Redwood App")," command to initialize\nan app called ",(0,o.kt)("inlineCode",{parentName:"p"},"supabase-redwoodjs"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn create redwood-app supabase-redwoodjs\ncd supabase-redwoodjs\n")),(0,o.kt)("p",null,"While the app is installing, you should see:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u2714 Creating Redwood app\n  \u2714 Checking node and yarn compatibility\n  \u2714 Creating directory 'supabase-redwoodjs'\n\u2714 Installing packages\n  \u2714 Running 'yarn install'... (This could take a while)\n\u2714 Convert TypeScript files to JavaScript\n\u2714 Generating types\n\nThanks for trying out Redwood!\n")),(0,o.kt)("p",null,"Then let's install the only additional dependency ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/supabase/supabase-js"},"supabase-js")," by running the ",(0,o.kt)("inlineCode",{parentName:"p"},"setup auth")," command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn redwood setup auth supabase\n")),(0,o.kt)("p",null,"When prompted:"),(0,o.kt)("p",null,"Overwrite existing /api/src/lib/auth.","[jt]","s?\n:::"),(0,o.kt)("p",null,"Say, ",(0,o.kt)("strong",{parentName:"p"},"yes")," and it will setup the Supabase client in your app and also provide hooks used with Supabase authentication."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u2714 Generating auth lib...\n  \u2714 Successfully wrote file `./api/src/lib/auth.js`\n  \u2714 Adding auth config to web...\n  \u2714 Adding auth config to GraphQL API...\n  \u2714 Adding required web packages...\n  \u2714 Installing packages...\n  \u2714 One more thing...\n\n  You will need to add your Supabase URL (SUPABASE_URL), public API KEY,\n  and JWT SECRET (SUPABASE_KEY, and SUPABASE_JWT_SECRET) to your .env file.\n")),(0,o.kt)("p",null,"Next, we want to save the environment variables in a ",(0,o.kt)("inlineCode",{parentName:"p"},".env"),".\nWe need the ",(0,o.kt)("inlineCode",{parentName:"p"},"API URL")," as well as the ",(0,o.kt)("inlineCode",{parentName:"p"},"anon")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"jwt_secret")," keys that you copied ",(0,o.kt)("a",{parentName:"p",href:"#get-the-api-keys"},"earlier"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title=".env"',title:'".env"'},"SUPABASE_URL=YOUR_SUPABASE_URL\nSUPABASE_KEY=YOUR_SUPABASE_ANON_KEY\nSUPABASE_JWT_SECRET=YOUR_SUPABASE_JWT_SECRET\n")),(0,o.kt)("p",null,"And finally, you will also need to save ",(0,o.kt)("strong",{parentName:"p"},"just")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"web side")," environment variables to the ",(0,o.kt)("inlineCode",{parentName:"p"},"redwood.toml"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="redwood.toml"',title:'"redwood.toml"'},'[web]\n  title = "Supabase Redwood Quickstart"\n  port = 8910\n  apiProxyPath = "/.redwood/functions"\n  includeEnvironmentVariables = ["SUPABASE_URL", "SUPABASE_KEY"]\n[api]\n  port = 8911\n[browser]\n  open = true\n')),(0,o.kt)("p",null,"These variables will be exposed on the browser, and that's completely fine.\nThey allow your web app to initialize the Supabase client with your public anon key\nsince we have ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/auth#row-level-security"},"Row Level Security")," enabled on our Database."),(0,o.kt)("p",null,"You'll see these being used to configure your Supabase client in ",(0,o.kt)("inlineCode",{parentName:"p"},"web/src/App.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="web/src/App.js"',title:'"web/src/App.js"'},"// ... Redwood imports\nimport { AuthProvider } from '@redwoodjs/auth'\nimport { createClient } from '@supabase/supabase-js'\n\n// ...\n\nconst supabaseClient = createClient(\n  process.env.SUPABASE_URL,\n  process.env.SUPABASE_KEY\n)\n\nconst App = () => (\n  <FatalErrorBoundary page={FatalErrorPage}>\n    <RedwoodProvider titleTemplate=\"%PageTitle | %AppTitle\">\n      <AuthProvider client={supabaseClient} type=\"supabase\">\n        <RedwoodApolloProvider>\n          <Routes />\n        </RedwoodApolloProvider>\n      </AuthProvider>\n    </RedwoodProvider>\n  </FatalErrorBoundary>\n)\n\nexport default App\n")),(0,o.kt)("p",null,"And one optional step is to update the CSS file ",(0,o.kt)("inlineCode",{parentName:"p"},"web/src/index.css")," to make the app look nice.\nYou can find the full contents of this file ",(0,o.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/supabase/supabase/master/examples/user-management/react-user-management/src/index.css"},"here"),"."),(0,o.kt)("h3",{id:"start-redwoodjs-and-your-first-page"},"Start RedwoodJS and your first Page"),(0,o.kt)("p",null,"Let's test our setup at the moment by starting up the app:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn rw dev\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Note: You can also use the alias ",(0,o.kt)("inlineCode",{parentName:"p"},"rw")," for ",(0,o.kt)("inlineCode",{parentName:"p"},"redwood"),", as in ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn rw")," to run Redwood CLI commands")),(0,o.kt)("p",null,'You should see a "Welcome to RedwoodJS" page and a message about not having any pages yet.'),(0,o.kt)("p",null,'So, let\'s create a "home" page:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn rw generate page home /\n\n\u2714 Generating page files...\n  \u2714 Successfully wrote file `./web/src/pages/HomePage/HomePage.stories.js`\n  \u2714 Successfully wrote file `./web/src/pages/HomePage/HomePage.test.js`\n  \u2714 Successfully wrote file `./web/src/pages/HomePage/HomePage.js`\n\u2714 Updating routes file...\n\u2714 Generating types ...\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Note: the slash ",(0,o.kt)("inlineCode",{parentName:"p"},"/")," is important here as it creates a root level route.")),(0,o.kt)("p",null,"You can stop the ",(0,o.kt)("inlineCode",{parentName:"p"},"dev")," server if you want; to see your changes, just be sure to run ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn rw dev")," again."),(0,o.kt)("p",null,"You should see the ",(0,o.kt)("inlineCode",{parentName:"p"},"Home")," page route in ",(0,o.kt)("inlineCode",{parentName:"p"},"web/src/Routes.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="web/src/Routes.js"',title:'"web/src/Routes.js"'},'import { Router, Route } from \'@redwoodjs/router\'\n\nconst Routes = () => {\n  return (\n    <Router>\n      <Route path="/" page={HomePage} name="home" />\n      <Route notfound page={NotFoundPage} />\n    </Router>\n  )\n}\n\nexport default Routes\n')),(0,o.kt)("h3",{id:"set-up-a-login-component"},"Set up a Login component"),(0,o.kt)("p",null,"Let's set up a Redwood component to manage logins and sign ups. We'll use Magic Links, so users can sign in with their email without using passwords."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn rw g component auth\n\n  \u2714 Generating component files...\n    \u2714 Successfully wrote file `./web/src/components/Auth/Auth.test.js`\n    \u2714 Successfully wrote file `./web/src/components/Auth/Auth.stories.js`\n    \u2714 Successfully wrote file `./web/src/components/Auth/Auth.js`\n\n")),(0,o.kt)("p",null,"Now, update the ",(0,o.kt)("inlineCode",{parentName:"p"},"Auth.js")," component to contain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/web/src/components/Auth/Auth.js"',title:'"/web/src/components/Auth/Auth.js"'},'import { useState } from \'react\'\nimport { useAuth } from \'@redwoodjs/auth\'\n\nconst Auth = () => {\n  const { logIn } = useAuth()\n  const [loading, setLoading] = useState(false)\n  const [email, setEmail] = useState(\'\')\n\n  const handleLogin = async (email) => {\n    try {\n      setLoading(true)\n      const { error } = await logIn({ email })\n      if (error) throw error\n      alert(\'Check your email for the login link!\')\n    } catch (error) {\n      alert(error.error_description || error.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className="row flex-center flex">\n      <div className="col-6 form-widget">\n        <h1 className="header">Supabase + RedwoodJS</h1>\n        <p className="description">\n          Sign in via magic link with your email below\n        </p>\n        <div>\n          <input\n            className="inputField"\n            type="email"\n            placeholder="Your email"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n          />\n        </div>\n        <div>\n          <button\n            onClick={(e) => {\n              e.preventDefault()\n              handleLogin(email)\n            }}\n            className={\'button block\'}\n            disabled={loading}\n          >\n            {loading ? <span>Loading</span> : <span>Send magic link</span>}\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Auth\n')),(0,o.kt)("h3",{id:"set-up-an-account-component"},"Set up an Account component"),(0,o.kt)("p",null,"After a user is signed in we can allow them to edit their profile details and manage their account."),(0,o.kt)("p",null,"Let's create a new component for that called ",(0,o.kt)("inlineCode",{parentName:"p"},"Account.js"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn rw g component account\n\n  \u2714 Generating component files...\n    \u2714 Successfully wrote file `./web/src/components/Account/Account.test.js`\n    \u2714 Successfully wrote file `./web/src/components/Account/Account.stories.js`\n    \u2714 Successfully wrote file `./web/src/components/Account/Account.js`\n")),(0,o.kt)("p",null,"And then update the file to contain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="web/src/components/Account/Account.js"',title:'"web/src/components/Account/Account.js"'},'import { useState, useEffect } from \'react\'\nimport { useAuth } from \'@redwoodjs/auth\'\n\nconst Account = () => {\n  const { client: supabase, currentUser, logOut } = useAuth()\n  const [loading, setLoading] = useState(true)\n  const [username, setUsername] = useState(null)\n  const [website, setWebsite] = useState(null)\n  const [avatar_url, setAvatarUrl] = useState(null)\n\n  useEffect(() => {\n    getProfile()\n  }, [supabase.auth.session])\n\n  async function getProfile() {\n    try {\n      setLoading(true)\n      const user = supabase.auth.user()\n\n      let { data, error, status } = await supabase\n        .from(\'profiles\')\n        .select(`username, website, avatar_url`)\n        .eq(\'id\', user.id)\n        .single()\n\n      if (error && status !== 406) {\n        throw error\n      }\n\n      if (data) {\n        setUsername(data.username)\n        setWebsite(data.website)\n        setAvatarUrl(data.avatar_url)\n      }\n    } catch (error) {\n      alert(error.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  async function updateProfile({ username, website, avatar_url }) {\n    try {\n      setLoading(true)\n      const user = supabase.auth.user()\n\n      const updates = {\n        id: user.id,\n        username,\n        website,\n        avatar_url,\n        updated_at: new Date(),\n      }\n\n      let { error } = await supabase.from(\'profiles\').upsert(updates, {\n        returning: \'minimal\', // Don\'t return the value after inserting\n      })\n\n      if (error) {\n        throw error\n      }\n\n      alert(\'Updated profile!\')\n    } catch (error) {\n      alert(error.message)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <div className="row flex-center flex">\n      <div className="col-6 form-widget">\n        <h1 className="header">Supabase + RedwoodJS</h1>\n        <p className="description">Your profile</p>\n        <div className="form-widget">\n          <div>\n            <label htmlFor="email">Email</label>\n            <input id="email" type="text" value={currentUser.email} disabled />\n          </div>\n          <div>\n            <label htmlFor="username">Name</label>\n            <input\n              id="username"\n              type="text"\n              value={username || \'\'}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n          </div>\n          <div>\n            <label htmlFor="website">Website</label>\n            <input\n              id="website"\n              type="website"\n              value={website || \'\'}\n              onChange={(e) => setWebsite(e.target.value)}\n            />\n          </div>\n\n          <div>\n            <button\n              className="button primary block"\n              onClick={() => updateProfile({ username, website, avatar_url })}\n              disabled={loading}\n            >\n              {loading ? \'Loading ...\' : \'Update\'}\n            </button>\n          </div>\n\n          <div>\n            <button className="button block" onClick={() => logOut()}>\n              Sign Out\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Account\n')),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Note: You'll see the use of ",(0,o.kt)("inlineCode",{parentName:"p"},"useAuth()")," several times in the quickstart. Redwood's ",(0,o.kt)("inlineCode",{parentName:"p"},"useAuth")," hook provides convenient ways to access\nlogIn, logOut, currentUser, and access the ",(0,o.kt)("inlineCode",{parentName:"p"},"supabase")," authenticate client. We'll use it to get an instance\nof the supabase client to interact with your API.")),(0,o.kt)("h3",{id:"update-home-page"},"Update Home Page"),(0,o.kt)("p",null,"Now that we have all the components in place, let's update your ",(0,o.kt)("inlineCode",{parentName:"p"},"HomePage")," page to use them:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="web/src/pages/HomePage/HomePage.js"',title:'"web/src/pages/HomePage/HomePage.js"'},"import { useAuth } from '@redwoodjs/auth'\nimport { MetaTags } from '@redwoodjs/web'\n\nimport Account from 'src/components/Account'\nimport Auth from 'src/components/Auth'\n\nconst HomePage = () => {\n  const { isAuthenticated } = useAuth()\n\n  return (\n    <>\n      <MetaTags title=\"Welcome\" />\n      {!isAuthenticated ? <Auth /> : <Account />}\n    </>\n  )\n}\n\nexport default HomePage\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"What we're doing here is showing the sign in form if you aren't logged in and your account profile if you are.")),(0,o.kt)("h3",{id:"launch"},"Launch!"),(0,o.kt)("p",null,"Once that's done, run this in a terminal window to launch the ",(0,o.kt)("inlineCode",{parentName:"p"},"dev")," server:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn rw dev\n")),(0,o.kt)("p",null,"And then open the browser to ",(0,o.kt)("a",{parentName:"p",href:"http://localhost:8910"},"localhost:8910")," and you should see the completed app."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Supabase RedwoodJS",src:a(7409).Z,width:"1898",height:"1108"})),(0,o.kt)("h2",{id:"bonus-profile-photos"},"Bonus: Profile photos"),(0,o.kt)("p",null,"Every Supabase project is configured with ",(0,o.kt)("a",{parentName:"p",href:"/docs/guides/storage"},"Storage")," for managing large files like photos and videos."),(0,o.kt)("h3",{id:"create-an-upload-widget"},"Create an upload widget"),(0,o.kt)("p",null,"Let's create an avatar for the user so that they can upload a profile photo. We can start by creating a new component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn rw g component avatar\n  \u2714 Generating component files...\n    \u2714 Successfully wrote file `./web/src/components/Avatar/Avatar.test.js`\n    \u2714 Successfully wrote file `./web/src/components/Avatar/Avatar.stories.js`\n    \u2714 Successfully wrote file `./web/src/components/Avatar/Avatar.js`\n")),(0,o.kt)("p",null,"Now, update your Avatar component to contain the following widget:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="web/src/components/Avatar/Avatar.js"',title:'"web/src/components/Avatar/Avatar.js"'},"import { useEffect, useState } from 'react'\nimport { useAuth } from '@redwoodjs/auth'\n\nconst Avatar = ({ url, size, onUpload }) => {\n  const { client: supabase } = useAuth()\n\n  const [avatarUrl, setAvatarUrl] = useState(null)\n  const [uploading, setUploading] = useState(false)\n\n  useEffect(() => {\n    if (url) downloadImage(url)\n  }, [url])\n\n  async function downloadImage(path) {\n    try {\n      const { data, error } = await supabase.storage\n        .from('avatars')\n        .download(path)\n      if (error) {\n        throw error\n      }\n      const url = URL.createObjectURL(data)\n      setAvatarUrl(url)\n    } catch (error) {\n      console.log('Error downloading image: ', error.message)\n    }\n  }\n\n  async function uploadAvatar(event) {\n    try {\n      setUploading(true)\n\n      if (!event.target.files || event.target.files.length === 0) {\n        throw new Error('You must select an image to upload.')\n      }\n\n      const file = event.target.files[0]\n      const fileExt = file.name.split('.').pop()\n      const fileName = `${Math.random()}.${fileExt}`\n      const filePath = `${fileName}`\n\n      let { error: uploadError } = await supabase.storage\n        .from('avatars')\n        .upload(filePath, file)\n\n      if (uploadError) {\n        throw uploadError\n      }\n\n      onUpload(filePath)\n    } catch (error) {\n      alert(error.message)\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  return (\n    <div>\n      {avatarUrl ? (\n        <img\n          src={avatarUrl}\n          alt=\"Avatar\"\n          className=\"avatar image\"\n          style={{ height: size, width: size }}\n        />\n      ) : (\n        <div\n          className=\"avatar no-image\"\n          style={{ height: size, width: size }}\n        />\n      )}\n      <div style={{ width: size }}>\n        <label className=\"button primary block\" htmlFor=\"single\">\n          {uploading ? 'Uploading ...' : 'Upload'}\n        </label>\n        <input\n          style={{\n            visibility: 'hidden',\n            position: 'absolute',\n          }}\n          type=\"file\"\n          id=\"single\"\n          accept=\"image/*\"\n          onChange={uploadAvatar}\n          disabled={uploading}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Avatar\n")),(0,o.kt)("h3",{id:"add-the-new-widget"},"Add the new widget"),(0,o.kt)("p",null,"And then we can add the widget to the Account component:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="web/src/components/Account/Account.js"',title:'"web/src/components/Account/Account.js"'},"// Import the new component\nimport Avatar from 'src/components/Avatar'\n\n// ...\n\nreturn (\n  <div className=\"form-widget\">\n    {/* Add to the body */}\n    <Avatar\n      url={avatar_url}\n      size={150}\n      onUpload={(url) => {\n        setAvatarUrl(url)\n        updateProfile({ username, website, avatar_url: url })\n      }}\n    />\n    {/* ... */}\n  </div>\n)\n")),(0,o.kt)("h2",{id:"next-steps"},"Next steps"),(0,o.kt)("p",null,"At this stage you have a fully functional application!"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Got a question? ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/supabase/supabase/discussions"},"Ask here"),"."),(0,o.kt)("li",{parentName:"ul"},"Sign in: ",(0,o.kt)("a",{parentName:"li",href:"https://app.supabase.com"},"app.supabase.com")),(0,o.kt)("li",{parentName:"ul"},"Learn more about ",(0,o.kt)("a",{parentName:"li",href:"https://redwoodjs.com"},"RedwoodJS")),(0,o.kt)("li",{parentName:"ul"},"Visit the ",(0,o.kt)("a",{parentName:"li",href:"https://community.redwoodjs.com"},"RedwoodJS Discourse Community"))))}m.isMDXComponent=!0},7409:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/supabase-redwoodjs-demo-8811a905e5bdd2edc5306ae25f74238d.png"},83900:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/user-management-demo-807ebc3917e770d969d27713c151126d.png"}}]);